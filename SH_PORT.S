;
;******************************************************************************
;
;			RS_232 MODULE
;
;******************************************************************************

;	GLOBAL	ACT_FT
;	GLOBAL	ACT_OT
;	GLOBAL	IN_T
;	GLOBAL	IN_BYP
;	GLOBAL	OUT_T
;	GLOBAL	OUT_T2
;	GLOBAL	STR_OF
;	GLOBAL	B_COL
;	GLOBAL	 OPENT
;	EXTERNAL END1
;	EXTERNAL CHANGE
;	EXTERNAL	RELNAM



		; THERE ARE FOUR ROUTINES IN THIS MODULE

		; 1. ACT_FT	- FORMAT "T" ,BAUD
		; 2. ACT_IT	- OPEN #?,"T",BAUD
		; 3. IN_T	- INPUT VIA RS_232
		; 4. OUT_T	- OUTPUT VIA RS_232


ACT_FT						; FETCHES THE VALUE FROM 'D-STR1'
						; AND COMPUTES THE VALUE FOR THE SYS. VAR. 'BAUD'

	LD	BC,(DR+D_STR1)			; GET PARAMETER
	LD	HL,T_BAUD			; BASE ADDRESS OF TABLE

FT_1	LD	E,(HL)				; FETCH LOW BYTE OF 'RATE'
	INC	HL
	LD	D,(HL)				; FETCH HIGH BYTE OF 'RATE'
	INC	HL
	EX	DE,HL				; SWITCH POINTER & VALUE

	LD	A,H				; TEST HIGH BYTE
	CP	04BH				; AGAINST 'LAST ENTRY'
	JR	NC,FT_2				; JUMP AT END

	AND	A
	SBC	HL,BC				; TEST VALUE (CARRY RESET)
	JR	NC,FT_2				; JUMP IF VALUE IS GOOD
	EX	DE,HL				; SWITCH BACK
	INC	HL
	INC	HL				; STEP PAST DATA BYTES
	JR	FT_1				; ROUND AGAIN

FT_2	EX	DE,HL				; POINTER BACK TO HL
	LD	E,(HL)				; FETCH LOW 'BAUD'
	INC	HL
	LD	D,(HL)				; FETCH HIGH 'BAUD'
	LD	(DR+BAUD),DE			; STORE IT

	JP	END1				; RUN IS FINISHED

T_BAUD	DEFW	0032H				; RATE 50
	DEFW	0A82H
	DEFW	006EH				; RATE 110
	DEFW	04C5H
	DEFW	012CH				; RATE 300
	DEFW	01BEH
	DEFW	0258H				; RATE 600
	DEFW	00DEH
	DEFW	04B0H				; RATE 1200
	DEFW	006EH
	DEFW	0960H				; RATE 2400
	DEFW	0036H
	DEFW	12C0H				; RATE 4800
	DEFW	001AH
	DEFW	2580H				; RATE 9600
	DEFW	000CH
	DEFW	4B00H				; RATE 19200
	DEFW	0005H                    


; OPENT CREATES AN RS232 CHANNEL.
; THE TYPE, B OR T IS DEFINED BY L_STR1

OPENT
	LD	HL,(PROG)
	DEC	HL
	LD	BC,T_TABL
	PUSH	BC
	RST	CALBAS
	DEFW	1655H				; INSERT CHANNEL DATA FOR A RS_232 STREAM
	POP	BC
	PUSH	DE
	CALL	RELNAM				; RELOCATE FILENAMES FOR MOVE "T" TO "M"
	POP	DE

	LD	HL,T_TAB+T_TABL-1
	LD	BC,T_TABL
	LDDR					; MOVE THE DATA
	INC	DE

	LD	A,(DR+L_STR1)			; FETCH THE LETTER
	CP	42H				; IS IT 'B'?
	RET	NZ

	PUSH	DE				; FOR 'B' CHANGE 'OUT_T' TO 'OUT_T2'
						; 'IN_T' TO 'IN_T2'
	LD	HL,0005H			; FIFTH AND SIXTH BYTE
	ADD	HL,DE
	LD	DE,OUT_T2
	LD	(HL),E				; LOW BYTE
	INC	HL
	LD	(HL),D				; HIGH BYTE
	INC	HL
	LD	DE,IN_T2
	LD	(HL),E
	INC	HL
	LD	(HL),D
	POP	DE				; NOW CONTINUE INTO STR_OF
	RET

;______________________________________________________________________

ACT_OT			; ASSOCIATES A GIVEN STEAM (IN S_STR1)
	CALL    OPENT
STR_OF						; ENTER THE STREAM OFFSET
						; DE POINTS TO THE FIRST LOCATION
	LD	HL,(CHANS_)			; COMPUTE THE 'OFFSET' AS REQUIRED
	DEC	HL
	EX	DE,HL
	AND	A
	SBC	HL,DE
	EX	DE,HL
	LD	HL,STRMS+6			; FIND THE 'CURRENT' STREAM BYTES
	LD	A,(DR+S_STR1)
	RLCA
	LD	C,A
	LD	B,00H
	ADD	HL,BC
	LD	(HL),E				; ENTER THE 'OFFSET'
	INC	HL
	LD	(HL),D
	JP	END1				; EXIT NOW - THE STREAM IS NOW OPEN

T_TAB		; CHANNEL DATA FOR RS_232
	DEFW	0008H
	DEFW	0008H
	DEFB	54H
	DEFW	OUT_T
	DEFW	IN_T
	DEFW	T_TABL

T_TABL  EQU	$-T_TAB

;______________________________________________________________________

IN_T	LD	HL,IN_BYQ			; 7 BIT INPUT ROUTINE
	JP	CHANGE

IN_T2	LD 	HL,IN_BYP			; ACTUAL INPUT FROM PORT ROUTINE
	JP	CHANGE				; JUMP TO IT FOR BOTH INPUT & INKEY$

;______________________________________________________________________
IN_BYQ	CALL	IN_BYP				; JUST THE SAME BUT
	RES	7,A				; FORCES ASCII
	RET


IN_BYP		; BYTE IN FROM PORT

	LD	HL,SER_FL+DR			; ADDRESS THE FLAG
	LD	A,(HL)				; FETCH THE FLAG
	AND	A				; TEST IT
	JR	Z,IN_BY0			; JUMP IF NO SAVED CHARACTER

	LD	(HL),00H			; BUT CLEAR FLAG IF THERE IS ONE
	INC	HL
	LD	A,(HL)				; FETCH CHARACTER IN SECOND BYTE OF SER_FL
	SCF
	RET					; EXIT WITH THE CHARACTER

IN_BY0
	LD	A,7FH				; MUST CHECK THE BREAK KEY SOMEWHERE
	IN	A,(KB_PT)
	RRCA
	JR	C,INBY05

	LD	(IY+ERR_NR-Y),14H
	RST	ROMERR
INBY05
	DI
	LD	A,(DR+IOBORD)
	OUT	(0FEH),A

	LD	DE,(DR+BAUD)
	LD	HL,800				; 10MS TIMEOUT
	LD	B,D
	LD	C,E
	SRL	B
	RR	C				; 1/2 BIT INTERVAL IN BC

	LD	A,SELD				; ASSERT CTS
	OUT	(STATUS),A

INBY1
	IN	A,(SERIAL)
	RLCA
	JR	NC,INBY15

	IN	A,(SERIAL)			; WAS IT A FALSE START BIT
	RLCA
	JR	NC,INBY15

	IN	A,(SERIAL)
	RLCA
	JR	NC,INBY15
    
	IN	A,(SERIAL)
	RLCA
	JR	C,INBY2
INBY15						; KEEP LOOKING
	DEC	HL
	LD	A,H
	OR	L
	JR	NZ,INBY1

	PUSH	AF				; RETURN NC,Z ON TIMEOUT
	LD	A,CTS.AND.SELD
	OUT	(STATUS),A
	JR	INBY45
INBY2
	LD	H,B
	LD	L,C
	LD	B,80H
	DEC	HL				; COMPENSATE FOR FALSE START BIT DETECTION
	DEC	HL
	DEC	HL

IN_BY3  ADD	HL,DE
	NOP					; WASTE TIME

IN_BY4  DEC	HL
	LD	A,H
	OR	L
	JR	NZ,IN_BY4			; EXHAUSE THE TIMING COUNTER

	ADD	A,00H				; WASTE 7 T-STATES
	IN	A,(SERIAL)			; READ THE PORT
	RLCA					; MOVE BIT 7 TO THE CARRY
	RR	B				; COLLECT THE BITS IN B
	JR	NC,IN_BY3			; ROUND FOR 8 BITS - IGNORES THE 'STOP BITS'

	LD	A,CTS.AND.SELD
	OUT	(STATUS),A			; CLEAR CTS (NO LONGER 'READY')

	LD	A,B				; SAVE THE CHARACTER AND FLAG
	CPL
	SCF
	PUSH	AF

		; NOW SEE IF THERE IS A 'SECOND CHARACTER
INBY45
	ADD	HL,DE				; FETCH THE 'DELAY'
IN_BY5  DEC	HL
	LD	A,L
	OR	H
	JR	NZ,IN_BY5			; WAIT THE DELAY TIME

	ADD	HL,DE
	ADD	HL,DE				; THREE BITS (GERIATRIC IBM!)
	ADD	HL,DE
IN_BY6  DEC	HL
	LD	A,L
	OR	H
	JR	Z,IN_BY9			; USE THE DELAY TIME AS A TIME-OUT

	IN	A,(SERIAL)			; LOOK FOR THE 'START'
	RLCA
	JR	NC,IN_BY6			; ROUND AGAIN IF NOT FOUND

	IN	A,(SERIAL)			; FALSE START BIT ?
	RLCA
	JR	NC,IN_BY6

	IN	A,(SERIAL)
	RLCA
	JR	NC,IN_BY6

	IN	A,(SERIAL)
	RLCA
	JR	NC,IN_BY6

	LD	H,D
	LD	L,E
	SRL	H
	RR	L
	LD	B,080H				; SET THE MARKER BIT
	DEC	HL
	DEC	HL				; COMPENSATE FOR FALSE START BIT DETECTION
	DEC	HL

		; NOW COLLECT THE CHARACTER (AS ABOVE)
IN_BY7	ADD	HL,DE
	NOP
IN_BY8	DEC	HL
	LD	A,H
	OR	L
	JR	NZ,IN_BY8
	ADD	A,00H
	IN	A,(SERIAL)
	RLCA
	RR	B
	JR	NC,IN_BY7

	LD	HL,SER_FL+DR			; SET THE FLAG
	LD	(HL),01H
	INC	HL
	LD	A,B
	CPL					; COMPLEMENT THE NEW CHARACTER
	LD	(HL),A				; AND SAVE IT

IN_BY9	CALL	B_COL				; RESET ORIGINAL BORDER COLOUR
	POP	AF				; RETRIEVE THE CHARACTER
	EI					; INTERRUPT ON NOW
	RET					; EXIT APPROPRIATELY


;______________________________________________________________________



OUT_T
		; ACTUAL WRCH ROUTINE FOR THE RS232 - DEALS WITH 'SINCLAIR' CODES


	CP	0A5H				; COMPARE CHARACTER TO 'RND' - FIRST TOKEN
	JR	C,LOT_A				; JUMP IF NOT A TOKEN

	SUB	0A5H
	RST	CALBAS
	DEFW	0C10H
	RET

LOT_A	CP	7FH				; IS IT A GRAPHIC?
	JR	C,LOT_B				; JUMP IF NOT
	LD	A,3FH				; FORCE ALL GRAPHICS TO 03FH - '?'
      
LOT_B	CP	0DH				; CARRIAGE RETURN?
	JR	NZ,LOT_C
	CALL	OUT_T2				; CR
	LD	A,0AH
	JR	OUT_T2				; AUTO LF
LOT_C	CP	20H				; TEST AGAINST 'SPACE'
	RET	C				; RETURN - IGNORING THE CONTROL CHARACTERS

;______________________________________________________________________


OUT_T2		; ACTUAL 'BYTE' WRCH ROUTINE

	LD	B,0BH				; A 'START BIT', 8 CODE BITS & 2 'STOP BITS
	CPL					; COMPLEMENT THE CODE BITS
	LD	C,A				; SAVE THE CODE BYTE IN C
	LD	A,(DR+IOBORD)			; FETCH THE CURRENT I/O BORDER COLOUR
	OUT	(0FEH),A

	LD	A,CTS				; SELECT THE RS32 OVER NET
	OUT	(PORTC),A
	CPL
	OUT	(RS232),A			; PUT OUT LOW LEVEL
       

	LD	HL,(DR+BAUD)			; FETCH CURRENT RATE
	
	LD	D,H
	LD	E,L
LOT1
	DEC	DE				; ALLOW TIME FOR THE NOISE TO BE IGNORED
	LD	A,D
	OR	E
	JR	NZ,LOT1
LOT2    
	LD	A,7FH
	IN	A,(KB_PT)
	OR	0FEH
	IN	A,(KB_PT)
	RRA
	JP	NC,ERRH
	IN	A,(STATUS)
	AND	DTR				; WAIT FOR BIT 3 OF STATUS TO BE FOUND 'HIGH'
	JR	Z,LOT2				; WAIT UNTIL THE PORT BECOMES FREE
	SCF					; FORM THE 'START BIT'
	DI					; INTERRUPT OFF
LOT3
	ADC	A,00H				; 'CARRY SET' SENDS 'HIGH'; 'RESET' SENDS 'LOW'
	OUT	(RS232),A			; SEND OUT BIT 0
	LD	D,H				; FETCH THE TIMING LOOP VALUE (BAUD)
	LD	E,L
LOT4
	DEC	DE
	LD	A,D
	OR	E
	JR	NZ,LOT4				; ROUND TIMING LOOP UNTIL EXHAUSTED
	DEC	DE				; WASTE 6 T-STATES
	XOR	A				; CLEAR THE 'A' REGISTER
	SRL	C				; BITS GO INTO CARRY (LSB FIRST)
						; TRUE VALUES ARE SENT 'INVERTED'
						; THE STOP BITS ARE FORMED BY THE LAST TWO " NC'S "
	DJNZ	LOT3				; ROUND FOR ALL THE BITS
						; TIME BETWEEN BITS IS - 'LOOP COUNT' + 57 T-STATES
	EI					; INTERRUPT ON BEFORE CONTINUING INTO B_COL
	LD	A,1				; DEACTIVATE THE NET
	LD	C,PORTC
	LD	B,CTS.AND.SELD			; RESELECT THE NET
	OUT	(SERIAL),A
	OUT	(C),B
LOT5
	DEC	HL				; WAIT FOR THE NOISE TO GO AWAY
	LD	A,L
	OR	H
	JR	NZ,LOT5


;______________________________________________________________________



B_COL	LD	A,(BORDCR)			; RETURN THE ORIGINAL BORDER COLOUR
	AND	38H
	RRCA
	RRCA
	RRCA
	OUT	(0FEH),A
	RET
ERRH
	EI
	CALL	B_COL
	LD	(IY+ERR_NR-Y),14H
	RST	ROMERR

;______________________________________________________________________
