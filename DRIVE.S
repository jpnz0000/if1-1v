;**************************************************
;*                                                *
;*	 DRIVE.S                                  *
;*	12/5/83                                   *
;*                                                *
;**************************************************
;
;	GLOBAL		DRVSEL,RDHBLK,RDBLK,WRHBLK,WRBLK
;	GLOBAL		BREAK?,DRV0
;
;	GLOBAL		DECBC
;	EXTERNAL	OP,OPHEX,HEX
;	EXTERNAL	B_COL
;	EXTERNAL	MRDCH,MWRCH,DELIX,CLOSEN	;HISOFT
;	EXTERNAL	CLOSIX
;	EXTERNAL	CREATE,WRREC,READN
;	EXTERNAL	WTHDR,ECD,ECH
;	EXTERNAL	FORMAT,OPENF,OPENN,CATN,ERA	;VHSOFT
;	EXTERNAL	MOVE,SAVE,GET_HD,GETMBL			;UHSOFT
;
; DRVSEL SELECTS AND TURNS ON THE MOTOR FOR THE DRIVE
; SPECIFIED BY ACC
; TO DESELECT ALL DRIVES A=0
; INTERRUPTS ARE DISABLED WHILE A DRIVE IS SELECTED
; WHEN A DRIVE IS SELECTED DRVSEL WAITS FOR A PERSISTANT
; SIGNAL SO THAT AN EMPTY DRIVE IS NOT SELECTED
; FORMAT SHOULD CALL DRV0 IN ORDER TO SELECT A DRIVE
; WITH A BLANK TAPE
;
DRVSEL
	PUSH	HL
	CP	0				; STARTING OR STOPPING?
	JR	NZ,DRVS1
	CALL	DRV0				; STOPPING...JUST DO IT
	EI
	POP	HL
	RET
DRVS1
	DI
	CALL	DRV0				; STARTING...DO IT
	LD	HL,5000				; THEN WAIT 40MS FOR MOTOR VOLTAGE
DRVS5
	DEC	HL
	LD	A,H
	OR	L
	JR	NZ,DRVS5
	LD	HL,5000				; THEN WAIT FOR A SIGNAL
DRVS4
	LD	B,6				; AT LEAST THIS LONG
DRVS2
	CALL	BREAK?
	IN	A,(PORTC)
	AND	GAP
	JR	NZ,DRVS3
	DJNZ	DRVS2				; LONG ENOUGH?
	POP	HL
	RET
DRVS3
	DEC	HL
	LD	A,H
	OR	L
	JR	NZ,DRVS4			; WAITED TOO LONG?
	CALL	DRVSEL				; DRIVE OFF
	RST	SH_ERR
	DEFB	10H				; DRIVE NOT PRESENT
;
;
DRV0
	PUSH	DE
	LD	DE,100H				; OUTPUTTING E DEACTIVATES THE RS232
						; OUTPUTTING D DEACTIVES THE NET
	NEG					; COUNTING FROM THIS END
	ADD	A,9
	LD	C,A
	LD	B,8
DRV1
	DEC	C
	JR	NZ,DRV2

	LD	A,D				; DEACTIVATE NET
	OUT	(RS232),A
	LD	A,SELD.AND.CTS			; SELECT THIS DRIVE & NET
	OUT	(PORTC),A
	CALL	DELAY

	LD	A,SELD.AND.CTS.AND.SELC		; CLOCK IT THROUGH
	OUT	(PORTC),A
	CALL	DELAY
	JR	DRV3
DRV2
	LD	A,CTS				; NOT THIS DRIVE
	OUT	(PORTC),A			; RS232 SELECTED
	LD	A,E
	OUT	(RS232),A			; DEACTIVATE RS232
	CALL	DELAY
	LD	A,CTS.AND.SELC
	OUT	(PORTC),A			; CLOCK IT THROUGH
	CALL	DELAY
DRV3
	DJNZ	DRV1

	LD	A,D				; DEACTIVATE THE NET
	OUT	(RS232),A
	LD	A,CTS.AND.SELD			; LEAVE NET SELECTED AT END
	OUT	(PORTC),A
	POP	DE
	RET
;
;
DELAY
	PUSH	BC
	PUSH	AF
	LD	BC,135
	CALL	DELBC
	POP	AF
	POP	BC
	RET
;
;
;
; WRHBLK		WRITES A HEADER BLOCK FROM (HL)
; WRBLK WRITES A DATA BLOCK FROM (HL)
; USES ABCDEHL
;
WRHBLK
	PUSH	HL
	LD	DE,HD_LEN+3
	JR	WR1
WRBLK
	PUSH	HL
	LD	DE,D_LEN+3
WR1
	IN	A,(PORTC)
	AND	PROTECT				; IS THE DRIVE WRITE PROTECTED?
	JR	NZ,_WR11
	RST	SH_ERR
	DEFB	0EH				; DRIVE WRITE PROTECTED
_WR11
	LD	A,(DR+IOBORD)
	OUT	(254),A
;
	LD	A,WRITE.AND.ERASE.AND.CTS.AND.SELD
	OUT	(PORTC),A
;
	INC	D
	LD	A,D
	LD	B,E
	LD	C,PORTD
;
	NOP
	NOP
	NOP
;
WR2
	OTIR
	DEC	A
	JR	NZ,WR2
;
	LD	A,ERASE.AND.CTS.AND.SELD
	OUT	(PORTC),A			; WRITE CURRENT OFF
;
;
	CALL	B_COL
	POP	HL
	RET
;
;
;
; RDHBLK WAITS FOR A GAP AND READS THE NEXT BLOCK AS A HEADER
; BLOCK INTO HL
; RDBLK DOES THE SAME FOR A DATA BLOCK
;
RDHBLK
	PUSH	HL
	LD	DE,HD_LEN-PLEN
	JR	RD1
RDBLK
	PUSH	HL
	LD	DE,D_LEN-PLEN
RD1
	LD	B,E
	LD	C,D
	INC	C
;
	PUSH	BC
RD2
	LD	B,8				; WAIT FOR A PERSISTANT GAP
						; THE PERIOD OF THIS LOOP IS 34US
RD2_5
	CALL	BREAK?
	IN	A,(PORTC)
	AND	GAP
	JR	Z,RD2
	DJNZ	RD2_5
RD3
	LD	B,6
RD3_5
	CALL	BREAK?
	IN	A,(PORTC)			; WAIT FOR A PERSISTANT SIGNAL
	AND	GAP
	JR	NZ,RD3
	DJNZ	RD3_5
	POP BC
;
	LD	A,CTS.AND.SELD			; ISSUE READ COMMAND
	OUT	(PORTC),A
	POP	HL
	PUSH	HL
RD4
	IN	A,(PORTC)			; WAIT FOR SYNC PULSE
	AND	SYNC
	JR	NZ,RD4
RD5
	CALL	BREAK?				; DO SOMETHING SO WE DON'T
						; READ TOO EARLY
	LD	A,C
	LD	C,PORTD
RD6
	INIR
	DEC	A
	JR	NZ,RD6
;
	LD	A,CTS.AND.SELD
	OUT	(PORTC),A
	POP	HL
	RET
;
;
;
;*****************************************************
;*    UTILITIES                                      *
;*****************************************************
;
;
BREAK?  LD	A,7FH				; ROW 7
	IN	A,(KB_PT)
	RRA
	RET	C
	LD	A,0FEH
	IN	A,(KB_PT)
	RRA
	RET	C
	LD	(IY+ERR_NR-Y),14H
	RST	ROMERR
;
;
DELBC
	PUSH	AF
DEL1
	DEC	BC
	LD	A,B
	OR	C
	JR	NZ,DEL1
	POP	AF
	RET
;
;
;
; 32 BIT CHECKSUM
; IF THE DATA BYTES ARE A,B,C,D,E ETC
; THEN THE CHECKSUM IS COMPUTED AS:-
; 1024*A + 1023*B + 1022*C + 1021 *D + ETC.
;
; THIS IS ACHIEVED THIS BY SUMMING THE 512 BYTES AND PROGRESSIVELY
; SUMMING THE SUM.
; WE THEN HAVE:-
; 512*A + 511*B + 510*C + ETC
; SO WE MULTIPLY THE SUM BY 512 AND ADD IT TO THE SUM OF SUMS
; GIVING THE CHECKSUM.
; THIS GIVES COMPLETE PROTECTION AGAINST DOUBLE BIT ERRORS
;
; HL'HL CONTAINS THE SUM OF SUMS
; DE'DE CONTAINS THE SUM
; BC CONTAINS THE ADDRESS OF THE DATA
; BC' CONTAINS THE BYTE COUNT
;
ECD32
	PUSH	HL
	PUSH	IX
	POP	HL
	LD	BC,CHDATA
	ADD	HL,BC
	LD	B,H
	LD	C,L				; ADDRESS IN BC

	LD	HL,0				; SS IN HL
	LD	DE,0				; S IN DE

	EXX

	LD	BC,512				; BYTE COUNT IN BC
	LD	HL,0				; SS IN HL
	LD	DE,0				; S IN DE
CHK1
	EXX

CHK2
	LD	A,(BC)
	INC	BC

	ADD	A,E				; ADD BYTE TO SUM
	LD	E,A
	JR	NC,CHK3

	INC	D
	JR	NZ,CHK3

	EXX
	INC	DE
	EXX
CHK3
	ADD	HL,DE				; ADD SUM TO SUM OF SUMS
	EXX
	ADC	HL,DE

	DEC	BC
	LD	A,B
	OR	C
	JR	NZ,CHK1

	LD	D,E				; NOW MULTIPLY SUM BY 512
	EXX					; *256
	LD	A,D
	LD	E,0
	SLA	D				; *2
	EXX
	LD	E,A
	RL	E
	RL	D

	EXX					; ADD THIS TO SS

	ADD	HL,DE
	EXX
	ADC	HL,DE
	PUSH	HL
	EXX

	PUSH	HL				; NOW COMPARE WITH AND REPLACE OLD CHECKSUM
	PUSH	BC				; E ERROR FLAG
	POP	HL
	POP	BC
	LD	E,0
	LD	A,C
	CP	(HL)
	JR	Z,CHK4
	INC	E
	LD	(HL),A
CHK4	INC	HL
	LD	A,B
	CP	(HL)
	JR	Z,CHK5
	INC	E
	LD	(HL),A
CHK5	INC	HL
	POP	BC
	LD	A,C
	CP	(HL)
	JR	Z,CHK6
	INC	E
	LD	(HL),A
CHK6	INC	HL
	LD	A,B
	CP	(HL)
	JR	Z,CHK7
	INC	E
	LD	(HL),A
CHK7	LD	A,E
	OR	A
	POP	HL
	RET
;
;
; SCRAM SCRAMBLES (OR UNSCRAMBLES) THE DATA IN THE UDRIVE BUFFER AT IX
; IT IS CALLED BEFORE ECD ON WRITING OR AFTER ECD ON READING (IF THE DATA
; IS OK).
; BY DOING THIS WE HOPE TO BREAK UP RELATIVELY COMMON OFFS IN THE DATA
; AND IMPROVE THE RELIABILITY.
;
SCRAM
	PUSH	IX
	POP	HL
	LD	DE,CHDATA
	ADD	HL,DE
	LD	BC,512
SCR
	LD	A,(HL)
	XOR	55H
	LD	(HL),A
	INC	HL
	DEC	BC
	LD	A,B
	OR	C
	JR	NZ,SCR
	RET
;
	END
