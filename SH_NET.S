;
;******************************************************************************
;
;		NET  MODULE
;
;******************************************************************************



;		GLOBAL ACT_ON		;OPEN A NET STREAM
;		GLOBAL IN_N		;INCH FOR INPUT/INKEY$
;		GLOBAL OUT_N		;WRCH FOR NET
;		GLOBAL NTCLSE		;SEND A 'CLOSED' NET BUFFER
;		GLOBAL NOPEN		;OPEN A NET CHANNEL
;		GLOBAL NTEMP		;OPEN A TEMPORARY CHANNEL
;		GLOBAL IN_BYT		;ACTUAL INCH ROUTINE (ALL CASES)
;		GLOBAL CHANGE		;CHANGE INPUT/INKEY$ AS NEEDED
;		GLOBAL  ONETO		;OUTPUT TO NET WITHOUT WAITING
;		EXTERNAL B_COL		;RESTORE ORIGINAL BORDER COLOUR
;		EXTERNAL RETBAS			;EXIT VIA PAGING MECHANISM
;		EXTERNAL STR_OF			;ENTER STREAM DATA BYTES
;	EXTERNAL	RELNAM

;	GLOBAL OUTPAK,RSPOND,INPAK,GETPAK,OUTNET,OUTSCT,INSCT


; DATA ON THE NET IS FORMATTED INTO 'PACKET SETS'. A PACKET SET COMPRISES
; (1) A 'SCOUT', WHICH IS THE STATION NO. OUTPUT SLOWLY.
; (11) A HEADER PACKET OF 8 BYTES:
;     THE STATION NO. OF THE DESTINATION.
;     THE STATION NO. OF THE SENDER.
;     THE TYPE OF THE PACKET SET ('DATA' OR 'CLOSE').
;     THE LENGTH OF THE DATA BLOCK ('0' & '255').
;     THE NUMBER OF THE BLOCK ('0' - '65535').
;     A CHECKSUM FOR THE DATA.
;     A CHECKSUM FOR THE FIRST SEVEN BYTES OF THIS HEADER.
; (111) A DATA PACKET, BETWEEN 1 & 255 BYTES (OMITTED IF NO DATA).


;	THE DATA FOR A NET CHANNEL IS AS FOLLOWS:

;DEFW	0008H					; SHADOW ROM VECTOR
;DEFW	0008H					; SHADOW ROM VECTOR
NCCODE	EQU	04H				; 'N'
NCWRCH	EQU	05H				; WRCH ADDRESS
NCINCH	EQU	07H				; INCH ADDRESS
NCILEN	EQU	09H				; LENGTH OF NET CHANNEL DATA

		; OUTPUT DETAILS - THE NEXT 8 BYTES ALSO FORM THE HEADER
NCIRIS	EQU	0BH				; 'IRIS' STATION NUMBER - DESTINATION
NCSELF	EQU	0CH				; OWN STATION NUMBER
NCNUMB	EQU	0DH				; BLOCK NUMBER ('0' TO '65535')
NCTYPE	EQU	0FH				; TYPE OF PACKET - 'DATA' OR 'CLOSE'
NCOBL	EQU	10H				; OUTPUT BUFFER LENGTH
NCDCS	EQU	11H				; DATA CHECKSUM
NCHCS	EQU	12H				; HEADER CHECKSUM

		; INPUT DETAILS
NCCUR	EQU	13H				; NUMBER OF LAST CHARACTER TAKEN DURING INPUT
NCIBL	EQU	14H				; INPUT BUFFER LENGTH

		; AND FINALLY THE BUFFER
NCB	EQU	15H				; BUFFER FOR INPUT & OUTPUT OF 255 LOCATIONS
NCEND	EQU	N_LEN


;	TOTAL LENGTH = 0114H  = 276 DECIMAL BYTES

;______________________________________________________________________
 
		; CHANGE SUBROUTINE
		; COMMON TO BOTH NET & DRIVE SOFTWARE
CHANGE	RES	3,(IY+TV_FLAG-Y)		; CORRECT THE ERROR ON EACH CALL

	PUSH	HL				; ROUTINE ADDRESS TO STACK DURING THE TEST
	LD	HL,(ERR_SP)			; FETCH THE ERROR POINTER
	LD	E,(HL)				; FETCH THE LOW BYTE
	INC	HL
	LD	D,(HL)				; AND THE HIGH BYTE
	AND	A				; PREPARE FOR A TRUE SUBTRACTION
	LD	HL,107FH			; ADDRESS OF ED_ERROR (IN EDITOR)
	SBC	HL,DE				; DOES THE ERROR STACK POINTER ADDRESS 107FH?
	JR	NZ,MRDCH8			; JUMP TO THE INCH ROUTINE FOR INKEY$#N
	POP	HL				; RESTORE ROUTINE ADDRESS
						; CONTINUE FOR INPUT #N

		; DROP THE STACK BACK
	LD	SP,(ERR_SP)
	POP	DE
	POP	DE
	LD	(ERR_SP),DE

		; PUSH A RETURN ADDRESS ON THE STACK
MRDCH4	PUSH	HL				; THE ACTUAL INPUT ROUTINE ADDRESS
	LD	DE,MRDCH5
	PUSH	DE
	JP	(HL)				; JUMP TO ACTUAL INPUT ROUTINE

MRDCH5
	JR	C,MRDCH6
	JR	Z,MRD55				; TRY AGAIN
MRDC10
	LD	(IY+ERR_NR-Y),7			; OR EOF
	RST	ROMERR
MRD55
	POP	HL
	JR	MRDCH4

		; CONSIDER THE CHARACTER
MRDCH6	CP	0DH				; END OF LINE?
	JR	Z,MRDCH7
	RST	CALBAS
	DEFW	0F85H				; ENTER IT INTO INPUT BUFFER
	POP	HL				; FETCH INPUT ROUTINE ADDRESS
	JR	MRDCH4				; ROUND AGAIN

		; TO EXIT
MRDCH7  POP	HL				; DROP INPUT ROUTINE ADDRESS
	JP	RETBAS				; EXIT

MRDCH8
	POP	HL
	LD	DE,MRDCH9			; PUSH A RETURN ADDRESS ONTO THE STACK
	PUSH	DE
	JP	(HL)				; AND "CALL" THE INPUT ROUTINE
MRDCH9
	RET	C				; RETURN UNLESS EOF
	RET	Z
	BIT	4,(IY+FLAGS3-Y)			; NO REPORT IN MOVE
	JR	Z,MRDC10
	OR	1				; JUST NC,NZ
	RET


;______________________________________________________________________

IN_N		; THE INCH ROUTINE FOR THE NET
		; LOOKS IN THE BUFFER FOR A CHARACTER
		; TAKE IT IF ONE IS FOUND
		; IF NOT AWAITS A FURTHER PACKET

	LD	HL,IN_BYT			; THE ACTUAL INPUT ROUTINE
	JP	CHANGE

;______________________________________________________________________

IN_BYT	LD	IX,(CURCHL)			; FETCH BASE ADDRESS OF CHANNEL AREA

	LD	A,(IX+NCOBL)			; FETCH THE 'OUTPUT' LENGTH
	AND	A
	JR	Z,IN_B0				; JUMP IF O.K.

	RST	SH_ERR
	DEFB	0DH				; 'READING FROM A 'WRITE; FILE'

IN_B0	LD	A,(IX+NCIBL)			; PRESENT LENGTH OF BUFFER - '0' TO '255'
	AND	A				; COULD IT BE ZERO?
	JR	Z,IN_B1				; JUMP IF IT IS
	LD	E,(IX+NCCUR)			; NUMBER OF LAST CHARACTER TAKEN - '0' TO '255'
	DEC	A
	SUB	E
	JR	C,IN_B1				; JUMP IF BUFFER EMPTY

		; NOW FETCH A CHARACTER
	LD	D,00H
	INC	E				; CONSIDER THE REQUIRED CHARACTER LOCATION
	LD	(IX+NCCUR),E			; UPDATE THE POINTER
	ADD	IX,DE
	LD	A,(IX+NCB-1)			; FETCH THE CHARACTER
	SCF					; INKEY$#N REQUIRES CARRY SET
	RET					; SUCCESSFUL SO RETURN TO - FOR INPUT - MRDCH6
						;                         - FOR INKEY$- RETBAS

		; ELSE FETCH ANOTHER BUFFER
		; BUT FIRST SEE IF INPUT HAS BEEN CLOSED
IN_B1	LD	A,(IX+NCTYPE)			; FETCH CURRENT TYPE FLAG
	AND	A				; IS IT 'DATA' OR 'CLOSE'
	JR	Z,IN_B15
	RET					; EOF RETURN NC,NZ
;
IN_B15
	LD	A,(DR+IOBORD)
	OUT	(0FEH),A			; CHANGE THE BORDER COLOUR AS SPECIFIED (BLACK DEFAULT)

	DI					; INTERRUPT OFF

		; NOW ENTER A LOOP TO FIND A SUITABLE BLOCK
IN_B2	CALL	INSCT				; WAIT FOR A SCOUT - ALLOWING FOR 'BREAK'
	JR	NC,IN_B3			; JUMP ON TIMEOUT
	CALL	GETPAK				; GET A PACKET - HEADER & DATA
						; RETURN Z IF O.K.
						; BUT NZ FOR ANY OF THE REASONS FOR FAILURE
	JR	NZ,IN_B3			; FAILED WITH SCOUT
	EI

		; THE BUFFER HAS BEEN REFILLED - OR PARTLY SO
	CALL	B_COL				; BORDER COLOUR RESTORED
	LD	(IX+NCCUR),00H			; RESET THE CHARACTER COUNTER
	LD	A,(DR+NTTYPE)			; COPY OVER THE TYPE FLAG
	LD	(IX+NCTYPE),A			; 'DATA' OR 'CLOSE'
	JR	IN_B0				; ROUND AGAIN

IN_B3
	LD	A,(IX+NCIRIS)			; ARE WE EXPECTING A BROADCAST?
	AND	A
	JR	Z,IN_B2				; YES...GET BACK AND POLL
	EI					; TIMEOUT OR OTHER FAILURE ON GETPAK
	CALL	B_COL
	AND	0				; RETURN		NC,Z
	RET

;________________________________________________________________________



OUT_N		; WRCH ROUTINE FOR THE NET

	LD	IX,(CURCHL)			; FETCH THE BASE ADDRESS OF THE CHANNEL DATA
	LD	B,A				; PASS CHARACTER TO B
	LD	A,(IX+NCIBL)			; FETCH THE 'INPUT' LENGTH
	AND	A
	LD	A,B				; RESTORE CHARACTER TO A
	JR	Z,OUT_N0			; JUMP IF O.K.

	RST	SH_ERR
	DEFB	0CH				; 'WRITING TO A 'READ' FILE'

OUT_N0	LD	E,(IX+NCOBL)			; HOW MANY CHARACTERS ARE IN THE BUFFER?
	INC	E				; ADD '1' FOR THE PRESENT CHARACTER BEING HANDLED
	JR	NZ,OUT_N1			; JUMP UNLESS THAT MAKES '256' IN THE BUFFER

		; BUFFER FULL - SO SEND THE '255' CHARACTERS PRESENT
	PUSH	AF				; SAVE THE PRESENT CHARACTER ON THE STACK
	XOR	A				; SIGNAL TYPE 'DATA'
	CALL	OUTNET				; SEND THE BUFFER
	POP	AF				; RETRIEVE THE PRESENT CHARACTER
	LD	E,01H				; RESET THE BUFFER COUNTER

		; NOW PUT THE CHARACTER IN THE BUFFER
OUT_N1	LD	(IX+NCOBL),E			; ENTER UPDATED COUNTER
	LD	D,00H				; CLEAR D
	ADD	IX,DE				; ADD TO IX
	LD	(IX+NCB-1),A			; FINALLY ENTER THE CHARACTER
	RET					; FINISHED

;______________________________________________________________________


SNDPAK		; SEND A PACKET OF E BYTES FROM '(HL)'
		; TO FORM A HEADER OR A DATA BLOCK
		; DO NOT WAIT FOR A RESPONSE IF SENDING A BROADCAST

	CALL	OUTPAK				; SEND OUT A PACKET
	LD	A,(IX+NCIRIS)			; THE PRESENT DESTINATION STATION NUMBER
	AND	A
	RET	Z				; RETURN IF SENDING A BROADCAST
	LD	HL,DR+NTRESP
	LD	(HL),00H			; CLEAR THE RESPONSE FLAG
	LD	E,01H
	CALL	INPAK				; ONE BYTE RESPONSE AWAITED
	RET	NZ				; RETURN NOW ON TIME-OUT
	LD	A,(DR+NTRESP)			; FETCH RESPONSE
	DEC	A				; THE CORRECT '1' SETS THE Z FLAG
	RET					; Z SET IF O.K; ELSE RESET


;______________________________________________________________________

OUTNET		; SEND A BUFFER OUT
	CALL	ONET0
	RET	NZ				; NOT A BROADCAST RETURN NO DELAY
	JP	BROADL

ONET0
		; 'A' HOLDS THE TYPE CODE - 'DATA' OR 'CLOSE'
	LD	(IX+NCTYPE),A			; '0' FOR 'DATA'; '1' FOR 'CLOSE'
	LD	B,(IX+NCOBL)			; NUMBER OF BYTES IN THE BUFFER
	LD	A,(DR+IOBORD)
	OUT	(0FEH),A			; CHANGE THE BORDER COLOUR AS SPECIFIED (BLACK DEFAULT)
	PUSH	IX
	POP	DE				; BASE ADDRESS TO DE
	LD	HL,NCB				; THE BUFFER OFFSET
	ADD	HL,DE				; POINT TO THE BUFFER
	XOR	A
ONET1	ADD	A,(HL)				; ADD IN EACH BYTE
	INC	HL				; STEP ON
	DJNZ	ONET1
	LD	(IX+NCDCS),A			; ENTER THE DATA CHECKSUM

		; NOW FIND THE HEADER CHECKSUM
	LD	HL,NCIRIS			; THE FIRST OF THE HEADER BYTES
	ADD	HL,DE
	PUSH	HL				; SAVE THE POINTER TO NCIRIS
	LD	B,NCDCS-NCIRIS+1		; ADD THE FIRST SEVEN BYTES OF THE HEADER
	XOR	A				; CLEAR THE ACCUMULATOR
ONET2	ADD	A,(HL)				; ADD IN EACH BYTE
	INC	HL				; STEP ON
	DJNZ	ONET2				; ROUND UNTIL FINISHED
	LD	(HL),A				; ENTER RESULT INTO 'NCHCS'
	DI					; INTERRUPT OFF NOW

		; THE HEADER HAS NOW BEEN SET UP IN THE CHANNEL DATA AREA
		; POINTER TO IT IS ON THE STACK
ONET3	CALL	OUTSCT				; SEND OUT A SCOUT  (WAITING UNTIL SUCCESSFUL)
	POP	HL
	PUSH	HL				; RETRIEVE POINTER TO 'NCIRIS'
	LD	E,NCHCS-NCIRIS+1		; THE LENGTH OF THE HEADER
	CALL	SNDPAK
	JR	NZ,ONET3			; NOT ACKNOWLEDGED - SO TRY AGAIN
						; A BROADCAST WILLL ALWAYS 'PASS'THROUGH

		; HEADER HAS NOW BEEN SENT
	PUSH	IX
	POP	HL				; BASE ADDRESS TO HL
	LD	DE,NCB				; BUFFER OFFSET
	ADD	HL,DE				; POINT TO BUFFER
	LD	E,(IX+NCOBL)			; FETCH LENGTH
	LD	A,E				; TAKE A COPY
	AND	A				; TEST IT
	JR	Z,ONET4				; JUMP IF NO DATA

		; NOW SEND THE DATA BLOCK
	LD	B,20H
	DJNZ	$				; JUST WAIT A WHILE HOWEVER
	CALL	SNDPAK
	JR	NZ,ONET3			; NOT ACKNOWLEDGED - SO TRY AGAIN
						; A BROADCAST WILL ALWAYS 'PASS'THROUGH

		; UPDATE POINTERS AND TIDY UP
ONET4	INC	(IX+NCNUMB)			; UPDATE THE BLOCK NUMBER
	JR	NZ,ONET5
	INC	(IX+NCNUMB+1)			; INCLUDING HIGH BYTE IF NECESSARY
ONET5	POP	HL				; DROP POINTER
	CALL	B_COL				; RESET THE BORDER COLOUR
	EI					; INTERRUPT ON

	LD	A,(IX+NCIRIS)			; FETCH THE 'DESTINATION' NUMBER
	AND	A				; TEST IT
	RET

BROADL		; DELAY FOR SPACING OUT BROADCASTS
	LD	DE,1500H
ONET6	DEC	DE
	LD	A,E
	OR	D
	JR	NZ,ONET6
	RET					; EXIT



;______________________________________________________________________


GETPAK		; COME HERE ONCE A SCOUT HAS BEEN FOUND
		; FIRST AWAIT THE HEADER, THEN FETCH THE DATA BLOCK

	LD	HL,DR+NTDEST			; THE HEADER IS COPIED INTO THE SHADOW SYS. VARS.
	LD	E,08H				; THERE WILL BE '8' BYTES IN ALL
	CALL	INPAK				; FETCH THE HEADER
	RET	NZ				; RETURN NOW IF 'TIME-OUT'

		; PROCEED TO ANALYSE THE HEADER
		; FIRST EXAMINE THE CHECKSUM
	LD	HL,DR+NTDEST
	XOR	A
	LD	B,07H				; NOW MATCH THE HEADER CHECKSUM
GET1	ADD	A,(HL)				; ADD EACH BYTE IN
	INC	HL
	DJNZ	GET1				; ROUND FOR EACH
	CP	(HL)				; AND TEST IT AGAINST 'NTHCS'
	RET	NZ				; RETURN IF INCORRECT  - NZ

	LD	A,(DR+NTDEST)			; IS IT A BROADCAST
	AND	A
	JR	Z,GET15

	CP	(IX+NCSELF)			; NO...IS IT MEANT FOR US
	RET	NZ

	LD	A,(DR+NTSRCE)			; IS IT FROM THE RIGHT IRIS
	CP	(IX+NCIRIS)
	RET	NZ
	JR	GET2
GET15
	LD	A,(IX+NCIRIS)			; BROADCAST...IS IS EXPECTED?
	OR	A
	RET	NZ

GET2
	LD	HL,(DR+NTNUMB)			; IS IT THE RIGHT BLOCK
	LD	E,(IX+NCNUMB)
	LD	D,(IX+NCNUMB+1)
	AND	A
	SBC	HL,DE
	JR	Z,GET3				; YES..READ IT

	DEC	HL				; WAS IT THE ONE BEFORE?
	LD	A,H
	OR	L
	RET	NZ				; NO...NO GOOD

	CALL	GET3				; YES... THE SENDER MUST HAVE MISSED
	DEC	(IX+NCNUMB)			; OUR ACK...RESPOND TO IT AGAIN
	JR	NC,GET25			; CORRECT THE BLOCK NUMBER
	DEC	(IX+NCNUMB+1)
GET25
	OR	1				; AND RETURN UNSATISFIED
	RET
GET3
	LD	A,(DR+NTDEST)			; IS A RESPONSE WANTED TO HEADER
	OR	A
	CALL	NZ,RSPOND
GET35
	LD	A,(DR+NTLEN)			; FETCH THE LENGTH OF THE INCOMING BLOCK
	AND	A
	JR	Z,GET5				; JUMP IF OF 'NULL' LENGTH
	PUSH	IX
	POP	HL				; BASE ADDRESS TO HL
	LD	DE,NCB				; BUFFER OFFSET
	ADD	HL,DE				; HL POINTS TO THE BUFFER
	PUSH	HL				; SAVE A COPY OF THIS BASE ADDRESS
	LD	E,A				; MOVE THE LENGTH TO E
	CALL	INPAK				; FETCH THE DATA BLOCK
	POP	HL				; RETREIVE THE BASE ADDRESS
	RET	NZ				; BUT RETURN NZ IF TIME-OUT

		; CHECK DATA BLOCK CHECKSUM
	LD	A,(DR+NTLEN)			; NUMBER OF BYTES
	LD	B,A				; PASS IT TO B
	LD	A,(DR+NTDCS)			; FETCH THE 'DATA CHECKSUM'
GET4	SUB	(HL)				; SUBTRACT EACH BYTE IN THE BLOCK
	INC	HL				; STEP ON
	DJNZ	GET4				; ROUND UNTIL FINISHED
	RET	NZ				; RETURN IF CHECKSUM IS WRONG

		; NOW ACKNOWLEDGE THE BLOCK IF NEEDED
	LD	A,(DR+NTDEST)			; FETCH 'DESTINTATION STATION' NUMBER
	AND	A				; TEST IT
	CALL	NZ,RSPOND			; ACKNOWLEDGE THE BLOCK UNLESS IT WAS A BROADCAST

		; UPDATE AS NEEDED
GET5	LD	A,(DR+NTLEN)
	LD	(IX+NCIBL),A			; UPDATE THE INPUT LENGTH

	INC	(IX+NCNUMB)			; UPDATE THE BLOCK NUMBER
	JR	NZ,GET6
	INC	(IX+NCNUMB+1)			; INCLUDING HIGH BYTE IF NECESSARY

						; EXIT Z
GET6	CP	A
	RET


;______________________________________________________________________



ACT_ON		; OPEN A CHANNEL FOR THE NET

	CALL	NOPEN
	JP	STR_OF				; ENTER CHANNEL DATA AND THEN THE STREAM DATA


;______________________________________________________________________



NTEMP		; OPEN A NET CHANNEL 'MARKED TEMPORARY'
	CALL	NOPEN
	LD	IX,(CURCHL)			; BASE ADDRESS
	SET	7,(IX+NCCODE)			; MARK IT
	RET

;______________________________________________________________________


		; ENTER THE CHANNEL DATA AS FOLLOWS
NOPEN	LD	HL,(PROG)			; THE DATA GOES BEFORE THE BASIC PROGRAM
	DEC	HL
	LD	BC,N_LEN			; NUMBER OF BYTES IN A NET AREA
	PUSH    BC
	RST	CALBAS
	DEFW	1655H				; INSERT CHANNEL DATA FOR A NET STREAM
	INC	HL
	POP	BC
	CALL	RELNAM				; RELOCATE FILENAMES FOR MOVE "N" TO "M"
	LD	(CURCHL),HL			; MAKE THE NEW CHANNEL THE 'CURRENT CHANNEL'
	EX	DE,HL
	LD	HL,NETINI			; THE INITIALIZATION DATA BASE ADDRESS
	LD	BC,000BH			; THERE ARE '11' FIXED NUMBERS
	LDIR					; COPY THEM FROM THE TABLE
	LD	A,(DR+D_STR1)			; ENTER THE 'IRIS' STATION NUMBER
	LD	(DE),A
	INC	DE				; STEP ON
	LD	A,(DR+NTSTAT)			; ENTER OUT PRESENT STATION NUMBER
	LD	(DE),A
	INC	DE				; STEP ON
	XOR	A

	LD	(DE),A				; A FIRST ZERO
	LD	H,D
	LD	L,E
	INC	DE
	LD	BC,NCEND-NCNUMB-1
	LDIR					; COPY ZERO THROUGHOUT BUFFER
	LD	DE,(CURCHL)			; RETURN WITH BASE ADDRESS IN DE & (CURCHL)
	RET


NETINI		; INITIALIZATION DATA FOR A NET CHANNEL
	DEFW	0008H
	DEFW	0008H
	DEFB	'N'
	DEFW	OUT_N
	DEFW	IN_N
	DEFW	N_LEN


;______________________________________________________________________



NTCLSE		; EMPTY THE NET BUFFER IF ANY UNSENT OUTPUT PRESENT
	LD	IX,(CURCHL)			; FETCH BASE POINTER
	LD	A,(IX+NCOBL)			; FETCH LENGTH
	AND	A
	RET	Z				; RETURN IF NO OUTPUT TO BE SENT
	LD	A,01H				; BUT WHEN THERE IS - SET 'CLOSE'
	JP	OUTNET				; SEND THE BUFFER


;______________________________________________________________________



NETIDL		; WAIT FOR THE NET TO BECOME FREE   3 - 5 MS APPROX.
		; ALLOWS FOR BREAK TO BE READ
		; TAKING THE CURRENT VALUE OF 'R' RANDOMIZES THE DELAY

	LD	A,R				; FETCH THE 'R' REGISTER
	OR	0C0H				; SET BITS 6 & 7
	LD	B,A
	CALL	IDLE_1				; WAIT A 'RANDOMIZED' DELAY
	JR	C,NETIDL			; REPEAT IT ALL IF 'BUSY'
	RET					; EXIT WHEN 'FREE'

IDLE_1		; WAIT 'B' PASSES
		; RETURN CARRY SET IF 'BUSY'
		; RETURN CARRY RESET IF 'FREE'
	LD	A,7FH
	IN	A,(KB_PT)			; READ THE BREAK KEY
	RRCA
	JR	NC,NET_BK			; JUMP IF BEING PRESSED
IDLE_2	PUSH	BC
	POP	BC				; WASTE TIME    
	IN	A,(SERIAL)
	RRCA
	RET	C				; RETURN WHEN 'BUSY'
	DJNZ	IDLE_2				; DECREASE THE COUNTER
	RET					; RETURN ONCE NET FOUND 'FREE FOR USE'


 
;______________________________________________________________________



;
; INSCT WAITS AT MOST 12.6MS FOR A SCOUT.
; UNLESS WE ARE WAITING FOR A BROADCAST IN WHICH CASE
; WE WAIT TILL WE RECEIVE A SCOUT
; THE CARRY FLAG IS SET IF SUCCESSFUL
;
INSCT
	LD	HL,450				; TIMEOUT... MUST BE EVEN
ISC0
	LD	B,80H
	CALL	IDLE_1				; WAIT FOR A GAP OF 2MS OR RETURN IF BUSY
	JR	NC,ISC1
	DEC	HL
	DEC	HL
	LD	A,H
	OR	L
	JR	NZ,ISC0
	LD	A,(IX+NCIRIS)			; ARE WE EXPECTING A BROADCAST
	AND	A
	JR	Z,ISC0				; YES...KEEP LOOKING
	RET
ISC1
	IN	A,(SERIAL)
	RRCA
	JR	C,ISC2

	LD	A,7FH
	IN	A,(KB_PT)
	RRCA
	JR	NC,NET_BK

	DEC	HL
	LD	A,H
	OR	L
	JR	NZ,ISC1
	LD	A,(IX+NCIRIS)			; BROADCAST EXPECTED?
	AND	A
	JR	Z,ISC1				; DON'T GO LOOKING FOR GAPS AGAIN
	RET

NET_BK	EI					; INTERRUPT MUST BE ON
	CALL	B_COL				; GIVE THE BORDER ITS CORRECT COLOUR
	LD	(IY+ERR_NR-Y),14H		; 'BREAK INTO PROGRAM'
	RST	ROMERR				; EXIT     

		; CONTINUE SHOULD A SCOUT BE FOUND
ISC2	LD	L,09H				; WAIT FOR A PERIOD SO AS TO PASS THE SCOUT
ISC3	DEC	L
	SCF
	RET	Z				; EXIT AFTER LOOPING
	LD	B,0EH
	DJNZ	$				; WASTE TIME
	JR	ISC3




;______________________________________________________________________


OUTSCT		; ATTEMPT TO SEND OUT A SCOUT
		; IF UNABLE TO DO IT IMMEDIATELY JUST TRY
		; OVER AGAIN
		; BREAK IS READ IN NETIDL

	CALL	NETIDL				; WAIT FOR THE NET TO BE FREE
						; READ BREAK KEY AS NECESSARY

	LD	C,SERIAL			; FETCH THE PORT ADDRESS
	LD	HL,0009H			; H HOLDS 00H     - TO ACTIVATE THE NET
						; L HOLDS 09H     - FOR 9 BITS
	LD	A,(DR+NTSTAT)			; FETCH OWN STATION NUMBER
	LD	E,A				; PASS IT TO E
	IN	A,(SERIAL)
	RRCA
	JR	C,OUTSCT			; TRY AGAIN IF NET HAS GONE ACTIVE


		; NOW ENTER A LOOP FOR THE BITS OF THE STATION NUMBER
OSC1	OUT	(C),H
	LD	D,H				; TAKE A COPY OF THE BIT SENT
	LD	H,00H				; CLEAR THE H REGISTER
	RLC	E				; THE STATION NUMBER GOES TO THE CARRY
						; MS BIT FIRST
	RL	H				; PICK UP THE CARRY ON EACH PASS
	LD	B,08H
	DJNZ	$				; WASTE 106 T-STATES
	IN	A,(SERIAL)			; READ BACK THE VALUE ON THE NET
	AND	01H				; KEEP ONLY BIT 0
	CP	D				; COMPARE THE BYTES
	JR	Z,OUTSCT			; ROUND AGAIN IF BIT 0 NOT CORRECT
						; EITHER SOMEONE ELSE IS TRYING TO GET ON THE NET
						; (WITH A LOWER STATION NUMBER)
						; OR THERE IS A HARDWARE FAILURE CONCERNING THE
						; NET
	DEC	L				; DECREASE THE COUNTER
	JR	NZ,OSC1				; ROUND AGAIN?
	LD	A,01H
	OUT	(SERIAL),A			; ENSURE THE NET IS INACTIVE
	LD	B,0EH
	DJNZ	$				; WASTE TIME
	RET					; THE NET IS OURS - SO SEND THE HEADER NEXT



;______________________________________________________________________




INPAK		; FETCH A PACKET FROM THE NET
		; IT WILL BE A 'HEADER', OR A 'DATA BLOCK' OR A 'RESPONSE'
		; IN ALL CASES 'E' BYTES LONG
		; AND BYTES ARE TO GO TO '(HL)' AND ONWARDS AS REQUIRED

	LD	B,0FFH				; SET A TIME-OUT COUNTER
IN1	IN	A,(SERIAL)
	RRA					; BIT 0 GOES TO THE CARRY
	JR	C,IN2				; JUMP WHEN THE NET BECOMES ACTIVE
						; THE LEADER HAS BEEN FOUND
	DJNZ	IN1				; ROUND IF NOT
	INC	B				; MAKES NZ
	RET					; RETURN ON TIME-OUT   - NZ

IN2	LD	B,E				; FETCH THE BYTE COUNT

		; NOW ENTER A LOOP TO GET THE BYTES
IN3	LD	E,80H				; SET A 'MARKER' BIT		;7
	LD	A,0DFH.AND.CTS.AND.SELD		; RESET BIT 5			;7
	OUT	(STATUS),A			; USE 'WAIT' TO SYNC
						; TO 'START' BIT		;11

		;	STEP PAST THE REST OF THE START BIT
	NOP									;4
	NOP									;4
	INC IX									;10
	DEC IX									;10   
	INC IX									;10
	DEC IX									;10
		; NOW ENTER A LOOP TO GET 8 BITS
IN4	LD	A,00H				; WASTE TIME			;7
	IN	A,(SERIAL)			; READ IN A BYTE		;11
	RRA					; BIT - TO THE CARRY		;4
	RR	E				; CARRY'S ARE COLLECTED IN E	;8
	JP	NC,IN4				; ROUND FOR 8 BITS		;10

		; SAVE THE BYTE
	LD	(HL),E								;7
	INC	HL				; STEP ON THE POINTER		;4
	DJNZ	IN3				; ROUND AGAIN?			;13

		; FINISH OFF
	CP	A				; MAKES Z
	RET					; RETURN SUCCESSFUL  - Z

; NOTES:
;	BIT COLLECTING LOOP IS 40 T-STATES
;	AND THE BITS SHOULD BE COLLECTED ABOUT MID-PULSE



;______________________________________________________________________


RSPOND		; SEND A RESPONSE

	LD	A,01H				; THE RESPONSE IS A '1'
	LD	HL,DR+NTRESP			; THE ADDRESS OF THE 'STORE'
	LD	(HL),A				; ENTER THE RESPONSE
	LD	E,A				; THE LENGTH OF THE RESPONSE IS ALSO '1'
						; PROCESS TO SEND THE RESPONSE



OUTPAK		; SEND A PACKET OF 'E' BYTES STARTING AT '(HL)'

	XOR	A
	OUT	(SERIAL),A			; FIRST ACTIVATE THE NET TO FORM A LEADER PULSE
	LD	B,04H
	DJNZ	$				; WASTE TIME			;54

		; NOW ENTER THE LOOP THAT SENDS THE BYTES
OUT1	LD	A,(HL)				; FETCH THE BYTES		;7
	CPL					; INVERT ALL THE BITS		;4
	SCF					; MAKE A 'START' BIT'		;4
	RLA					; MOVE IN 'START BIT'		;4
						; BIT 7 GOES TO CARRY
	LD	B,0AH				; TEN BITS ARE TO BE SENT	;7

		; AND NOW THE LOOP FOR THE BITS
OUT2	OUT	(SERIAL),A			; SEND BIT 0			;11
	RRA					; ROTATE ALL THE BITS		;4
	AND	A				; FORMS THE 'STOP' BIT		;4
	DEC	B				; DECREASE THE COUNTER		;4
	LD	D,0				; WASTE TIME			;7
	JP	NZ,OUT2				; ROUND AGAIN?			;10

		; FIND THE NEXT BYTE
	INC	HL				; STEP POINTER ON		;4
	DEC	E				; DECREASE THE COUNTER		;4
	PUSH	HL				; WASTE TIME			;11
	POP	HL				; WASTE TIME			;10
	JP	NZ,OUT1				; ROUND AGAIN?			;10

		; END THE FINAL STOP BIT
	LD	A,01H				; SET BIT 0			;7
	OUT	(SERIAL),A			; DEACTIVATE THE NET		;11

	RET					; ALL DONE

; NOTES:
;	THE LEADER   IS 91 T-STATES
;	THE BIT LOOP IS 40 T-STATES
;	THE STOP BIT IS 98 T-STATES
