;*********************************************
;*                                           *
;*    VHSOFT.S                               *
;*    23/3/83                                *
;*                                           *
;*********************************************
;
; THIS MODULE WILL CONTAIN HIGHER LEVEL SOFTWARE FOR THE
; MICRODRIVE.
; THE PROCEDURES WITHIN THIS MODULE RELATE TO KEYWORDS
; ON THE SPECTRUM.
;
;	GLOBAL		OPENN,OPENF,FORMAT,CATN
;	GLOBAL		ERA,MANY?
;
;	EXTERNAL	CREATE,DELIX,NERROR,FREE?,CPSTR			;HISOFT
;	EXTERNAL	DECSEC,READN,RDNXT,WTHDR,LIST?
;	EXTERNAL	MWRCH,MRDCH,DECSEC,SPACE?
;	EXTERNAL	ECH,ECD,WRFREE,MARK,READNC
;	EXTERNAL	RDHBLK,RDBLK,WRHBLK,WRBLK		;DRIVES
;	EXTERNAL	DRVSEL,BREAK?,DRV0
;	EXTERNAL	HEX,OP,DIS10,OPHEX,DISMAP		;BLOCKS
;	EXTERNAL	DELBC					;DUMMY
;
;
;*******************************************
;*   OPENN,OPENF                           *
;*******************************************
;
; THE OPEN SUBROUTINE IS USED TO SEARCH A DRIVE FOR A FILE
; MAPPING THE FREE SECTORS IN CASE THE FILE DOESN'T ALREADY
; EXIST AND READING THE FIRST RECORD IF THE FILE DOES EXIST
;
; OPENN IS CALLED BY THE SYNTAX CHECKER WHEN THE COMMAND
; OPEN #N,FILENAME IS FOUND.
; THE STREAM AND FILENAME ARE STORED IN SYSTEM VARIABLES BY
; THE SYNTAX CHECKER
;
; OPENF OPENS A MICRODRIVE FILE IN THE SAME WAY WITHOUT
; USING A STREAM THIS IS FOR USE BY THE MOVE, SAVE AND
; LOAD COMMANDS
;
OPENN
	LD	A,(DR+S_STR1)
	ADD	A,A				; GET CHANNEL ADDRESS
	LD	HL,STRMS+6
	LD	E,A
	LD	D,0
	ADD	HL,DE
	PUSH	HL
;
	CALL	OPENF				; THEN OPEN FILE

	BIT	WRFLG,(IX+CHFLAG)		; IS IT OPEN FOR WRITE?
	JR	Z,OPEN2
	IN	A,(PORTC)			; YES..CHECK WRITE PROTECT
	AND	PROTECT
	JR	NZ,OPEN2
	RST	SH_ERR
	DEFB	0EH
OPEN2
	RES	7,(IX+CHTYPE)			; NOT A TEMPORARY BUFFER ANYMORE
	XOR	A
	CALL	DRVSEL
;
	BIT	WRFLG,(IX+CHFLAG)
	JR	NZ,OPEN1
	BIT	2,(IX+RECFLG)			; IS IT AN SLVM FILE
	JR	Z,OPEN1
	RST	SH_ERR				; YES...WRONG FILE TYPE
	DEFB	16H
OPEN1
;
	EX	DE,HL				; *
	POP     HL				; AND CONNECT NEW CHANNEL NUMBER
	LD	(HL),E
	INC	HL
	LD	(HL),D				; INTO STREAMS
;
	RET
;
;
;
OPENF
	CALL	CREATE				; CREATE A CHANNEL AND INITIALIZE
	PUSH	HL				; SAVE CHANNEL NUMBER FOR RETURN
;
	LD	A,(IX+CHDRIV)			; START MOTOR
	CALL	DRVSEL
;
	LD	BC,HD_MAX			; FOR ALL SECTORS ON THE DRIVE MAP
	LD	(SECTOR),BC			; THE FREE SECTORS AND LOOK FOR THE
						; THE SPECIFIED FILE
;
OPF1
	CALL	RDNXT				; READ THE NEXT DATA BLOCK
;
	JR	C,OPF2				; NEXT SECTOR IF NO GOOD
	JR	Z,OPF3				; MARK MAP IF EMPTY
;
	RES	WRFLG,(IX+CHFLAG)		; FILE FOUND...READ FILE
;
	LD	A,(IX+RECNUM)			; CHECK NUMBER
	OR	A				; ZEROETH RECORD?
	JR	NZ,OPF4
	PUSH	IX				; YES...CHECK DATA AND RETURN
	POP	HL
	LD	DE,CHDATA
	ADD	HL,DE
	CALL	ECD
	JR	Z,OPF5
OPF4
	CALL	READNC				; NO...THEN FIND IT
	JR	OPF5
OPF3
	CALL	MARK				; MARK MAP FREE IF EMPTY RECORD
OPF2
	CALL	DECSEC				; NEXT SECTOR
	JR	NZ,OPF1
;
	RES	1,(IX+RECFLG)			; CLEAR EOF FLAG FOR WRITE FILE
	RES	2,(IX+RECFLG)			; NOT SLVM FILE AS DEFAULT
OPF5
	POP	HL
	RET
;
;
;***********************************************
;*    FORMAT                                   *
;***********************************************
;
;
; THIS PROCEDURE IS CALLED IN RESPONSE TO THE COMMAND
; FORMAT FILENAME
; THE FILENAME IS SPECIFIED IN SYSTEM VARIABLES
; THE PROCEDURE HAS THREE PHASES:-
;        1) WRITE THE TAPE   .
;        2) READ THE TAPE MAPING ERRONEOUS DATA
;        3) RE-WRITE THE GOOD BLOCKS TO ENABLE THEIR USE
;
FORMAT
	CALL	CREATE				; CREATE ALL THE NECESSARY DATA
;
	LD	A,(IX+CHDRIV)			; SELECT THE DRIVE
	CALL	DRV0
	LD	BC,13000			; WAIT FOR MOTOR TO START UP
	CALL	DELBC
	DI
;
	IN	A,(PORTC)
	AND	PROTECT				;IS THE DRIVE WRITE PROTECTED?
	JR	NZ,__WR11			; *
	RST	SH_ERR
	DEFB	0EH				; DRIVE WRITE PROTECTED
__WR11						; *
	LD	A,ERASE.AND.CTS.AND.SELD	; ERASE ON
	OUT	(PORTC),A
;
	LD	BC,HD_MAX			; FOR EVERY HEADER STARTING FROM MAX
	LD	(SECTOR),BC
;
	PUSH	IX
	POP	HL				; COPY NAME INTO HEADER
	LD	DE,HDNAME
	ADD	HL,DE
;
	EX	DE,HL				; *
	LD	HL,CHNAME-HDNAME
	ADD	HL,DE
	LD	BC,10
	LDIR
;
	XOR	A				; MAKE THE FIRST CHARACTER IN THE NAME
	LD	(IX+RECNAM),A			; A NULL TO PREVENT LISTING BY CAT
	SET	0,(IX+HDFLAG)			; MARK THE HEADER AS A HEADER
	RES	0,(IX+RECFLG)			; MARK THE HEADER CORRESPONDINGLY
	SET	1,(IX+RECFLG)			; MARK THE DATA EOF IE FULL
;
	PUSH	IX
	POP	HL
	LD	DE,CHDATA
	ADD	HL,DE
;
	LD	B,0				; FILL THE DATA WITH THE BYTE MOST
	LD	A,0FCH				; PRONE TO ERROR IN ORDER THAT BAD
						; BLOCKS ARE MOST LIKELY TO BE DETECTED
FORM10  
	LD	(HL),A
	INC	HL
	DJNZ	FORM10
FORM11
	LD	(HL),A
	INC	HL
	DJNZ	FORM11
;
	PUSH	IX				; ERROR ENCODE THE DESCRIPTOR
	POP	DE
	LD	HL,CHDES+PLEN
	ADD	HL,DE
;
	CALL	ECH
;
	LD	DE,CHDATA-CHDES-PLEN
	ADD	HL,DE
;
	CALL	ECD				; AND THE DATA
;
;*******************************************************
;* WRITE TO ALL OF TAPE                                *
;*******************************************************
;
FORM1
	CALL	DECSEC				; NEXT SECTOR
	JR	Z,FORM4
;
	LD	(IX+HDNUMB),C			; UPDATE HEADER NUMBER
;
	PUSH	IX
	POP	HL
	LD	DE,CHHDR+PLEN
	ADD	HL,DE
;
	CALL	ECH				; AND ENCODE
;
	LD	DE,-PLEN
	ADD	HL,DE
;
	CALL	WRHBLK				; WRITE THE HEADER BLOCK
;
	LD	BC,GAPT1			; WAIT FOR THE REMAINDER OF
	CALL	DELBC
;
	PUSH	IX
	POP	HL
	LD	DE,CHDES
	ADD	HL,DE
;
	CALL	WRBLK				; WRITE THE DATA BLOCK
;
	LD	BC,GAPT2			; WAIT FOR THE REMAINDER OF
	CALL	DELBC
	CALL	BREAK?
	JR	FORM1				; NEXT SECTOR
;
FORM4
	LD	A,CTS.AND.SELD			; ERASE OFF
	OUT	(PORTC),A
;
;*****************************************************
;* NOW READ BACK ALL BLOCKS AND MARK MAP             *
;*****************************************************
;
	LD	A,(IX+CHDRIV)			; RESELECT THE DRIVE TO MAKE SURE
	CALL	DRVSEL				; THERE WAS SOMETHING IN IT
;
	LD	BC,HD_MAX			; FOR ALL HEADERS CHECK WHICH DATA BLOCKS
	LD	(SECTOR),BC			; CAN BE READ FIRST TIME AND MARK THEM FREE
;
FORM5
	CALL	WTHDR				; READ HEADER
;
	CALL	FREE?				; IS IT ALREADY MARKED FREEIGNORE THE DATA
	JR	Z,FORM6				; AND WAIT FOR THE NEXT SECTOR
;
	PUSH	IX				; READ DATA
	POP	HL
	LD	DE,CHDES+PLEN
	ADD	HL,DE
;
	CALL	RDBLK
	CALL	ECH				; IS IT OK?
	JR	NZ,FORM6
;
	LD	DE,CHDATA-CHDES-PLEN
	ADD	HL,DE
	CALL	ECD
	JR	NZ,FORM6
;
	CALL	MARK				; MARK SECTOR FREE
;
FORM6
	CALL	DECSEC				; LAST BLOCK?
	JR	NZ,FORM5
;
	CALL	BUILD				; BUILD AN EMPTY DESCRIPTOR
;
FORM7
	CALL	SPACE?				; ARE THERE ANY FREE BLOCKS TO BE
	JR	NZ,FORM8			; MARKED
;
	XOR	A
	CALL	DRVSEL				; DRIVE OFF
;
	CALL	DELIX				; DELETE CHANNEL INFO
;
	RET
;
FORM8
	CALL	WRFREE				; WRITE THE DATA BLOCK INTO A
	JR	FORM7				; SECTOR MARKED FREE
;
;*********************************************
;*    CAT                                    *
;*********************************************

; THIS COMMAND HAS TWO FORMS CAT #N,STRING AND CAT STRING
; CAT IMPOSES A LIMIT OF 50 FILES PER DRIVE BECAUSE ONLY
; 51.2 FILENAMES CAN BE STORED IN A BUFFER
; THE NUMBER OF ENTRIES IN THE LIST IS STORED IN CHREC WHICH
; IS INITIALIZED BY CREATE
;
CATN
	LD	A,(DR+S_STR1)			; FIND THE STREAM NUMBER
	OLDCAL	SELECT				; YES..SELECT THIS STREAM
;
	CALL	CREATE				; HERE WITH THE DRIVE NAME
;
	LD	A,(IX+CHDRIV)			; START MOTOR
	CALL	DRVSEL
;
	LD	BC,HD_MAX
	LD	(SECTOR),BC			; FOR ALL HEADER READ THE DESCRIPTORS
						; CHECK FOR NAME IN DIRECTORY AND ENTER
						; IF NECESSARY
CATF1
	CALL	WTHDR				; WAIT FOR HEADER
;
	CALL	RDDES				; READ DESCRIPTOR
	JR	NZ,CATF1			; IGNORE IF NO GOOD
;
	LD	A,(IX+RECFLG)			; IS IT FREE IE NOT FULL OR EOF
	OR	(IX+RECLEN+1)
	AND	2
	JR	NZ,CATF2
;
	CALL	MARK				; YES...MARK MAP..NEXT HEADER
	JR	CATF5
;
CATF2
	LD	A,(IX+RECNAM)
	OR	A				; LOOK AT THE FIRST CHARACTER IN NAME
	JR	Z,CATF5				; IGNORE IF NULL
;
	PUSH	IX				; ADD TO LIST
	POP	HL
	LD	DE,CHDATA
	ADD	HL,DE
	LD	DE,10
	LD	B,0
	LD	C,(IX+CHREC)
;
CATF3
	LD	A,C				; END OF LIST?
	OR	A
	JR	Z,CATF4				; YES...PUT THE NAME ON THE END
;
	PUSH	HL				; COMPARE WITH THE CURRENT NAME
	PUSH	IX
	PUSH	BC
	LD	B,10
CATF12
	LD	A,(HL)
	CP	(IX+RECNAM)
	JR	NZ,CATF13
	INC	HL
	INC	IX
	DJNZ	CATF12
CATF13
	POP	BC
	POP	IX
	POP	HL
	JR	Z,CATF5				; NEXT SECTOR IF THE SAME
	JR	NC,CATF14
;
	ADD	HL,DE				; GREATER...NEXT ENTRY
	DEC	C
	JR	CATF3
;
CATF14
	PUSH	HL				; LESS...INSERT
	PUSH	DE
	PUSH	BC
	PUSH	HL
	SLA	C				; BC := 10*BC LENGTH OF REMAINING LIST
	LD	H,B
	LD	L,C
	ADD	HL,BC
	ADD	HL,BC
	ADD	HL,BC
	ADD	HL,BC
	LD	B,H
	LD	C,L
	POP	HL				; HL POINTS TO TOP BYTE IN BLOCK
	DEC	HL				; DE POINTS TO 10 BYTES BEYOND
	ADD	HL,BC
	EX	DE,HL				; *
	ADD	HL,DE
	EX	DE,HL				; *
	LDDR					; MOVE UP THE REMAINING DATA
	POP	BC
	POP	DE
	POP	HL
;
CATF4
	PUSH	IX				; ENTER THE NAME IN THE DIRECTORY
	LD	B,10
CATF6
	LD	A,(IX+RECNAM)
	LD	(HL),A
	INC	IX
	INC	HL
	DJNZ	CATF6
	POP	IX
;
	LD	A,(IX+CHREC)			; IS THE DIRECTORY FULL?
	INC	A
	LD	(IX+CHREC),A
	CP	50
	JR	Z,CATF15
CATF5
	CALL	DECSEC				; NEXT SECTOR
	JP	NZ,CATF1
;
CATF15
	PUSH	IX              
	XOR	A				; LAST SECTOR DESELECT DRIVES
	CALL	DRVSEL
;
	PUSH	IX
	POP	HL
	LD	DE,HDNAME			; PRINT TAPE NAME
	ADD	HL,DE
	CALL	NMOUT
	LD	A,0DH
	CALL	CHOUT
;
	PUSH	IX
	POP	HL
	LD	DE,CHDATA
	ADD	HL,DE
	LD	B,(IX+CHREC)
	LD	A,B
	OR	A
	JR	Z,CATF8
CATF7
	CALL	NMOUT				; PRINT FILENAME AND CR
	DJNZ	CATF7
;
CATF8
	CALL	MANY?				; HOW MANY FREE SECTORS?
	LD	A,E				; DISPLAY CAPACITY
	SRL	A				; BLOCKS -> K'S
	RST	CALBAS				; STACK  A
	DEFW	2D28H
	LD	A,0DH
	CALL	CHOUT
	RST	CALBAS				; OUTPUT FP
	DEFW	2DE3H
	LD	A,0DH
	CALL	CHOUT
	POP	IX
	CALL	DELIX				; DELETE THE CHANNEL
;
	RET					; AND RETURN
;
; MANY? COUNTS THE NUMBER OF FREE SECTORS IN THE CURRENT CHANNEL
; AND RETURNS THE NUMBER IN E
;'
MANY?
	LD	L,(IX+CHMAP)
	LD	H,(IX+CHMAP+1)
	LD	E,0				; WORK OUT THE FREE SPACE
	LD	C,MAPLN
CATF9
	LD	A,(HL)
	INC	HL
	LD	B,8
CATF10
	RRA					; COUNT THE FREE BITS
	JR	C,CATF11
	INC	E
CATF11
	DJNZ	CATF10
	DEC	C				; NEXT BYTE
	JR	NZ,CATF9
	RET


; NMOUT   DISPLAYS THE 10 BYTES AT HL FOLLOWED BY A CR
; HL IS LEFT INCREMENTED
;
NMOUT
	PUSH	BC
	LD	B,10
NM1
	LD	A,(HL)
	CALL	CHOUT
	INC	HL
	DJNZ	NM1
	LD	A,0DH
	CALL	CHOUT
	PUSH	HL
	OLDCAL	0D4DH				; RESET TEMPORARY COLOURS
	POP	HL
	POP	BC
	RET
;
CHOUT
	PUSH	IX
	OLDCAL	16
	POP	IX
    	RET
;
;
;******************************************
;*     ERASE                              *
;******************************************
;
;
; THIS IS CALLED WHEN THE COMMAND ERASE FILENAME IS ENCOUNTERED
; ERASE WORKS BY PASSING THROUGH THE TAPE READING ALL DESCRIPTORS
; AND CREATING A MAP OF ALL BLOCKS TO BE DELETED
;
ERA
	CALL	CREATE				; MAKE CHANNEL INFO
;
	LD	A,(IX+CHDRIV)
	CALL	DRVSEL
;
	IN	A,(PORTC)
	AND	PROTECT				; IS THE DRIVE WRITE PROTECTED?
	JR	NZ,WR12
	RST	SH_ERR
	DEFB	0EH				; DRIVE WRITE PROTECTED
WR12
	PUSH	IX				; INITIALIZE LIST TO ALL ZEROS
	POP	HL
	LD	DE,CHDATA
	ADD	HL,DE
;
	PUSH	HL
	POP	DE
	INC	DE
	LD	BC,MAPLN-1
	XOR	A
	LD	(HL),A
	LDIR
;
;**********************************************************
;* MAKE A MAP OF THE TAPE IN THE USUAL WAY AND MAKE       *
;* ANOTHER MAP (LIST) IN THE DATA BUFFER INDICATING       *
;* THE POSITIONS OF RECORDS TO BE ERASED                  *
;**********************************************************
;
;
	LD	A,0FFH
	LD	(IX+CHREC),A
	LD	BC,TRYS*HD_MAX
	LD	(SECTOR),BC
;
ERA1
	CALL	DECSEC				; HAVE WE WAITED LONG ENOUGH FOR EOF
	JR	Z,ERA3_4			; YES...ERASE WHAT WE HAVE FOUND

	CALL	WTHDR				; WAIT FOR A HEADER
;
	CALL	RDDES				; READ DESCRIPTOR
;
	JR	NZ,ERA3				; DATA BAD...IGNORE
;
	LD	A,(IX+RECFLG)			; IS IT FREE IE NOT FULL OR EOF
	OR	(IX+RECLEN+1)
	AND	2
	JR	NZ,ERA2
;
	CALL	MARK				; YES...MARK MAP
	JR	ERA3
;
ERA2
	PUSH	IX				; NO...IS IT THE RIGHT FILE?
	POP	HL
	LD	DE,RECNAM
	ADD	HL,DE
	LD	BC,10
;
	CALL	CPSTR
	JR	NZ,ERA3
;
	CALL	LIST?				; YES...ADD SECTOR TO LIST?
;
	LD	A,B
	OR	(HL)
	LD	(HL),A
;
	BIT	1,(IX+RECFLG)			; IS IT THE LAST RECORD
	JR	Z,ERA3
	LD	A,(IX+RECNUM)			; YES...SAVE RECORD COUNT
	INC	A
	LD	(IX+CHREC),A
ERA3
	PUSH	IX				; HAVE WE FOUND THE LOT?
	POP	HL
	LD	DE,CHDATA
	ADD	HL,DE
	LD	E,0
	LD	C,MAPLN
ERA3_1
	LD	A,(HL)
	INC	HL
	LD	B,8
ERA3_2
	RRA
	JR	NC,ERA3_3
	INC	E				; COUNT THEM
ERA3_3
	DJNZ	ERA3_2
	DEC	C
	JR	NZ,ERA3_1
;
	LD	A,(IX+CHREC)
	CP	E
	JR	NZ,ERA1
ERA3_4
	CALL	BUILD				; BUILD AN EMPTY DESCRIPTOR
;
ERA4
	CALL	WTHDR				; WAIT FOR THE HEADER
;
	CALL	LIST?				; MARKED FOR ERASURE?
	JR	Z,ERA6
	PUSH	HL
	PUSH	BC
;
	LD	A,ERASE.AND.CTS.AND.SELD
	OUT	(PORTC),A			; ERASE EARLY BLOCKS
;
	LD	BC,GAPT3			; WAIT FOR THE REMAINDER OF GAP 1
	CALL	DELBC
;
	PUSH	IX
	POP	HL
	LD	DE,CHDES
	ADD	HL,DE
;
	CALL	WRBLK				; WRITE AN EMPTY BLOCK
;
	LD	A,CTS.AND.SELD			; TURN OFF THE ERASE
	OUT	(PORTC),A
;
	CALL	MARK				; MARK THE CHANGE ON THE MAP
;
	POP	BC				; AND ON THE LIST
	POP	HL
	LD	A,B
	CPL
	AND	(HL)
	LD	(HL),A
;
ERA6
	PUSH	IX				; ANY LEFT?
	POP	HL
	LD	DE,CHDATA
	ADD	HL,DE
	LD	B,MAPLN
ERA7
	LD	A,(HL)
	OR	A
	JR	NZ,ERA4				; YES...CONTINUE
	INC	HL
	DJNZ	ERA7
;
	XOR	A				; NO...DESELECT DRIVE
	CALL	DRVSEL
;
	CALL	DELIX				; DELETE CHANNEL
;
	RET					; AND RETURN
;
; BUILD MAKES THE DESCRIPTOR IN THE CURRENT BUFFER REFER
; TO AN EMPTY RECORD
;
BUILD
	XOR	A
	LD	(IX+RECFLG),A
	LD	(IX+RECLEN),A
	LD	(IX+RECLEN+1),A
;
	PUSH	IX
	POP	HL
	LD	DE,CHDES+PLEN
	ADD	HL,DE
	CALL	ECH
	RET
;
;
; RDDES READS A DESCRIPTOR BLOCK INTO THE BUFFER DEFINED BY IX
; Z FLAG SET IF DESCRIPTOR OK
;
RDDES
	PUSH	IX
	POP	HL
	LD	DE,CHDES+PLEN
	ADD	HL,DE
;
	CALL	RDHBLK
	CALL	ECH
	RET	NZ
	BIT	0,(IX+RECFLG)			; IS IT REALLY A DESCRIPTOR
	RET
;
	END
