;
;********************************************************************
;
;			SH_SAVE2.S
;
;********************************************************************



;	GLOBAL LD_CON
;	GLOBAL GET_BL
;	GLOBAL  AUTO_R

;	EXTERNAL	H_SORT,T_PR1,GET_HD
;	EXTERNAL SLVMEX
;	EXTERNAL IN_BYP, IN_BYT
;	EXTERNAL	GETMBL




LD_CON		; LOAD A PROGRAM OR ARRAY
	LD	DE,(DR+HD_0B)			; FETCH THE 'NEW' LENGTH
	LD	HL,(DR+SC_0D)			; AND THE 'OLD' START

		; CONSIDER HOW MUCH EXTRA RAM WILL BE REQUIRED
	PUSH	HL
	LD	A,H
	OR	L
	JR	NZ,LD_C1
	INC	DE				; ONE FOR THE 'DESCRIPTOR' AND TWO FOR THE 'LENGTH'
	INC	DE
	INC	DE
	EX	DE,HL
	JR	LD_C2

LD_C1	LD	HL,(DR+SC_0B)
	EX	DE,HL
	SCF
	SBC	HL,DE
	JR	C,LD_C3

LD_C2	LD	DE,0005H			; FIVE EXTRA LOCATIONS ARE ADDED FOR 'LUCK'
	ADD	HL,DE
	LD	B,H
	LD	C,L
	RST	CALBAS
	DEFW	1F05H				; TEST THAT ROOM EXISTS

LD_C3	POP	HL

		; SEPARATE PROGRAMS FROM ARRAYS
	LD	A,(DR+HD_00)			; FETCH THE TYPE CODE
	AND	A
	JR	Z,L_PROG			; JUMP FORWARD TO LOAD A PROGRAM

		; DEAL WITH NUMERIC AND STRING ARRAYS
	LD	A,H
	OR	L
	JR	Z,LD_D5				; JUMP IF A 'NEW' ARRAY

		; ELSE RECLAIM THE 'OLD' ARRAY
	LD	A,(IX+CHTYPE)			; IS IT A MICRODRIVE
	CP	'M'+80H
	JR	NZ,_LD_C35			; *
	LD	HL,(DR+N_STR2+2)		; RELOCATED ADDRESS OF ARRAY
	JR	_LD_D4				; *
_LD_C35						; *
	BIT	3,(IY+FLAGS3-Y)
	JR	Z,_LD_D4			; JUMP IF USING THE RS232

	LD	DE,N_LEN			; ELSE ALLOW FOR THE NET CHANNEL
	ADD	HL,DE

_LD_D4	DEC	HL				; * BACK ONE
	LD	B,(HL)				; FETCH HIGH LENGTH
	DEC	HL
	LD	C,(HL)				; FETCH LOW LENGTH
	DEC	HL
	INC	BC				; COUNT UP BY THREE
	INC	BC
	INC	BC
	RST	CALBAS
	DEFW	19E8H				; 'DELREC'

LD_D5	LD	HL,(E_LINE)
	DEC	HL				; FIND END OF PRESENT VARIABLES AREA
	LD	BC,(DR+HD_0B)			; FETCH NEW LENGTH
	PUSH	BC				; TAKE A COPY
	INC	BC				; UP BY THREE AGAIN
	INC	BC
	INC	BC
	LD	A,(DR+SC_0F)			; FETCH THE LETTER
	PUSH	AF				; SAVE IT BRIEFLY
	RST	CALBAS
	DEFW	1655H				; MAKE THE ROOM FOR THE NEW ARRAY
	INC	HL
	POP	AF				; RETRIEVE THE LETTER
	LD	(HL),A				; ENTER IT
	POP	DE				; FETCH THE LENGTH
	INC	HL
	LD	(HL),E
	INC	HL
	LD	(HL),D				; ENTER THE LENGTH
	INC	HL

		; NOW GET THE ACTUAL ARRAY
LD_D6	CALL	GET_BL				; GET THE ACTUAL BLOCK
	JP	SLVMEX

;______________________________________________________________________

L_PROG		; RECLAIM THE 'OLD' PROGRAM
	RES	1,(IY+FLAGS3-Y)			; DONT WANT TO PROTECT ALL LOADS
						; UNLESS LINE WAS SPECIFIED
	LD	DE,(PROG)			; THE BASE ADDRESS IS TO BE 'PROG'
	LD	HL,(E_LINE)
	DEC	HL
	RST	CALBAS
	DEFW	19E5H				; RECLAIM THE 'OLD' PROGRAM AND VARIABLES TOTALLY

		; NEXT CREATE ROOM (TESTS IF POSSIBLE)
	LD	BC,(DR+HD_0B)			; FETCH THE LENGTH
	LD	HL,(PROG)
	RST	CALBAS
	DEFW	1655H				; MAKE SUFFICIENT ROOM

		; SET VARS & NEWPPC AS REQUIRED
	INC	HL
	LD	BC,(DR+HD_0F)			; FETCH THE PROGRAM LENGTH
	ADD	HL,BC
	LD	(VARS),HL			; ENTER THE REQUIRED VALUE FOR VARS
	LD	A,(DR+HD_12)			; LINE NUMBER?
	LD	H,A
	AND	0C0H				; TEST IT
	JR	NZ,L_P1				; JUMP IF 'FFH'
	SET     1,(IY+FLAGS3-Y)			; NOW WANT TO PROTECT IT

	LD	A,(DR+HD_11)			; FETCH THE LOW NUMBER
	LD	L,A
	LD	(NEWPPC),HL			; ENTER IT
	LD	(IY+NSPPC-Y),00H		; ZERO STATEMENT NUMBER

		; SET UP REGISTERS FOR THE ACTUAL LOADING
L_P1	LD	HL,(PROG)			; BASE ADDRESS
	LD	DE,(DR+HD_0B)			; BLOCK LENGTH

		; TAKE THE OPPORTUNITY HERE TO RESET DATADD
	DEC	HL
	LD	(DATADD),HL
	INC	HL

	JR	LD_D6				; COLLECT THE BLOCK AND EXIT

;______________________________________________________________________

GET_BL		; GET A BLOCK FROM THE NET OR THE RS232
		; DE HOLDS THE LENGTH
		; HL HOLDS THE START
		; BIT 7,FLAGS3 IS SET FOR VERIFYING
		; BIT 3,FLAGS3 IS SET FOR USING THE NET

	LD	A,D				; DO NOTHING IF NULL PROGRAM
	OR	E
	RET	Z
;
	LD	A,(IX+CHTYPE)			; IS IT A MICRODRIVE
	CP	'M'+80H
	JR	NZ,GE_1
	CALL	GETMBL				; YES ... DO SEPERATELY
	RET

GE_1	PUSH	HL				; SAVE THE START
	PUSH	DE				; SAVE THE LENGTH
	BIT	3,(IY+FLAGS3-Y)			; USING THE NET?
	JR	Z,GE_2
GE_15
	CALL	IN_BYT				; FETCH A BYTE FROM THE NET
	JR	NC,GE_15
	JR	GE_3
GE_2	CALL	IN_BYP				; FETCH A BYTE FROM THE RS232
	JR	NC,GE_2
GE_3	POP	DE				; RETRIEVE THE LENGTH
	DEC	DE				; DECREASE IT
	POP	HL				; RETRIEVE THE START
	BIT	7,(IY+FLAGS3-Y)			; VERIFYING?
	JR	NZ,GE_4				; JUMP IF IT IS
	LD	(HL),A				; ASSIGN IT IF NOT
	JR	GE_5

GE_4	CP	(HL)				; DOES IT MATCH?
	JR	Z,GE_5

	RST	SH_ERR
	DEFB	15H				; 'VERIFICATION HAS FAILED'

GE_5	INC	HL				; STEP ON
	LD	A,E
	OR	D
	JR	NZ,GE_1				; GO ROUND UNTIL FINISHED
	RET					; ALL DONE


AUTO_R
	LD	BC,1				; PREPARE VARIABLES AS IF THE USER HAD
	LD	(DR+D_STR1),BC			; TYPE LOAD*"M";1;"RUN"
	LD	BC,3				; FIRST DRIVE NUMBER NOW NAME LENGTH
	LD	(DR+N_STR1),BC
	LD	BC,NAME				; AND ADDRESS
	LD	(DR+N_STR1+2),BC

	SET	4,(IY+FLAGS3-Y) 		; SET LOAD FLAG

	CALL	T_PR_1				; GET OLD PROG PARAMETERS
	LD	HL,DR+HD_00			; AND MOVE THEM UP AS IN L_TEST
	LD      DE,DR+SC_00
	LD      BC,9
	LDIR

	SET	7,(IY+NSPPC-Y)			; RUN CLEARED THIS IN ANTICIPATION OF
						; LINE NUMBER. MUST SET IT TO PREVENT
						; JUMP TO PROGRAM.

	CALL	GET_HD				; NOW RESUME AS BEFORE
	JP	H_SORT

NAME
	DEFB "r"
	DEFB "u"
	DEFB "n"

