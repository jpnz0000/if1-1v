                00001 *LIST OFF
                00003 *LIST ON
                00004 ;
                00005 ;********************************************************************
                00006 ;
                00007 ;               BEGINNING OF SHADOW ROM PROGRAM
                00008 ;
                00009 ;********************************************************************
                00010 ;
                00011 
                00012 
                00013 *INCLUDE SH_S_V.S
                00014 ;
                00015 ;******************************************************************
                00016 ;
                00017 ;                       SHADOW ROM SYSTEM VARIABLES
                00018 ;
                00019 ;******************************************************************
                00020 ;
                00021 *INCLUDE        NEWVAR.S
                00022 ;
                00023 ;***************************************************
                00024 ;*      NEWVAR.S                                   *
                00025 ;*       29/4/83                                   *
                00026 ;***************************************************
                00027 ;
                00028 ;**************************************************
                00029 ;*     SYSTEM EQUATES                             *
                00030 ;**************************************************
                00031 ;
                00032 ;
    = 00EF      00033 PORTC   EQU     0EFH                            ; UDRIVE CONTROL/STATUS PORT
    = 00E7      00034 PORTD   EQU     0E7H                            ; DATA PORT ADDRESS
                00035 ;
    = 00FE      00036 SELD    EQU     0FEH                            ; DRIVE SELECT DATA
    = 00FD      00037 SELC    EQU     0FDH                            ; DRIVE SELECT CLOCK
    = 00FB      00038 WRITE   EQU     0FBH                            ; WRITE CURRENT ON
    = 00F7      00039 ERASE   EQU     0F7H                            ; ERASE CURRENT ON
    = 00EF      00040 CTS     EQU     0EFH                            ; CLEAR TO SEND OUTPUT
                00041 ;
    = 0002      00042 SYNC    EQU     2                               ; SYNC BYTE DETECTED SIGNAL
    = 0001      00043 PROTECT EQU     1                               ; WRITE PROTECT SIGNAL
    = 0004      00044 GAP     EQU     4                               ; GAP SIGNAL
    = 0010      00045 BUSY    EQU     10h
                00046 ;
    = 000C      00047 PLEN    EQU     12                              ; LENGTH OF PREAMBLE
    = 001B      00048 HD_LEN  EQU     PLEN+14+1                       ; LENGTH OF HEADER BLOCK PLUS PREAMBLE
    = 021C      00049 D_LEN   EQU     HD_LEN+512+1                    ; LENGTH OF DATA BLOCK
    = 00FF      00050 HD_MAX  EQU     255                             ; NUMBER OF BLOCK ON TAPE
    = 0005      00051 TRYS    EQU     5                               ; NUMBER OF TRIPS ROUND TAPE
                00052                                                 ; BEFORE GIVING UP
    = 0168      00053 GAPT3   EQU     360                             ; THE DEC BC DELAY BETWEEN READING
                00054                                                 ; A HEADER, CORRECTING IT, TESTING
                00055                                                 ; IF FREE AND WRITING A DATA BLOCK
    = 01B2      00056 GAPT1   EQU     GAPT3+74                        ; THE DEC BC DELAY BETWEEN WRITING
                00057                                                 ; A HEADER BLOCK AND WRITING A
                00058                                                 ; DATA BLOCK
    = 033F      00059 GAPT2   EQU     831                             ; THE DEC BC DELAY BETWEEN END OF
                00060                                                 ; A DATA BLOCK AND BEGINNING OF
                00061                                                 ; HEADER BLOCK
                00062                                                 ; THE DEC BC DELAY IS 26 T-STATES
                00063                                                 ; OR 7.4US
                00064 ; THE ABOVE TIMINGS ARE HOPEFULLY
                00065 ; FOR A HEADER OF LENGTH 840US, FOLLOWED BY A GAP OF 3.06MS, FOLLOWED
                00066 ; BY THE DATA BLOCK LENGTH 21.3MS, FOLLOWED BY A GAP OF 6MS
                00067 ;
    = 0008      00068 ERROR   EQU     8                               ; ERROR HANDLING IN ROM
    = 1655      00069 INSERT  EQU     1655H                           ; MAKE SPACE IN ROM
    = 19E8      00070 DELREC  EQU     19E8H                           ; DELETE SPACE IN ROM
    = 5C4F      00071 CHANS   EQU     23631                           ; ADDRESS OF CHANNEL DATA
    = 5C65      00072 STKEND  EQU     23653                           ; ADDRESS OF START OF SPARE SPACE
    = 5C63      00073 STKBOT  EQU     23651
    = 5C68      00074 MEM     EQU     23656
    = 1601      00075 SELECT  EQU     1601H                           ; CHANNEL SELECT SUB. IN OLD ROM
    = 07F4      00076 SENDTV  EQU     7F4H                            ; TV OUTPUT PROCEDURE
    = 0010      00077 OUTCH   EQU     16                              ; CHANNEL OUTPUT ROUTINE
    = 15E6      00078 INCH    EQU     15E6H                           ; CHANNEL INPUT ROUTINE
                00079 ;
                00080 ;
                00081 ;                       SHADOW ROM SYSTEM VARIABLES
                00082 ;
                00083 ;******************************************************************
                00084 ;
                00085 ;
                00086 
                00087 ;  SYSTEM RESTARTS
                00088 
    = 0000      00089 R_BASE: EQU     0000H
    = 0008      00090 ENTRY:  EQU     0008H
    = 0010      00091 CALBAS: EQU     0010H
    = 0018      00092 SYNT:   EQU     0018H
    = 0020      00093 SH_ERR: EQU     0020H
    = 0028      00094 ROMERR: EQU     0028H
    = 0030      00095 INSER_  EQU     0030H
    = 0038      00096 MASK:   EQU     0038H
                00097 
                00098 
                00099 ;  BASE ROM ADDRESSES
                00100 
    = 5C08      00101 LAST_K  EQU     5C08H
    = 5C0B      00102 DEFADD  EQU     5C0BH
    = 5C10      00103 STRMS   EQU     5C10H
    = 5C3A      00104 Y       EQU     5C3AH
    = 5C3A      00105 ERR_NR  EQU     5C3AH
    = 5C3B      00106 FLAGS   EQU     5C3BH
    = 5C3C      00107 TV_FLAG EQU     5C3CH
    = 5C3D      00108 ERR_SP  EQU     5C3DH
    = 5C42      00109 NEWPPC  EQU     5C42H
    = 5C44      00110 NSPPC   EQU     5C44H
    = 5C45      00111 PPC     EQU     5C45H
    = 5C47      00112 SUBPPC  EQU     5C47H
    = 5C48      00113 BORDCR  EQU     5C48H
    = 5C4B      00114 VARS    EQU     5C4BH
    = 5C4F      00115 CHANS_  EQU     5C4FH
    = 5C51      00116 CURCHL  EQU     5C51H
    = 5C53      00117 PROG    EQU     5C53H
    = 5C57      00118 DATADD  EQU     5C57H
    = 5C59      00119 E_LINE  EQU     5C59H
    = 5C5D      00120 CH_ADD  EQU     5C5DH
    = 5C5F      00121 X_PTR   EQU     5C5FH
    = 5C6A      00122 FLAGS2  EQU     5C6AH
    = 5C71      00123 FLAGX   EQU     5C71H
    = 5C7B      00124 UDG     EQU     5C7BH
    = 5C8C      00125 SCRCT   EQU     5C8CH
    = 5C8D      00126 ATTR_P  EQU     5C8DH
    = 5C8F      00127 ATTR_T  EQU     5C8FH
    = 5C91      00128 P_FLAG  EQU     5C91H
    = 5CB6      00129 DR      EQU     5CB6H
                00130 
                00131 
                00132 
                00133 ;
                00134 ;*************************************************
                00135 ;*      FIXED MICRODRIVE DATA                    *
                00136 ;*************************************************
                00137 ;
                00138 ;
                00139 ; THIS FIXED DATA IS FOUND IMMEDIATELY AFTER THE SYSTEM VARIABLES
                00140 ; THE SPACE IS CREATED WHEN THE SHADOW ROM IF FIRST CALLED
                00141 ;
    = 5CB6      00142 FLAGS3  EQU     DR              ; 23734         ; BIT 0 ... RECURSION
                00143                                                 ; BIT 1 ... AUTO RUN
                00144                                                 ; BIT 2 ... HOOK
                00145                                                 ; BIT 3 ... NET/RS232
                00146                                                 ; BIT 4 ... LOAD
                00147                                                 ; BIT 5 ... SAVE
                00148                                                 ; BIT 6 ... MERGE
                00149                                                 ; BIT 7 ... VERIFY
    = 0007      00150 XR      EQU     7                               ; INDICATES VERIFY NOT LOAD
    = 0001      00151 VECTOR  EQU     01H             ; 23735/6       ; NEW COMMAND VECTOR POINT
    = 0003      00152 SBRT    EQU     VECTOR+02H      ; 23737         ; START OF CALBAS SUBROUTINE
    = 0004      00153 H_L     EQU     SBRT+01H
    = 0007      00154 ZILCH   EQU     SBRT+04H
    = 000D      00155 BAUD    EQU     SBRT+0AH        ; 23747         ; RATE FOR RS232
    = 000F      00156 NTSTAT  EQU     BAUD+02H        ; 23749         ; 'OWN' STATION NUMBER
    = 0010      00157 IOBORD  EQU     NTSTAT+01H      ; 23750         ; BORDER COLOR FOR I/O
    = 0011      00158 SER_FL  EQU     IOBORD+01H      ; 23751         ; SERIAL INPUT FLAG & CHARACTER
                00159 
                00160                 ; END OF DEFAULT SYS. VARS
                00161 
                00162 
                00163                 ; START OF VARIABLES
                00164 
    = 5CC9      00165 SECTOR  EQU     SER_FL+02H+DR   ; 23753         ; MICRODRIVE SECTOR
    = 0015      00166 CHADD_  EQU     SECTOR+02H-DR   ; 23755         ; TEMPORARY STORE FOR CH_ADD
    = 0017      00167 NTRESP  EQU     CHADD_+02H      ; 23757         ; STORE FOR RESPONSE CODE
                00168 
                00169                 ; THE EIGHT LOCATIONS FOR A NET HEADER
                00170 
    = 0018      00171 NTDEST  EQU     NTRESP+01H      ; 23758         ; DESTINATION STATION NUMBER
    = 0019      00172 NTSRCE  EQU     NTDEST+01H      ; 23759         ; SOURCE STATION NUMBER
    = 001A      00173 NTNUMB  EQU     NTSRCE+01H      ; 23760         ; BLOCK NUMBER
    = 001C      00174 NTTYPE  EQU     NTNUMB+02H      ; 23762         ; 'DATA' (0) OR 'CLOSE' (1) TYPE CODE
    = 001D      00175 NTLEN   EQU     NTTYPE+01H      ; 23763         ; DATA BLOCK LENGTH
    = 001E      00176 NTDCS   EQU     NTLEN+01H       ; 23764         ; DATA CHECKSUM
    = 001F      00177 NTHCS   EQU     NTDCS+01H       ; 23765         ; HEADER CHECKSUM
                00178 
                00179                 ; THE SIXTEEN LOCATIONS FOR PARAMETER COLLECTION
                00180 
    = 0020      00181 D_STR1  EQU     NTHCS+01H       ; 23766         ; TWO BYTE NUMBER
    = 0022      00182 S_STR1  EQU     D_STR1+02H      ; 23768         ; STREAM NUMBER
    = 0023      00183 L_STR1  EQU     D_STR1+03H      ; 23769         ; LETTER
    = 0024      00184 N_STR1  EQU     D_STR1+04H      ; 23770         ; NAME DETAILS (LENGTH & START)
    = 0028      00185 D_STR2  EQU     D_STR1+08H      ; 23774         ; ** SECOND SET **
    = 002A      00186 S_STR2  EQU     D_STR1+0AH      ; 23776
    = 002B      00187 L_STR2  EQU     D_STR1+0BH      ; 23777
    = 002C      00188 N_STR2  EQU     D_STR1+0CH      ; 23778
                00189 
                00190 
    = 0028      00191 SC_00   EQU     D_STR1+08H      ; 23774         ; SECOND SET FOR SCANN
    = 0029      00192 SC_0B   EQU     D_STR1+09H      ; 23775
    = 002B      00193 SC_0D   EQU     D_STR1+0BH      ; 23777
    = 002D      00194 SC_0F   EQU     D_STR1+0DH      ; 23779
                00195 
                00196 
                00197 
                00198                 ; THE NINE LOCATIONS FOR 'SAVE', 'LOAD' ETC.
                00199 
    = 0030      00200 HD_00   EQU     D_STR1+10H      ; 23782         ; TYPE CODE
    = 0031      00201 HD_0B   EQU     HD_00+01H       ; 23783         ; LENGTH OF BLOCK
    = 0032      00202 HD_0C   EQU     HD_0B+01H       ; 23784
    = 0033      00203 HD_0D   EQU     HD_0C+01H       ; 23785         ; START OF BLOCK
    = 0034      00204 HD_0E   EQU     HD_0D+01H       ; 23786
    = 0035      00205 HD_0F   EQU     HD_0E+01H       ; 23787         ; PROGRAM LENGTH
    = 0036      00206 HD_10   EQU     HD_0F+01H       ; 23788
    = 0037      00207 HD_11   EQU     HD_10+01H       ; 23789         ; LINE NUMBER
    = 0038      00208 HD_12   EQU     HD_11+01H       ; 23790
                00209 
    = 0039      00210 COPIES  EQU     HD_12+1         ; 23791
                00211 
    = 0037      00212 ROMADD  EQU     HD_10+01H       ; 23789         ; PASSING ADDRESS FOR HOOKS
                00213 
    = 003A      00214 DR_LEN  EQU     COPIES+01H
    = 0114      00215 N_LEN   EQU     0114H                           ; LENGTH OF A NET BUFFER
                00216 
                00217 ;  RS232 PORT DETAILS
                00218 
    = 00F7      00219 RS232   EQU     0F7H                            ; SERIAL DATA PORT
    = 00FE      00220 KB_PT   EQU     0FEH                            ; KEYBOARD PORT
    = 00EF      00221 STATUS  EQU     0EFH                            ; SERIAL STATUS PORT
    = 0008      00222 DTR     EQU     08H                             ; MASK FOR DTR OUTPUT
                00223 
                00224 ; NET PORT DETAILS
    = 00F7      00225 SERIAL  EQU     0F7H                            ; SERIAL DATA PORT
    = 00EF      00226 WAIT    EQU     0EFH                            ; WAIT PORT
                00227 
                00228 ;
                00229 ;
                00230 ;************************************************
                00231 ;*    MACROS                                    *
                00232 ;************************************************
                00233 ;
                00234 RST     MACRO   #ADDR                           ; THIS MACRO WILL BE USED TO FLAG
                00235         RST     #ADDR                           ; CALLS TO THE ROM WHEN THIS S/WARE
                00236         ENDM                                    ; IS CONVERTED TO SHADOW ROM FORM.
                00237 ;
                00238 ASSERT  MACRO   #COND
                00239         COND .NOT.(#COND)
                00240         ENDC
                00241         ENDM
                00242 ;
                00243 OLDCAL  MACRO   #SUB
                00244         RST     CALBAS
                00245         DEFW    #SUB
                00246         ENDM
                00247 ;
                00248 OLDJP   MACRO   #DEST
                00249         JP      #DEST
                00250         ENDM
                00251 ;
                00252 ;
                00253 ;
                00254 ;********************************************
                00255 ;*   DATA                                   *
                00256 ;********************************************
                00257 ;
                00258 ;
                00259 ;********************CHANNEL***************
                00260 ;
                00261 ;
                00262 ; THE FOLLOWING DATA IS CREATE'D FOR EVERY OPEN MICRODRIVE FILE
                00263 ; AND SOMETIMES FOR A WORKSPACE IN MICRODRIVE OPERATIONS
                00264 ;
                00265 ;
                00266 ; OLD WRCH ADDRESS POINTS TO 0008
                00267 ; OLD RDCH ADDRESS POINTS TO 0008
    = 0004      00268 CHTYPE  EQU     4                               ; CHANNEL TYPE
                00269 ; NEW WRCH ADDRESS
                00270 ; NEW RDCH ADDRESS
    = 0009      00271 CHLEN   EQU     CHTYPE+5                        ; LENGTH OF THIS CHANNEL DATA
    = 000B      00272 CHBYTE  EQU     CHLEN+2                         ; CURRENT BYTE POINTER
    = 000D      00273 CHREC   EQU     CHBYTE+2                        ; CURRENT RECORD
    = 000E      00274 CHNAME  EQU     CHREC+1                         ; 10 BYTE FILE NAME
    = 0018      00275 CHFLAG  EQU     CHNAME+10                       ; CHANNEL FLAGS
                00276 ;
    = 0000      00277 WRFLG   EQU     0                               ; WRITE FLAG BIT
                00278 ;
    = 0019      00279 CHDRIV  EQU     CHFLAG+1                        ; DRIVE NUMBER 0-7
    = 001A      00280 CHMAP   EQU     CHDRIV+1                        ; ADDRESS OF DRIVE MAP FOR THIS FILE
                00281 ;
    = 001C      00282 CHHDR   EQU     CHMAP+2                         ; START OF HEADER
    = 0028      00283 HDFLAG  EQU     CHHDR+PLEN                      ; FLAG BYTE AT START OF HEADER (BIT0=1)
    = 0029      00284 HDNUMB  EQU     HDFLAG+1                        ; NUMBER OF CURRENT HEADER/SECTOR
                00285                                                 ; FOLLOWED BY TWO EMPTY BYTES
    = 002C      00286 HDNAME  EQU     HDNUMB+3                        ; TAPE NAME
    = 0036      00287 HDCHK   EQU     HDNAME+10                       ; HEADER CHECKSUM
                00288 ;
                00289 ; TOTAL LENGTH OF THE ABOVE PLEN + 15
                00290 ;
    = 0037      00291 CHDES   EQU     HDCHK+1                         ; START OF DESCRIPTOR
    = 0043      00292 RECFLG  EQU     CHDES+PLEN                      ; FLAG BYTE IN DESCRIPTOR (BIT0=1)
                00293                                                 ; BIT 1 = EOF
                00294                                                 ; BIT 2 = SLVM
    = 0044      00295 RECNUM  EQU     RECFLG+1                        ; NUMBER OF THIS RECORD
    = 0045      00296 RECLEN  EQU     RECNUM+1                        ; LENGTH OF THIS RECORD
    = 0047      00297 RECNAM  EQU     RECLEN+2                        ; NAME OF THIS RECORD
    = 0051      00298 DESCHK  EQU     RECNAM+10                       ; DESCRIPTOR CHECKSUM
    = 0052      00299 CHDATA  EQU     DESCHK+1                        ; START OF DATA BLOCK
    = 0252      00300 DCHK    EQU     CHDATA+512                      ; DATA CHECKSUM
                00301 ;
    = 0253      00302 CHANLN  EQU     DCHK+1                          ; LENGTH OF ALL THIS
                00303 ;
                00304 ;*************MAP****************************
                00305 ;
                00306 ; A MICRODRIVE MAP IS A BIT MAP OF ALL SECTORS ON A MICRODRIVE
                00307 ; THE BITS ARE COUNTED FROM 0 TO HD_MAX-1 THE LENGTH
                00308 ; OF THE MAP IS THEREFORE GIVEN BY:-
                00309 ;
    = 0020      00310 MAPLN   EQU     32
                00311 ;
                00312 ; THE MAP IS CREATE'D FOR EVERY DRIVE CONTAINING AN OPEN FILE
                00313 ;
                00314 *INCLUDE SH_BEGIN.S
                00315 
                00316 
                00317 ;       EXTERNAL RETBAS
                00318 ;       EXTERNAL SH_RPT
                00319 ;       EXTERNAL S_CAT
                00320 ;       EXTERNAL S_FORM
                00321 ;       EXTERNAL S_MOVE
                00322 ;       EXTERNAL S_ERAS
                00323 ;       EXTERNAL S_OPEN
                00324 ;       EXTERNAL S_SAVE
                00325 ;       EXTERNAL S_LOAD
                00326 ;       EXTERNAL S_VERI
                00327 ;       EXTERNAL S_MERG
                00328 ;       EXTERNAL S_CLS
                00329 ;       EXTERNAL S_CLR
                00330 ;       EXTERNAL OUT_N
                00331 ;       EXTERNAL NTCLSE         ;TEMP
                00332 ;       EXTERNAL OUT_T2         ;TEMP
                00333 ;       EXTERNAL HOOKS
                00334 ;       EXTERNAL AUTO_R
                00335 ;       EXTERNAL DELTMP
                00336 ;       EXTERNAL        OPHEX,HEX
                00337                 
                00338         ORG     R_BASE                          ; 0000H
0000  E1        00339         POP     HL                              ; DROP RST STACKED ADDRESS
0001  FD367C00  00340         LD      (IY+FLAGS3-Y),00H               ; CLEAR STATEMENT FLAG WHEN EXITING
                00341                                                 ; AFTER A STATEMENT
0005  C30007    00342         JP      RETBAS                          ; JUMP TO 0700H
                00343 
                00344         ORG     ENTRY                           ; 0008H
0008  2A5D5C    00345         LD      HL,(CH_ADD)                     ; REPEAT THE INSTRUCTION IN BASE ROM
000B  E1        00346         POP     HL                              ; FETCH THE DISCRIMINATOR ADDRESS
000C  E5        00347         PUSH    HL                              ; AND KEEP A COPY
000D  C39A00    00348         JP      ERR_IN                          ; JUMP FORWARD
                00349 
                00350         ORG     CALBAS                          ; 0010H
                00351                                                 ; CALL SUBROUTINE IN BASE ROM
                00352                                                 ; THIS USES THE SPECIAL SUBROUTINE IN THE
                00353                                                 ; SHADOW SYS. VARS.
                00354                                                 ;   LD HL,----  (THE STORED HL)
                00355                                                 ;   CALL ZILCH
                00356                                                 ;   LD (DR+H_L),HL
                00357                                                 ;   RET
                00358                                                 ;
                00359                                                 ; FORMAT TO CALL 'CALBAS' IS
                00360                                                 ;   RST CALBAS
                00361                                                 ;   DEFW ZILCH
                00362                                                 ; NO REGISTERS ARE ALTERED
                00363 
0010  22BA5C    00364         LD      (DR+H_L),HL                     ; SAVE HL IN ITS STORE
0013  E1        00365         POP     HL                              ; HL POINTS TO ZILCH
0014  D5        00366         PUSH    DE                              ; SAVE DE TEMPORARILY
0015  186A      00367         JR      CALB_2
                00368         
                00369         ORG     SYNT                            ; 0018H
0018  FDCB017E  00370         BIT     7,(IY+FLAGS-Y)                  ; Z FOR SYNTAX
001C  C9        00371         RET                                     ; NZ FOR RUN-TIME
                00372 
                00373         ORG     SH_ERR                          ; 0020H
0020  DF        00374         RST     SYNT
0021  2845      00375         JR      Z,SYN                           ; IN SYNTAX TIME        - NO REPORT
0023  1815      00376         JR      SHERR1                          ; RUN-TIME              - GIVE REPORT
                00377 
                00378         ORG     ROMERR                          ; 0028H
0028  FDCB029E  00379         RES     3,(IY+TV_FLAG-Y)                ; CORRECT THE 'CURSOR' ERROR
002C  1812      00380         JR      RMERR
                00381 
                00382         ORG     INSER_                          ; 0030H
0030  C3F701    00383         JP      INSER1                          ; JUMP TO THE ACTUAL SUBROUTINE
                00384 
                00385         ORG     MASK                            ; 0038H
0038  FB        00386         EI                                      ; KEEP INTERRUPT ON
0039  C9        00387         RET                                     ; INTERRUPT ROUTINE FINISHED
                00388 
                00389 SHERR1
003A  CD7700    00390         CALL    HOOK?                           ; TEST IF HOOK PROCEDURE
003D  C35802    00391         JP      SH_RPT                          ; BEFORE REPORTING
                00392 
                00393 RMERR
0040  DF        00394         RST     SYNT
0041  2825      00395         JR      Z,SYN
0043  CD7700    00396         CALL    HOOK?                           ; DITTO FOR OLD ERROR (ESP BREAK)
0046  CDB917    00397         CALL    DELTMP
                00398    
0049  FDCB7C4E  00399         BIT     1,(IY+FLAGS3-Y)                 ; IS THIS AN AUTORUN
004D  2819      00400         JR      Z,SYN                           ; NO...CONTINUE
                00401 
004F  FDCB7C66  00402         BIT     4,(IY+FLAGS3-Y)                 ; AND IS IT A LOAD
0053  2813      00403         JR      Z,SYN
                00404 
0055  FD7E00    00405         LD      A,(IY+ERR_NR-Y)
0058  FE14      00406         CP      14H                             ; HAS THE PIRATE ATTEMPTED IO BREAK?
                00407 
005A  200C      00408         JR      NZ,SYN                          ; NO...CONTINUE
                00409 
005C  210000    00410         LD      HL,0                            ; YES...SURPRISE, SURPRISE!
005F  E5        00411         PUSH    HL
0060  C7        00412         RST     R_BASE
                00413 
                00414         ORG     0066H
0066  ED45      00415         RETN                                    ; HERE ON NMI;SIMPLY RETURN
                00416 
0068  2A5D5C    00417 SYN     LD      HL,(CH_ADD)                     ; FETCH ERROR POINTER
006B  225F5C    00418         LD      (X_PTR),HL
006E  ED7B3D5C  00419         LD      SP,(ERR_SP)
0072  21C516    00420         LD      HL,16C5H
0075  E5        00421         PUSH    HL
0076  C7        00422         RST     R_BASE                          ; RETURN TO BASE ROM
                00423 
                00424 HOOK?
0077  FDCB7C56  00425         BIT     2,(IY+FLAGS3-Y)                 ; IS IT A HOOK PROCEDURE ERROR
007B  C8        00426         RET     Z                               ; NO...RESUME SERVICE
                00427 
007C  ED7B3D5C  00428         LD      SP,(ERR_SP)                     ; YES...ERROR RETURN
0080  C7        00429         RST     R_BASE
                00430 
                00431 
0081  5E        00432 CALB_2  LD      E,(HL)                          ; FETCH THE TWO BYTES OF 'ZILCH'
0082  23        00433         INC     HL
0083  56        00434         LD      D,(HL)
0084  ED53BD5C  00435         LD      (DR+ZILCH),DE                   ; THAT GOES INTO THE SUBROUTINE
0088  23        00436         INC     HL                              ; THE RETURN ADDRESS
0089  E3        00437         EX      (SP),HL                         ; THIS GOES TO STACK WHILST DE
008A  EB        00438         EX      DE,HL                           ; IS RETURNED
008B  210000    00439         LD      HL,0000H                        ; STACK THE RETURN DISCRIMINATOR
008E  E5        00440         PUSH    HL
008F  210800    00441         LD      HL,0008H                        ; THE ERROR RETURN
0092  E5        00442         PUSH    HL
0093  21B95C    00443         LD      HL,DR+SBRT                      ; THE SUBROUTINE'S ADDRESS
0096  E5        00444         PUSH    HL
0097  C30007    00445         JP      RETBAS
                00446 
                00447 
                00448 ERR_IN
009A  F5        00449         PUSH    AF
009B  7C        00450         LD      A,H
009C  B5        00451         OR      L
009D  2006      00452         JR      NZ,ERR_1                        ; JUMP IF NOT A RETURN AFTER 'CALBAS'
                00453 
009F  F1        00454         POP     AF
00A0  E1        00455         POP     HL                              ; RESTORE AF & H_L
00A1  2ABA5C    00456         LD      HL,(DR+H_L)                     ; LOSING THE DISCRIMINATING ZERO
00A4  C9        00457         RET                                     ; A RETURN AFTER 'CALBAS'
                00458 
                00459 ERR_1                                           ; THERE HAS BEEN AN ERROR
00A5  D5        00460         PUSH    DE                              ; ON STACK IS DISCRIMINATOR, AF & DE
00A6  11FE15    00461         LD      DE,15FEH                        ; INCH & WRCH DISCRIMINATOR
00A9  ED52      00462         SBC     HL,DE                           ; CARRY IS RESET GIVING TRUE SUBTRACTION
00AB  D1        00463         POP     DE                              ; ON STACK IS DISCRIMINATOR & AF
00AC  200E      00464         JR      NZ,ERR_2                        ; JUMP UNLESS 'DISCRIMINATOR' = 15FEH
                00465 
00AE  F1        00466         POP     AF
00AF  210007    00467         LD      HL,RETBAS
00B2  E5        00468         PUSH    HL                              ; RETBAS IS STACKED
00B3  210400    00469         LD      HL,0004H
00B6  19        00470         ADD     HL,DE                           ; THE INCH OR WRCH ADDRESS IS FOUND
00B7  5E        00471         LD      E,(HL)
00B8  23        00472         INC     HL
00B9  56        00473         LD      D,(HL)
00BA  EB        00474         EX      DE,HL                           ; IT IS MOVED TO HL AND
00BB  E9        00475         JP      (HL)                            ; THE JUMP TO IT IS MADE
                00476 
                00477 ERR_2                                           ; THE DISCRIMINATOR IS NOT 'A CALBAS RETURN' OR
                00478                                                 ; '15FE' FOR INCH OR WRCH;
                00479                                                 ; THEREFORE IT IS A POINTER TO A 'REPORT DEFB'
00BC  F7        00480         RST     INSER_                          ; ON THE FIRST VISIT TO THIS PROGRAM
                00481                                                 ; THE SHADOW SYS. VARS. HAVE TO BE ENTERED
00BD  3E01      00482         LD      A,1
00BF  D3F7      00483         OUT     (SERIAL),A                      ; DEACTIVATE THE NET
00C1  3EEE      00484         LD      A,CTS.AND.SELD                  ; SELECT THE NET OVER RS232
                00485                                                 ; AND NEGATE CTS
                00486 
00C3  D3EF      00487         OUT     (STATUS),A
                00488 
00C5  F1        00489         POP     AF                              ; FETCH ORIGINAL AF
00C6  E1        00490         POP     HL                              ; FETCH DISCRIMINATOR
00C7  F5        00491         PUSH    AF                              ; STACK HOLDS ORIGINAL AF ONLY
                00492 
00C8  D7        00493         RST     CALBAS                          ; IN EFFECT - LD A,(HL) & RET
00C9  7B00      00494         DEFW    007BH                           ; SO AS TO COLLECT THE 'DEFB'
                00495 
00CB  323A5C    00496         LD      (ERR_NR),A                      ; STORE THE ERROR NUMBER
                00497 
00CE  FEFF      00498         CP      0FFH                            ; IS IT THE END OF THE PROGRAM
00D0  2017      00499         JR      NZ,ERR_HO
                00500 
00D2  FDCB7C4E  00501         BIT     1,(IY+FLAGS3-Y)                 ; IS THE 'AUTO-RUN' FLAG SET?
00D6  280F      00502         JR      Z,ERR_PF
00D8  FDCB0C7E  00503         BIT     7,(IY+PPC+1-Y)                  ; USING THE EDIT-LINE?
00DC  2809      00504         JR      Z,ERR_PF
00DE  2A595C    00505         LD      HL,(E_LINE)                     ; FETCH THE FIRST BYTE IN THE EDIT LINE
00E1  7E        00506         LD      A,(HL)
00E2  FEF7      00507         CP      0F7H                            ; IS IT 'RUN'
00E4  CA950A    00508         JP      Z,AUTO_R                        ; JUMP AS DEALING WITH 'AUTO-RUN'
                00509 
00E7  E7        00510 ERR_PF  RST     SH_ERR
00E8  FF        00511         DEFB    0FFH                            ; 'PROGRAM FINISHED'
                00512 
00E9  D61B      00513 ERR_HO  SUB 1BH
00EB  D28119    00514         JP      NC,HOOKS                        ; JUMP FORWARD WITH THE HOOK CODES
                00515 
00EE  FEF0      00516         CP      0F0H                            ; IS IT 'NONSENSE IN BASIC'?
00F0  2809      00517         JR      Z,ERR_SA
                00518 
00F2  FEF3      00519         CP      0F3H                            ; IS IT 'INVALID FILE NAME'
00F4  2805      00520         JR      Z,ERR_SA                        ; ALSO RECONSIDER THE STATEMENT AGAIN
                00521 
                00522 
00F6  FEFC      00523         CP      0FCH                            ; IS IT 'INVALID STREAM'
00F8  C22800    00524         JP      NZ,ROMERR                       ; ALL OTHER ERRORS 'FALL THROUGH'
                00525 
                00526 
00FB  2A5D5C    00527 ERR_SA  LD      HL,(CH_ADD)                     ; SAVE THE CURRENT 'ERROR POINTER'
00FE  22CB5C    00528         LD      (DR+CHADD_),HL
                00529 
0101  F1        00530         POP     AF                              ; DISCARD ORIGINAL AF
                00531 ;
0102  FDCB376E  00532         BIT     5,(IY+FLAGX-Y)                  ; ARE WE IN INPUT
0106  C22800    00533         JP      NZ,ROMERR                       ; YES... DON'T PROCESS FURTHER
                00534 
0109  FDCB7C46  00535         BIT     0,(IY+FLAGS3-Y)                 ; NOW CHECK THE RECURSION FLAG
010D  C22800    00536         JP      NZ,ROMERR                       ; IF FLAG SET JUST GIVE ERROR
                00537 
0110  FDCB7CC6  00538         SET     0,(IY+FLAGS3-Y)                 ; SET THE RECURSION FLAG FOR EACH NEW STATEMENT
                00539 
0114  DF        00540         RST     SYNT
0115  2004      00541         JR      NZ,ERR_ST
0117  FD360CFF  00542         LD      (IY+PPC+1-Y),0FFH               ; IN SYNTAX TIME FORCE THE EDIT LINE NUMBER
                00543 
011B  FD460D    00544 ERR_ST  LD      B,(IY+SUBPPC-Y)                 ; FETCH STATEMENT NUMBER
011E  0E00      00545         LD      C,0                             ; AND FIND THE START OF THE STATEMENT
0120  FDCB0C7E  00546         BIT     7,(IY+PPC+1-Y)                  ; EDIT V. LINE
0124  280A      00547         JR      Z,LSPR                          ; JUMP FOR A PROGRAM LINE
0126  C5        00548         PUSH    BC                              ; SAVE STATEMENT NUMBER
0127  D7        00549         RST     CALBAS
0128  FB19      00550         DEFW    19FBH                           ; JUMP PAST A LINE NUMBER
012A  C1        00551         POP     BC                              ; RESTORE STATEMENT NUMBER
012B  D7        00552         RST     CALBAS
012C  1800      00553         DEFW    0018H                           ; FETCH THE CODE
012E  183F      00554         JR      LSC8                            ; JUMP FORWARD TO FIND THE REQUIRED STATEMENT
0130  2A535C    00555 LSPR    LD      HL,(PROG)
0133  3A465C    00556 LSC1    LD      A,(PPC+1)
0136  BE        00557         CP      (HL)
0137  3002      00558         JR      NC,LSC1A
0139  E7        00559 L_ERR   RST     SH_ERR
013A  00        00560         DEFB    0                               ; 'NONSENSE IN BASIC'
013B  23        00561 LSC1A   INC     HL
013C  2006      00562         JR      NZ,LSC2
013E  3A455C    00563         LD      A,(PPC)                         ; LOW LINE NUMBER BYTE
0141  BE        00564         CP      (HL)
0142  38F5      00565         JR      C,L_ERR
                00566 
0144  23        00567 LSC2    INC     HL
0145  5E        00568         LD      E,(HL)  
0146  23        00569         INC     HL
0147  56        00570         LD      D,(HL)
0148  23        00571         INC     HL
0149  2824      00572         JR      Z,LSC8                          ; FOUND THE LINE
014B  19        00573         ADD     HL,DE
014C  18E5      00574         JR      LSC1
                00575 
014E  110600    00576 LSC3    LD      DE,6
0151  19        00577         ADD     HL,DE
0152  7E        00578 LSC4    LD      A,(HL)
0153  FE0E      00579         CP      0EH                             ; NUMBER MARKER
0155  28F7      00580         JR      Z,LSC3
0157  23        00581         INC     HL
0158  FE22      00582         CP      22H
015A  2001      00583         JR      NZ,LSC5                         ; NOT QUOTES
015C  0D        00584         DEC     C                               ; SET QUOTES FLAG
015D  FE3A      00585 LSC5    CP      3AH                             ; COLON?
015F  2804      00586         JR      Z,LSC6
0161  FECB      00587         CP      0CBH                            ; 'THEN'
0163  2004      00588         JR      NZ,LSC7
0165  CB41      00589 LSC6    BIT     0,C
0167  2806      00590         JR      Z,LSC8
0169  FE0D      00591 LSC7    CP      0DH                             ; CARRIAGE RETURN
016B  20E5      00592         JR      NZ,LSC4
016D  18CA      00593         JR      L_ERR
                00594 
016F  10E1      00595 LSC8    DJNZ    LSC4
                00596 
0171  2B        00597         DEC     HL
0172  225D5C    00598         LD      (CH_ADD),HL
                00599 
0175  DF        00600         RST     SYNT                            ; IN SYNTAX-TIME REMOVE ANY FP FORMS FROM LINE
0176  2032      00601         JR      NZ,ERR_3
0178  FDCB0C7E  00602         BIT     7,(IY+PPC+1-Y)
017C  CAF001    00603         JP      Z,ERR_6                         ; CONFIRM DEALING WITH THE EDIT LINE
017F  2B        00604         DEC     HL                              ; STEP BACK ONE
0180  0E00      00605         LD      C,00H                           ; CLEAR FLAG
0182  23        00606 FP1     INC     HL
0183  7E        00607         LD      A,(HL)
0184  FE0E      00608         CP      0EH
0186  201D      00609         JR      NZ,FP2
0188  C5        00610         PUSH    BC
0189  010600    00611         LD      BC,0006H
018C  D7        00612         RST     CALBAS
018D  E819      00613         DEFW    19E8H
018F  E5        00614         PUSH    HL
0190  ED5BCB5C  00615         LD      DE,(DR+CHADD_)                  ; FETCH ERROR POINTER
0194  A7        00616         AND     A
0195  ED52      00617         SBC     HL,DE
0197  300A      00618         JR      NC,FP2A                         ; JUMP IF PAST CHADD_
0199  EB        00619         EX      DE,HL
019A  010600    00620         LD      BC,0006H
019D  A7        00621         AND     A
019E  ED42      00622         SBC     HL,BC                           ; ELSE REDUCE CHADD_ BY SIX LOCATIONS ALSO
01A0  22CB5C    00623         LD      (DR+CHADD_),HL
01A3  E1        00624 FP2A    POP     HL
01A4  C1        00625         POP     BC
01A5  7E        00626 FP2     LD      A,(HL)
01A6  FE0D      00627         CP      0DH
01A8  20D8      00628         JR      NZ,FP1
                00629 
01AA  D7        00630 ERR_3   RST     CALBAS                          ; CLEAR THE WORK SPACE & CALCULATOR STACK
01AB  BF16      00631         DEFW    16BFH
01AD  CD4D02    00632         CALL    SV_CL                           ; INITIALIZE THE NECESSARY SHADOW SYS. VARS.
                00633 
01B0  D7        00634         RST     CALBAS
01B1  2000      00635         DEFW    0020H
01B3  D6CE      00636         SUB     0CEH                            ; COMMANDS WILL BE ACCEPTED ONLY
01B5  FE01      00637         CP      01H
01B7  CA8604    00638         JP      Z,S_CAT                         ; JUMP FORWARD TO SCAN A 'CAT' STATEMENT
01BA  FE02      00639         CP      02H
01BC  CAB404    00640         JP      Z,S_FORM                        ; JUMP FORWARD TO SCAN A 'FORMAT' STATEMENT
01BF  FE03      00641         CP      03H
01C1  CA3D05    00642         JP      Z,S_MOVE                        ; JUMP FORWARD TO SCAN A 'MOVE' STATEMENT
01C4  FE04      00643         CP      04H
01C6  CA3105    00644         JP      Z,S_ERAS                        ; JUMP FORWARD TO SCAN AN 'ERASE' STATEMENT
01C9  FE05      00645         CP      05H
01CB  CAED04    00646         JP      Z,S_OPEN                        ; JUMP FORWARD TO SCAN AN 'OPEN #' STATEMENT
01CE  FE2A      00647         CP      2AH
01D0  CA2F08    00648         JP      Z,S_SAVE                        ; JUMP FORWARD TO SCAN A 'SAVE' STATEMENT
01D3  FE21      00649         CP      21H
01D5  CA9408    00650         JP      Z,S_LOAD                        ; JUMP FORWARD TO SCAN A 'LOAD' STATEMENT
01D8  FE08      00651         CP      08H
01DA  CA9E08    00652         JP      Z,S_VERI                        ; JUMP FORWARD TO SCAN A 'VERIFY' STATEMENT
01DD  FE07      00653         CP      07H
01DF  CAA808    00654         JP      Z, S_MERG                       ; JUMP FORWARD TO SCAN A 'MERGE' STATEMENT
                00655 
                00656                 ; ADDED COMMANDS COME HERE -E.G. CLS
                00657 
01E2  FE2D      00658         CP      2DH
01E4  CA5905    00659         JP      Z,S_CLS                         ; JUMP FORWARD TO SCAN A 'CLS' STATEMENT
01E7  FE2F      00660         CP      2FH
01E9  CA7F05    00661         JP      Z,S_CLR                         ; JUMP FORWARD TO SCAN A 'CLEAR' STATEMENT
                00662 
                00663 
                00664 
01EC  2AB75C    00665 ERR_V   LD      HL,(DR+VECTOR)                  ; FETCH THE VECTORED ADDRESS
01EF  E9        00666         JP      (HL)                            ; THIS IS 'ERR_6' UNLESS ALTERED
                00667 
                00668 
01F0  2ACB5C    00669 ERR_6   LD      HL,(DR+CHADD_)
01F3  225D5C    00670         LD      (CH_ADD),HL
01F6  EF        00671         RST     ROMERR                          ; ALLOW EXISTING ERROR THROUGH
                00672 
                00673 
                00674 ;______________________________________________________________
                00675 
                00676 
                00677 
                00678                 ; THE INSERTION ROUTINE - INTIALISES THE SHADOW ROM
                00679 
01F7  2A4F5C    00680 INSER1  LD      HL,(CHANS_)
01FA  1149A3    00681         LD      DE,.NOT.DR
01FD  19        00682         ADD     HL,DE                           ; ARE CHANS_ & DR EQUAL?
01FE  3835      00683         JR      C,INS_2                         ; RETURN IF THEY ARE NOT
0200  212402    00684         LD      HL,INS_1
0203  E5        00685         PUSH    HL                              ; STACK A RETURN ADDRESS
0204  2A635C    00686         LD      HL,(STKBOT)
0207  22655C    00687         LD      (STKEND),HL                     ; RESTORE CALC. SP. AFTER TEMP USE
020A  21925C    00688         LD      HL,5C92H
020D  22685C    00689         LD      (MEM),HL
0210  21B55C    00690         LD      HL,DR-1                         ; INSERT AT DR
0213  013A00    00691         LD      BC,DR_LEN                       ; THIS MANY
0216  110000    00692         LD      DE,0                            ; DISCRIMINATOR IS ZERO
0219  D5        00693         PUSH    DE
021A  1E08      00694         LD      E,8
021C  D5        00695         PUSH    DE
021D  115516    00696         LD      DE,1655H                        ; INSERT IN BASE ROM
0220  D5        00697         PUSH    DE
0221  C30007    00698         JP      RETBAS
                00699 
0224  213A02    00700 INS_1   LD      HL,SH_VARS                      ; BASE ADDRESS
0227  011300    00701         LD      BC,VA_LEN                       ; NUMBER OF LOCATIONS IN TABLE
022A  11B65C    00702         LD      DE,DR
022D  EDB0      00703         LDIR
022F  3E01      00704         LD      A,1
0231  32EF5C    00705         LD      (DR+COPIES),A                   ; ONLY WANT ONE COPY NORMALLY
0234  C9        00706         RET
                00707 INS_2
0235  FDCB7C8E  00708         RES     1,(IY+FLAGS3-Y)                 ; RESET THE AUTO-RUN FLAGS ON SECOND PASS
0239  C9        00709         RET
                00710 
023A  02        00711 SH_VARS DEFB    02H                             ; DEFAULT FOR FLAGS3 (AUTO-RUN ONLY SET)
023B  F001      00712         DEFW    ERR_6                           ; VECTOR ADDRESS
023D  21        00713         DEFB    21H                             ; CALBAS SUBROUTINE
023E  0000      00714         DEFW    0H                              ; LD HL,----
0240  CD        00715         DEFB    0CDH
0241  0000      00716         DEFW    0H                              ; CALL ----
0243  22        00717         DEFB    22H
0244  BA5C      00718         DEFW    DR+H_L                          ; LD(H_L),HL
0246  C9        00719         DEFB    0C9H                            ; RET
0247  0C00      00720         DEFW    0CH                             ; DEFAULT FOR BAUD
0249  01        00721         DEFB    01H                             ; DEFAULT FOR NTSTAT  - OWN STATION '1'
024A  00        00722         DEFB    00H                             ; DEFAULT FOR IOBORD  - I/O COLOUR
024B  0000      00723         DEFW    0000H                           ; INITIALIZE SER_FL
                00724 
                00725 VA_LEN  EQU     $-SH_VARS
                00726 
                00727 
                00728 ;__________________________________________________________________
                00729 
                00730         ; SHADOW SYS. VAR. HANDLING ROUTINES
                00731 
024D  21CD5C    00732 SV_CL   LD      HL,DR+NTRESP                    ; PREPARE TO INITIALIZE THE SYS. VARS.
0250  0622      00733         LD      B,HD_12-NTRESP+1                ; INITIALIZE ALL THESE SYS. VARS.
0252  36FF      00734 SV_CL1  LD      (HL),0FFH
0254  23        00735         INC     HL
0255  10FB      00736         DJNZ    SV_CL1
0257  C9        00737         RET
                00738 
                00739 
                00740 ;______________________________________________________________
                00741 *INCLUDE SH_RPTS.S
                00742 ;
                00743 ;******************************************************************************
                00744 ;
                00745 ;                               SHADOW ROM REPORT MODULE   - SH_RPTS.S
                00746 ;
                00747 ;******************************************************************************
                00748 
                00749 
                00750 ;       GLOBAL SH_RPT
                00751 ;       EXTERNAL RETBAS
                00752 ;       EXTERNAL        DELTMP
                00753 
                00754 SH_RPT                  ; DEAL WITH ERROR REPORTS IN RUN-TIME
                00755                         ; THE ERROR NUMBER POINTER IS ON THE STACK
                00756                         ; THE RANGE OF NUMBERS IS 00H - 1EH
                00757 
0258  FD367C00  00758         LD      (IY+FLAGS3-Y),00H               ; CLEAR THE STATEMENT FLAG AS EXITING
025C  FB        00759         EI                                      ; ENSURE INTERRUPT IS ON
025D  76        00760         HALT
                00761 
025E  CDB917    00762         CALL    DELTMP
0261  FDCB01AE  00763         RES     5,(IY+FLAGS-Y)                  ; SIGNAL 'NO LAST KEY AS YET'
0265  FDCB304E  00764         BIT     1,(IY+FLAGS2-Y)
0269  2803      00765         JR      Z,SH_R1
026B  D7        00766         RST     CALBAS
026C  CD0E      00767         DEFW    0ECDH                           ; EMPTY THE PRINTER BUFFER IF NEEDED
026E  E1        00768 SH_R1   POP     HL
026F  7E        00769         LD      A,(HL)                          ; FETCH ERROR NUMBER
0270  FD7700    00770         LD      (IY+ERR_NR-Y),A                 ; SAVE IT
0273  3C        00771         INC     A
0274  F5        00772         PUSH    AF
0275  210000    00773         LD      HL,0000H
0278  FD7437    00774         LD      (IY+FLAGX-Y),H                  ; CLEAR THESE
027B  FD7426    00775         LD      (IY+X_PTR+1-Y),H
027E  220B5C    00776         LD      (DEFADD),HL
0281  2C        00777         INC     L
0282  22165C    00778         LD      (5C16H),HL                      ; RESET STREAM 0
0285  D7        00779         RST     CALBAS
0286  B016      00780         DEFW    16B0H                           ; CLEAR EDIT-LINE & STACK
0288  FDCB37AE  00781         RES     5,(IY+FLAGX-Y)                  ; SIGNAL INPUT MODE
028C  D7        00782         RST     CALBAS
028D  6E0D      00783         DEFW    0D6EH                           ; CLEAR THE LOWER SCREEN
028F  FDCB02EE  00784         SET     5,(IY+TV_FLAG-Y)                ; SIGNAL 'CLEAR LOWER SCREEN AFTERWARDS'
0293  FDCB029E  00785         RES     3,(IY+TV_FLAG-Y)                ; CORRECT THE ERROR
0297  F1        00786         POP     AF                              ; COLLECT ERROR NUMBER
0298  21B702    00787         LD      HL,BASRPT                       ; ERROR MESSAGE BASE
029B  0604      00788         LD      B,04H                           ; BC MUST EXCEED LENGTH OF MESSAGES
029D  EDB1      00789         CPIR                                    ; FIND THE START OF THE MESSAGE REQUIRED
029F  7E        00790 SH_R2   LD      A,(HL)                          ; FETCH EACH LETTER
02A0  FE20      00791         CP      20H                             ; EXIT AT END OF MESSAGE
02A2  3808      00792         JR      C,SH_R3
02A4  E5        00793         PUSH    HL
02A5  D7        00794         RST     CALBAS
02A6  1000      00795         DEFW    0010H
02A8  E1        00796         POP     HL                              ; FETCH AND ADVANCE THE POINTER
02A9  23        00797         INC     HL
02AA  18F3      00798         JR      SH_R2
                00799     
                00800 ;
02AC  ED7B3D5C  00801 SH_R3   LD      SP,(ERR_SP)                     ; DROP THE MACHINE STACK
02B0  33        00802         INC     SP
02B1  33        00803         INC     SP
02B2  214913    00804         LD      HL,1349H
02B5  E5        00805         PUSH    HL
02B6  C7        00806         RST     R_BASE                          ; EXIT
                00807 
                00808 
                00809 ; THE ERROR MESSAGES
                00810 
02B7  00        00811 BASRPT  DEFB    0
02B8  50726F67  00812         DEFM    'Program finished'
      72 61 6D 20 66 69 6E 69
      73 68 65 64            
02C8  01        00813         DEFB    1
02C9  4E6F6E73  00814         DEFM    'Nonsense in BASIC'
      65 6E 73 65 20 69 6E 20
      42 41 53 49 43         
02DA  02        00815         DEFB    2
02DB  496E7661  00816         DEFM    'Invalid stream number'
      6C 69 64 20 73 74 72 65
      61 6D 20 6E 75 6D 62 65
      72                     
02F0  03        00817         DEFB    3
02F1  496E7661  00818         DEFM    'Invalid device expression'
      6C 69 64 20 64 65 76 69
      63 65 20 65 78 70 72 65
      73 73 69 6F 6E         
030A  04        00819         DEFB    4
030B  496E7661  00820         DEFM    'Invalid name'
      6C 69 64 20 6E 61 6D 65
0317  05        00821         DEFB    5
0318  496E7661  00822         DEFM    'Invalid drive number'
      6C 69 64 20 64 72 69 76
      65 20 6E 75 6D 62 65 72
032C  06        00823         DEFB    6
032D  496E7661  00824         DEFM    'Invalid station number'
      6C 69 64 20 73 74 61 74
      69 6F 6E 20 6E 75 6D 62
      65 72                  
0343  07        00825         DEFB    7
0344  4D697373  00826         DEFM    'Missing name'
      69 6E 67 20 6E 61 6D 65
0350  08        00827         DEFB    8
0351  4D697373  00828         DEFM    'Missing station number'
      69 6E 67 20 73 74 61 74
      69 6F 6E 20 6E 75 6D 62
      65 72                  
0367  09        00829         DEFB    9
0368  4D697373  00830         DEFM    'Missing drive number'
      69 6E 67 20 64 72 69 76
      65 20 6E 75 6D 62 65 72
037C  0A        00831         DEFB    0AH
037D  4D697373  00832         DEFM    'Missing baud rate'
      69 6E 67 20 62 61 75 64
      20 72 61 74 65         
038E  0B        00833         DEFB    0BH
038F  48656164  00834         DEFM    'Header mismatch error'
      65 72 20 6D 69 73 6D 61
      74 63 68 20 65 72 72 6F
      72                     
03A4  0C        00835         DEFB    0CH
03A5  53747265  00836         DEFM    'Stream already open'
      61 6D 20 61 6C 72 65 61
      64 79 20 6F 70 65 6E   
03B8  0D        00837         DEFB    0DH
03B9  57726974  00838         DEFM    'Writing to a '
      69 6E 67 20 74 6F 20 61
      20                     
03C6  27        00839         DEFB    027H
03C7  72656164  00840         DEFM    'read'
03CB  27        00841         DEFB    027H
03CC  2066696C  00842         DEFM    ' file'
      65                     
03D1  0E        00843         DEFB    0EH
03D2  52656164  00844         DEFM    'Reading a '
      69 6E 67 20 61 20      
03DC  27        00845         DEFB    027H
03DD  77726974  00846         DEFM    'write'
      65                     
03E2  27        00847         DEFB    027H
03E3  2066696C  00848         DEFM    ' file'
      65                     
03E8  0F        00849         DEFB    0FH
03E9  44726976  00850         DEFM    'Drive '
      65 20                  
03EF  27        00851         DEFB    027H
03F0  77726974  00852         DEFM    'write'
      65                     
03F5  27        00853         DEFB    027H
03F6  2070726F  00854         DEFM    ' protected'
      74 65 63 74 65 64      
0400  10        00855         DEFB    10H
0401  4D696372  00856         DEFM    'Microdrive full'
      6F 64 72 69 76 65 20 66
      75 6C 6C               
0410  11        00857         DEFB    11H
0411  4D696372  00858         DEFM    'Microdrive not present'
      6F 64 72 69 76 65 20 6E
      6F 74 20 70 72 65 73 65
      6E 74                  
0427  12        00859         DEFB    12H
0428  46696C65  00860         DEFM    'File not found'
      20 6E 6F 74 20 66 6F 75
      6E 64                  
0436  13        00861         DEFB    13H
0437  486F6F6B  00862         DEFM    'Hook code error'
      20 63 6F 64 65 20 65 72
      72 6F 72               
0446  14        00863         DEFB    14H
0447  434F4445  00864         DEFM    'CODE'
044B  20657272  00865         DEFM    ' error'
      6F 72                  
0451  15        00866         DEFB    15H
0452  4D455247  00867         DEFM    'MERGE'
      45                     
0457  20657272  00868         DEFM    ' error'
      6F 72                  
045D  16        00869         DEFB    16H
045E  56657269  00870         DEFM    'Verification has failed'
      66 69 63 61 74 69 6F 6E
      20 68 61 73 20 66 61 69
      6C 65 64               
0475  17        00871         DEFB    17H
0476  57726F6E  00872         DEFM    'Wrong file type'
      67 20 66 69 6C 65 20 74
      79 70 65               
0485  18        00873         DEFB    18H
                00874 *INCLUDE SH_SYNTAX.S
                00875 ;
                00876 ;**************************************************************
                00877 ;
                00878 ;                    SYNTAX/INTERPRETER MODULE
                00879 ;
                00880 ;**************************************************************
                00881 
                00882 ;       GLOBAL S_CAT
                00883 ;       GLOBAL S_FORM
                00884 ;       GLOBAL S_MOVE
                00885 ;       GLOBAL S_ERAS
                00886 ;       GLOBAL S_OPEN
                00887 ;       GLOBAL END1,ST_END,N_CHEK,N_NAME
                00888 ;       GLOBAL LETT,END_ER,COMM,MNCHEK
                00889 ;       GLOBAL S_CLS
                00890 ;       GLOBAL S_CLR
                00891 ;       EXTERNAL RETBAS
                00892 ;       EXTERNAL ACT_FT, ACT_OT
                00893 ;       EXTERNAL ACT_FM, ACT_OM
                00894 ;       EXTERNAL ACT_ON
                00895 ;       EXTERNAL ACT_CA, ACT_ER, ACT_MO
                00896 ;       EXTERNAL        CL_STR
                00897 
                00898 
                00899 ;______________________________________________________________________
                00900 
                00901 S_CAT           ; CONSIDER A 'CAT' STATEMENT
0486  21D85C    00902         LD      HL,DR+S_STR1                    ; STREAM SYS. VARS.
0489  3602      00903         LD      (HL),02H                        ; BY DEFAULT STREAM 02H
048B  D7        00904         RST     CALBAS
048C  2000      00905         DEFW    0020H                           ; STEP ON
048E  FE0D      00906         CP      0DH                             ; END OF LINE
0490  2802      00907         JR      Z,S_CAT1
0492  FE3A      00908         CP      3AH                             ; END OF STATEMENT?
0494  CA8306    00909 S_CAT1  JP      Z,MDN_ER                        ; 'MISSING DRIVE NUMBER'  (RUN-TIME ERROR ONLY)
0497  FE23      00910         CP      23H                             ; HASH?
0499  200B      00911         JR      NZ,S_CAT2
049B  CD4E06    00912         CALL    N_STR                           ; FETCH THE 'NEXT' STREAM NUMBER        
049E  CDB105    00913         CALL    COMM                            ; INSIST ON A SEPARATOR
04A1  200F      00914         JR      NZ,END_ER
04A3  D7        00915         RST     CALBAS
04A4  2000      00916         DEFW    0020H                           ; STEP ON
04A6  CD1E06    00917 S_CAT2  CALL    NUMB_                           ; FETCH A NUMBER
04A9  CDB705    00918         CALL    ST_END                          ; INSIST THE STATEMENT FINISHES
                00919                                                 ; CAT RUN-TIME
04AC  CD6D06    00920         CALL    DR_CHK                          ; CHECK IT IS IN RANGE FOR A DRIVE NUMBER
04AF  C3701E    00921         JP      ACT_CA                          ; ACT ON THE 'CAT' STATEMENT
                00922 ;______________________________________________________________________
                00923 
04B2  E7        00924 END_ER  RST     SH_ERR
04B3  00        00925         DEFB    00H                             ; 'NONSENSE IN BASIC'
                00926 ;______________________________________________________________________
                00927 
                00928 S_FORM          ; CONSIDER A 'FORMAT' STATEMENT
04B4  CDF205    00929         CALL    N_LETT                          ; FIND THE 'NEXT' LETTER & A NUMBER IF PRESENT
04B7  CDB105    00930         CALL    COMM                            ; LOOK FOR A SEPARATOR
04BA  2003      00931         JR      NZ,S_FOR1                       ; JUMP IF NO MORE
04BC  CD2F06    00932         CALL    N_NAME                          ; FIND THE 'NEXT' NAME
04BF  CDB705    00933 S_FOR1  CALL    ST_END                          ; INSIST THE STATEMENT ENDS
                00934 
                00935                 ; FORMAT RUN_TIME
04C2  3AD95C    00936         LD      A,(DR+L_STR1)                   ; FETCH THE LETTER
04C5  FE54      00937         CP      54H                             ; IS IT 'T' ?
04C7  2804      00938         JR      Z,S_FOR2
04C9  FE42      00939         CP      42H                             ; IS IT 'B' ?
04CB  2006      00940         JR      NZ,S_FOR3
04CD  CDB006    00941 S_FOR2  CALL    B_CHEK                          ; CHECK THE BAUD RATE SPECIFIED
04D0  C3C90A    00942         JP      ACT_FT                          ; ACT ON ' FORMAT "T" ' & ' FORMAT "B" '
                00943 
                00944 
04D3  FE4E      00945 S_FOR3  CP      4EH                             ; IS IT 'N' ?
04D5  2010      00946         JR      NZ,S_FOR4
04D7  CD8F06    00947         CALL    N_CHEK                          ; CHECK THE STATION NUMBER
04DA  3AD65C    00948         LD      A,(DR+D_STR1)                   ; FETCH NET NUMBER
04DD  A7        00949         AND     A
04DE  CA9F06    00950         JP      Z,ISN_ER                        ; DO NOT ALLOW - FORMAT "N",0
04E1  32C55C    00951         LD      (DR+NTSTAT),A                   ; GIVE OWN STATION A NEW NUMBER
04E4  C3C105    00952         JP      END1
                00953 
04E7  CD8506    00954 S_FOR4  CALL    MNCHEK                          ; IS IT ' "M",DRIVE NUMBER,FILENAME' ?
04EA  C3751E    00955         JP      ACT_FM                          ; ACT ON ' FORMAT "M",DRIVE NUMBER, FILENAME '
                00956 
                00957 ;______________________________________________________________________
                00958 
                00959 
                00960 
                00961 
                00962 S_OPEN          ; CONSIDER AN 'OPEN' STATEMENT
04ED  CD4E06    00963         CALL    N_STR                           ; FIND THE 'NEXT' STREAM NUMBER
04F0  CDB105    00964         CALL    COMM                            ; INSIST ON THE SEPARATOR
04F3  20BD      00965         JR      NZ,END_ER
04F5  CDF205    00966         CALL    N_LETT                          ; FIND THE 'NEXT' LETTER & NUMBER (IF PRESENT)
04F8  CDB105    00967         CALL    COMM                            ; IS THERE A SEPARATOR?
04FB  2003      00968         JR      NZ,S_OP1
04FD  CD2F06    00969         CALL    N_NAME                          ; FIND THE 'NEXT' NAME
0500  CDB705    00970 S_OP1   CALL    ST_END                          ; INSIST THE STATEMENT ENDS
                00971 
                00972                 ; OPEN RUN-TIME
0503  3AD85C    00973         LD      A,(DR+S_STR1)                   ; FETCH STREAM NUMBER
0506  D7        00974         RST     CALBAS
0507  2717      00975         DEFW    1727H                           ; FETCH STREAM OFFSET
0509  211100    00976         LD      HL,0011H                        ; CLOSED STREAMS HAVE 0000H
                00977                         ; PERMANENT STREAMS HAVE 0000H - 0010H
050C  A7        00978         AND     A
050D  ED42      00979         SBC     HL,BC                           ; TEST IF CLOSED BUT NOT A PERMANENT
050F  381E      00980         JR      C,SAO_ER
0511  3AD95C    00981         LD      A,(DR+L_STR1)                   ; FETCH THE LETTER
0514  FE54      00982         CP      54H                             ; IS IT 'T' ?
0516  2804      00983         JR      Z,S_OP2
0518  FE42      00984         CP      42H                             ; IS IT 'B' ?
051A  2003      00985         JR      NZ,S_OP3
051C  C3470B    00986 S_OP2   JP      ACT_OT                          ; ACT ON ' OPEN STREAM,"T" ' & ' OPEN STREAM,"B" '
051F  FE4E      00987 S_OP3   CP      4EH                             ; IS IT 'N' ?
0521  2006      00988         JR      NZ,S_OP4
0523  CD8F06    00989         CALL    N_CHEK                          ; CHECK THE STATION NUMBER
0526  C3A30E    00990         JP      ACT_ON                          ; ACT ON ' OPEN STREAM,"N",STATION NUMBER '
0529  CD8506    00991 S_OP4   CALL    MNCHEK                          ; IS IT ' "M",DRIVE NUMBER,FILENAME '?
052C  C37A1E    00992         JP      ACT_OM                          ; ACT ON ' OPEN STREAM,"M",DRIVE NUMBER,FILENAME
                00993 
052F  E7        00994 SAO_ER  RST     SH_ERR
0530  0B        00995         DEFB    0BH                             ; 'STREAM ALREADY OPEN'
                00996 ;______________________________________________________________________
                00997 
                00998 
                00999 
                01000 
                01001 S_ERAS          ; CONSIDER AN 'ERASE' STATEMENT
0531  CDA306    01002         CALL    NLETNN                          ; FIND 'LETTER, NUMBER & NAME '
0534  CDB705    01003         CALL    ST_END                          ; INSIST THE STATEMENT ENDS
                01004 
                01005                 ; ERASE RUN-TIME
0537  CD8506    01006         CALL    MNCHEK                          ; IS IT 'M',DRIVE NUMBER,NAME
053A  C3661E    01007         JP      ACT_ER                          ; ACT ON ' ERASE "M",DRIVE NUMBER,FILENAME '
                01008 
                01009 ;______________________________________________________________________
                01010 
                01011 
                01012 
                01013 S_MOVE          ; CONSIDER A MOVE STATEMENT
053D  CDB906    01014         CALL    ST_V_F                          ; STREAM OR FILE?
0540  CD9F05    01015         CALL    SV_1_2                          ; SWITCH OVER THE SETS
0543  D7        01016         RST     CALBAS
0544  1800      01017         DEFW    0018H                           ; FETCH PRESENT CHARACTER
0546  FECC      01018         CP      0CCH                            ; IS IS 'TO' ?
0548  203A      01019         JR      NZ,SC_ERR
054A  CDB906    01020         CALL    ST_V_F                          ; AGAIN STREAM OR FILE?
054D  CD9F05    01021         CALL    SV_1_2                          ; SWITCH BACK THE SETS
0550  D7        01022         RST     CALBAS
0551  1800      01023         DEFW    0018H                           ; GET PRESENT CHARACTER
0553  CDB705    01024         CALL    ST_END                          ; INSIST STATEMENT ENDS
                01025 
                01026                 ; MOVE RUN-TIME
0556  C36B1E    01027         JP      ACT_MO
                01028 
                01029 ;______________________________________________________________________
                01030 
                01031 
                01032 
                01033 S_CLS           ; GIVES DEFAULT SCREEN
0559  D7        01034         RST     CALBAS
055A  2000      01035         DEFW    0020H                           ; STEP ON
055C  FE23      01036         CP      23H                             ; 'HASH' CHARACTER
055E  2024      01037         JR      NZ,SC_ERR
0560  D7        01038         RST     CALBAS
0561  2000      01039         DEFW    0020H                           ; STEP ON PAST 'HASH'
0563  CDB705    01040         CALL    ST_END                          ; STATEMENT MUST END HERE
                01041 
                01042                 ; CLS C RUN-TIME
0566  213800    01043         LD      HL,0038H
0569  228D5C    01044         LD      (ATTR_P),HL                     ; SET PERMANENTS
056C  228F5C    01045         LD      (ATTR_T),HL                     ; SET TEMPORARIES
056F  FD750E    01046         LD      (IY+BORDCR-Y),L                 ; SET BORDER
0572  FD7457    01047         LD      (IY+P_FLAG-Y),H                 ; CLEAR ALL FLAGS IN P_FLAG
0575  3E07      01048         LD      A,07H
0577  D3FE      01049         OUT     (0FEH),A                        ; BORDER IS MADE WHITE BEFORE THE SCREEN IS CLEARED
0579  D7        01050         RST     CALBAS
057A  6B0D      01051         DEFW    0D6BH                           ; CLEAR THE SCREEN GIVING THE ORIGINAL COLOURS
057C  C3C105    01052         JP      END1
                01053 
                01054 
                01055 ;______________________________________________________________________
                01056 
                01057 
                01058 S_CLR           ; CLEAR ALL STREAMS
057F  D7        01059         RST     CALBAS 
0580  2000      01060         DEFW    0020H                           ; STEP ON
0582  FE23      01061         CP      23H                             ; HASH?
0584  C2B204    01062 SC_ERR  JP      NZ,END_ER
0587  D7        01063         RST     CALBAS
0588  2000      01064         DEFW    0020H                           ; STEP PAST THE HASH
058A  CDB705    01065         CALL    ST_END                          ; STATEMENT MUST END HERE
                01066 
                01067 
                01068                 ; CLEAR # RUN-TIME
                01069                                                 ; CLOSE ALL STREAMS
058D  AF        01070         XOR     A                               ; START WITH STREAM ZERO
058E  F5        01071 S_CLR1  PUSH    AF                              ; SAVE COUNTER
058F  FDCB7CCE  01072         SET     1,(IY+FLAGS3-Y)                 ; TO TELL CL_STR JUST TO DELETE
0593  CD1817    01073         CALL    CL_STR
0596  F1        01074         POP     AF
0597  3C        01075         INC     A
0598  FE10      01076         CP      10H                             ; ALL STREAMS DONE?
059A  38F2      01077         JR      C,S_CLR1
059C  C3C105    01078         JP      END1
                01079 
                01080 ;______________________________________________________________________
                01081 
059F  21D65C    01082 SV_1_2  LD      HL,DR+D_STR1                    ; FIRST OF THE EIGHT SYS. VARS.
05A2  11DE5C    01083         LD      DE,DR+D_STR2                    ; SECOND SET BASE ADDRESS
05A5  0608      01084         LD      B,08H                           ; THERE ARE 8 SYS. VARS. TO BE SWITCHED
05A7  1A        01085 SVA     LD      A,(DE)                          ; FETCH ONE
05A8  4E        01086         LD      C,(HL)                          ; AND ANOTHER
05A9  77        01087         LD      (HL),A                          ; STORE ONE
05AA  79        01088         LD      A,C
05AB  12        01089         LD      (DE),A                          ; AND ANOTHER
05AC  23        01090         INC     HL
05AD  13        01091         INC     DE                              ; STEP ON
05AE  10F7      01092         DJNZ    SVA                             ; ROUND FOR 8 PASSES
05B0  C9        01093         RET
                01094 
                01095 ;______________________________________________________________________
                01096 
                01097 
                01098 
                01099 
                01100 
                01101 COMM                                            ; LOOK AT THE PRESENT CHARACTER
                01102                                                 ; Z IS A COMMA OR A SEMI-COLON
05B1  FE2C      01103         CP      2CH                             ; IS IT A COMMA?
05B3  C8        01104         RET     Z
05B4  FE3B      01105         CP      3BH                             ; IS IT A SEMI-COLON?
05B6  C9        01106         RET
                01107 
                01108 ST_END          ; CHECK A STATEMENT IS ENDED
05B7  FE0D      01109         CP      0DH                             ; CARRIAGE RETURN?
05B9  2804      01110         JR      Z,ST_E1
05BB  FE3A      01111         CP      3AH                             ; COLON?
05BD  20C5      01112         JR      NZ,SC_ERR
                01113 
05BF  DF        01114 ST_E1   RST     SYNT
05C0  C0        01115         RET     NZ                              ; IN RUN-TIME RETURN TO A RUN MODULE
                01116 
                01117 
                01118 END1            ; RETURN AFTER RUN-TIME OR SYNTAX TIME
05C1  ED7B3D5C  01119         LD      SP,(ERR_SP)                     ; DROP THE MACHINE STACK
05C5  FD3600FF  01120         LD      (IY+ERR_NR-Y),0FFH              ; NO ERROR AFTER ALL
05C9  21F41B    01121         LD      HL,1BF4H                        ; RETURN ADDRESS IN SYNTAX TIME
05CC  DF        01122         RST     SYNT
05CD  2811      01123         JR      Z,ENDSYN                        ; JUMP FORWARD IF CHECKING SYNTAX
                01124 
05CF  3E7F      01125         LD      A,7FH                           ; ELSE CHECK THE BREAK KEY
05D1  DBFE      01126         IN      A,(0FEH)
05D3  1F        01127         RRA
05D4  3807      01128         JR      C,END2
05D6  3EFE      01129         LD      A,0FEH
05D8  DBFE      01130         IN      A,(0FEH)
05DA  1F        01131         RRA
05DB  3005      01132         JR      NC,BREAKL                       ; JUMP IF BREAK PRESSED
                01133 
05DD  217D1B    01134 END2    LD      HL,1B7DH                        ; RETURN ADDRESS IN RUN-TIME
05E0  E5        01135 ENDSYN  PUSH    HL
05E1  C7        01136         RST     R_BASE                          ; EXIT
                01137 
                01138 
05E2  FD360014  01139 BREAKL  LD      (IY+ERR_NR-Y),14H
05E6  EF        01140         RST     ROMERR                          ; 'BREAK INTO PROGRAM'
                01141 
                01142 
05E7  D7        01143 EXP     RST     CALBAS
05E8  8C1C      01144         DEFW    1C8CH                           ; FETCH A STRING EXPRESSION
05EA  DF        01145         RST     SYNT
05EB  C8        01146         RET     Z                               ; BACK IN SYNTAX TIME
05EC  F5        01147         PUSH    AF
05ED  D7        01148         RST     CALBAS
05EE  F12B      01149         DEFW    2BF1H                           ; POPSTR
05F0  F1        01150         POP     AF
05F1  C9        01151         RET                                     ; BC - LENGTH,  DE - START
                01152 
                01153 
                01154 N_LETT          ; NEXT LETTER
05F2  D7        01155         RST     CALBAS
05F3  2000      01156         DEFW    0020H                           ; STEP ON
                01157 
                01158 LETT            ; LETTER
05F5  CDE705    01159         CALL    EXP
05F8  2812      01160         JR      Z,LETT_N                        ; JUMP FORWARD IN SYNTAX TIME  - FOR A NUMBER
05FA  F5        01161         PUSH    AF                              ; SAVE FLAG
05FB  79        01162         LD      A,C
05FC  3D        01163         DEC     A
05FD  B0        01164         OR      B
05FE  202D      01165         JR      NZ,IDE_ER                       ; LENGTH MUST BE '1'
0600  1A        01166         LD      A,(DE)                          ; FETCH CODE
0601  D7        01167         RST     CALBAS
0602  8D2C      01168         DEFW    2C8DH                           ; IS IT A LETTER
0604  3027      01169         JR      NC,IDE_ER
0606  E6DF      01170         AND     0DFH                            ; FORCE IT TO UPPER CASE
0608  32D95C    01171         LD      (DR+L_STR1),A                   ; YES - SO KEEP IT
060B  F1        01172         POP     AF                              ; FLAG BACK
060C  FE0D      01173 LETT_N  CP      0DH                             ; END OF LINE?
060E  C8        01174         RET     Z
060F  FE3A      01175         CP      3AH                             ; END OF STATEMENT?
0611  C8        01176         RET     Z
0612  FEA5      01177         CP      0A5H                            ; NO NUMBER IF A TOKEN IS FOUND
0614  D0        01178         RET     NC
                01179                 ; THEREFORE A NUMBER TO FOLLOW
0615  CDB105    01180         CALL    COMM                            ; LOOK FOR THE SEPARATOR
0618  C2B204    01181         JP      NZ,END_ER
061B  D7        01182         RST     CALBAS
061C  2000      01183         DEFW    0020H                           ; STEP ON
061E  D7        01184 NUMB_   RST     CALBAS
061F  821C      01185         DEFW    1C82H                           ; FIND A NUMERICAL EXPRESSION
0621  DF        01186         RST     SYNT
0622  C8        01187         RET     Z                               ; RETURN IN SYNTAX TIME
0623  F5        01188         PUSH    AF
0624  D7        01189         RST     CALBAS
0625  991E      01190         DEFW    1E99H                           ; NUMBER TO BC
0627  ED43D65C  01191         LD      (DR+D_STR1),BC                  ; STORE NUMBER
062B  F1        01192         POP     AF
062C  C9        01193         RET                                     ; FINISHED
                01194 
                01195 
062D  E7        01196 IDE_ER  RST     SH_ERR
062E  02        01197         DEFB    2                               ; 'INVALID DEVICE EXPRESSION'
                01198 
                01199 
                01200 N_NAME          ; FIND THE NEXT NAME
062F  D7        01201         RST     CALBAS
0630  2000      01202         DEFW    0020H                           ; STEP ON
0632  CDE705    01203         CALL    EXP                             ; FETCH A STRING EXPRESSION
0635  C8        01204         RET     Z
0636  F5        01205         PUSH    AF
0637  79        01206         LD      A,C
0638  B0        01207         OR      B
0639  2811      01208         JR      Z,IN_ER                         ; MUST NOT BE NULL
063B  210A00    01209         LD      HL,000AH
063E  ED42      01210         SBC     HL,BC
0640  380A      01211         JR      C,IN_ER                         ; MUST NOT BE OVER TEN LETTERS
0642  ED43DA5C  01212         LD      (DR+N_STR1),BC                  ; SAVE LENGTH
0646  ED53DC5C  01213         LD      (DR+N_STR1+2),DE                ; SAVE START
064A  F1        01214         POP     AF
064B  C9        01215         RET
                01216 
064C  E7        01217 IN_ER   RST     SH_ERR
064D  03        01218         DEFB    3                               ; 'INVALID NAME'
                01219 
                01220 N_STR           ; FIND THE NEXT STREAM NUMBER
064E  D7        01221         RST     CALBAS
064F  2000      01222         DEFW    0020H                           ; STEP ON
0651  D7        01223         RST     CALBAS
0652  821C      01224         DEFW    1C82H                           ; FIND A NUMBER
0654  DF        01225         RST     SYNT
0655  C8        01226         RET     Z                               ; BACK IN SYNTAX TIME
0656  F5        01227         PUSH    AF
0657  D7        01228         RST     CALBAS
0658  941E      01229         DEFW    1E94H                           ; NUMBER INTO 'A'
065A  FE10      01230         CP      10H
065C  3005      01231         JR      NC,STR_ER
065E  32D85C    01232         LD      (DR+S_STR1),A                   ; STORE IT
0661  F1        01233         POP     AF
0662  C9        01234         RET
                01235 
0663  E7        01236 STR_ER  RST     SH_ERR
0664  01        01237         DEFB    1                               ; 'INVALID STREAM NUMBER'
                01238 
                01239 
                01240 M_CHEK          ; CHECK THE "M" & THE DRIVE NUMBER
0665  3AD95C    01241         LD      A,(DR+L_STR1)                   ; FETCH THE LETTER
0668  FE4D      01242         CP      4DH                             ; IS IT "M" ?
066A  C22D06    01243         JP      NZ,IDE_ER
066D  ED5BD65C  01244 DR_CHK  LD      DE,(DR+D_STR1)                  ; FETCH THE NUMBER
0671  7B        01245         LD      A,E
0672  B2        01246         OR      D
0673  280C      01247         JR      Z,IDN_ER                        ; 'INVALID DRIVE NUMBER'
0675  13        01248         INC     DE
0676  7B        01249         LD      A,E
0677  B2        01250         OR      D
0678  2809      01251         JR      Z,MDN_ER                        ; DRIVE NUMBER MUST NOT BE FFFFH
067A  1B        01252         DEC     DE
067B  210800    01253         LD      HL,0008H
067E  ED52      01254         SBC     HL,DE
0680  D0        01255         RET     NC
                01256 
0681  E7        01257 IDN_ER  RST     SH_ERR
0682  04        01258         DEFB    4                               ; 'INVALID DRIVE NUMBER'
                01259 
0683  E7        01260 MDN_ER  RST     SH_ERR
0684  08        01261         DEFB    08H                             ; 'MISSING DRIVE NUMBER'
                01262 
                01263 
                01264 MNCHEK          ; CHECK THE "M", A DRIVE NUMBER & A NAME ARE ALL GIVEN
0685  CD6506    01265         CALL    M_CHEK
0688  3ADB5C    01266         LD      A,(DR+N_STR1+1)                 ; FETCH THE HIGH LENGTH BYTE OF THE NAME
068B  A7        01267         AND     A
068C  C8        01268         RET     Z                               ; RETURN IF NAME GIVEN
                01269 
068D  E7        01270 MN_ER   RST     SH_ERR
068E  06        01271         DEFB    6                               ; 'MISSING NAME'
                01272 
                01273 N_CHEK          ; CHECK THE STATION NUMBER
068F  ED5BD65C  01274         LD      DE,(DR+D_STR1)                  ; FETCH THE NUMBER
0693  13        01275         INC     DE
0694  7B        01276         LD      A,E
0695  B2        01277         OR      D
0696  2809      01278         JR      Z,MSN_ER                        ; NUMBER NOT TO BE FFFFH
0698  1B        01279         DEC     DE
0699  214000    01280         LD      HL,0040H
069C  ED52      01281         SBC     HL,DE
069E  D0        01282         RET     NC                              ; STATION NUMBER RANGE IS 01H - 40H
                01283 
069F  E7        01284 ISN_ER  RST     SH_ERR
06A0  05        01285         DEFB    5                               ; 'INVALID STATION NUMBER'
                01286 
06A1  E7        01287 MSN_ER  RST     SH_ERR
06A2  07        01288         DEFB    7                               ; 'MISSING STATION NUMBER'
                01289 
                01290 NLETNN          ; FIND THE NEXT LETTER, NUMBER (IF PRESENT) & NAME
06A3  CDF205    01291         CALL    N_LETT                          ; LETTER & NUMBER (IF GIVEN)
06A6  CDB105    01292         CALL    COMM                            ; THERE MUST BE A SEPARATOR
06A9  C2B204    01293         JP      NZ,END_ER
06AC  CD2F06    01294         CALL    N_NAME                          ; FIND THE NAME
06AF  C9        01295         RET
                01296 
06B0  2AD65C    01297 B_CHEK  LD      HL,(DR+D_STR1)                  ; FETCH NUMBER
06B3  23        01298         INC     HL
06B4  7D        01299         LD      A,L
06B5  B4        01300         OR      H
06B6  C0        01301         RET     NZ                              ; RETURN IF NUMBER PRESENT
                01302 
06B7  E7        01303 MBR_ER  RST     SH_ERR
06B8  09        01304         DEFB    9                               ; 'MISSING BAUD RATE'
                01305 
                01306 ST_V_F          ; ARE THE DETAILS A STREAM OR A FILE?
06B9  D7        01307         RST     CALBAS
06BA  2000      01308         DEFW    0020H                           ; STEP ON
06BC  FE23      01309         CP      23H                             ; A 'HASH'?
06BE  CA4E06    01310         JP      Z,N_STR                         ; IF SO - IT IS A STREAM
                01311 
                01312 ;               ELSE FIND THE FILE DETAILS
06C1  CDF505    01313         CALL    LETT                            ; FIND LETTER & NUMBER (IF PRESENT)
06C4  CDB105    01314         CALL    COMM                            ; IS THERE A SEPARATOR?
06C7  2003      01315         JR      NZ,STVF1                        ; FORWARD IF NOT
06C9  CD2F06    01316         CALL    N_NAME                          ; FIND THE NEXT NAME
06CC  DF        01317 STVF1   RST     SYNT
06CD  C8        01318         RET     Z                               ; BACK IN SYNTAX TIME
                01319                 ; ST_V_F                RUN MODULE
06CE  3AD95C    01320         LD      A,(DR+L_STR1)                   ; FETCH THE LETTER
06D1  FE54      01321         CP      54H                             ; IS IT "T" ?
06D3  C8        01322         RET     Z
06D4  FE42      01323         CP      42H                             ; IS IT "B" ?
06D6  C8        01324         RET     Z
06D7  FE4E      01325         CP      4EH                             ; IS IT "N" ?
06D9  CA8F06    01326         JP      Z,N_CHEK                        ; RETURN AFTER CHECKING STATION NUMBER SPECIFIED
06DC  C38506    01327         JP      MNCHEK                          ; FINALLY CHECK FOR "M",DRIVE NUMBER & NAME
                01328 *INCLUDE SH_RETURN.S
                01329 ;
                01330 ;**************************************************
                01331 ;
                01332 ;                  RETURN MODULE
                01333 ;
                01334 ;**************************************************
                01335 
                01336 
                01337 ;       GLOBAL RETBAS
                01338 
                01339         ORG     0700H
0700  C9        01340 RETBAS  RET                                     ; COPY OF INSTRUCTION IN BASE ROM
                01341 
                01342 
                01343 *INCLUDE SH_SAVE.S
                01344 ;
                01345 ;***********************************************************************
                01346 ;
                01347 ;                       SAVE, LOAD, VERIFY & MERGE MODULE    - SH_SAVE.S
                01348 ;
                01349 ;***********************************************************************
                01350 
                01351 
                01352 
                01353 ;       GLOBAL S_SAVE, S_LOAD, S_VERI, S_MERG
                01354 ;       GLOBAL SLVMEX
                01355 ;       GLOBAL  H_SORT,T_PR_1
                01356 ;       EXTERNAL GET_BL, LD_CON
                01357 ;       EXTERNAL IN_BYT,IN_BYP
                01358 ;       EXTERNAL NTEMP
                01359 ;       EXTERNAL OUT_N, OUT_T2
                01360 ;       EXTERNAL NTCLSE
                01361 ;       EXTERNAL ACT_SA, GET_HD, GETMBL, CLOSIX
                01362 ;       EXTERNAL END_ER, COMM, MNCHEK
                01363 ;       EXTERNAL LETT,N_NAME,N_CHEK,ST_END,END1
                01364 ;       EXTERNAL        DELTMP
                01365 
                01366 ;_________________________________________________________________________
                01367 
                01368 
                01369 SCANN           ; SCANNING SUBROUTINE FOR SAVE, LOAD, VERIFY & MERGE
0701  D7        01370         RST     CALBAS
0702  2000      01371         DEFW    0020H                           ; STEP ON
0704  FE2A      01372         CP      2AH                             ; THE SEPARATOR - * -
0706  2034      01373         JR      NZ,_SC_ERR                      ; *
0708  D7        01374         RST     CALBAS
0709  2000      01375         DEFW    0020H                           ; STEP PAST THE SEPARATOR
070B  CDF505    01376         CALL    LETT                            ; FETCH THE LETTER & A NUMBER (IF PRESENT)
070E  CDB105    01377         CALL    COMM                            ; IS THERE A SEPARATOR?
0711  2003      01378         JR      NZ,SCAN_0
0713  CD2F06    01379         CALL    N_NAME                          ; PICK UP THE NAME
                01380 SCAN_0
0716  F5        01381         PUSH    AF                              ; SAVE CURRENT CHARACTER
0717  3AD95C    01382         LD      A,(DR+L_STR1)                   ; GET THE LETTER
071A  FE4E      01383         CP      4EH                             ; IS IT 'N' ?
071C  2004      01384         JR      NZ,SCANN_1
071E  FDCB7CDE  01385         SET     3,(IY+FLAGS3-Y)                 ; SET THE 'NETWORK' FLAG
                01386                                                 ; IS THERE ANYTHING ELSE?
0722  F1        01387 SCANN_1 POP     AF                              ; RETRIEVE CODE
0723  FE0D      01388         CP      0DH                             ; END OF LINE
0725  2829      01389         JR      Z,T_PROG
0727  FE3A      01390         CP      3AH                             ; END OF STATEMENT
0729  2825      01391         JR      Z,T_PROG
072B  FEAA      01392         CP      0AAH                            ; SCREEN$?
072D  2842      01393         JR      Z,T_SCRE
072F  FEAF      01394         CP      0AFH                            ; CODE?
0731  2856      01395         JR      Z,T_CODE
0733  FECA      01396         CP      0CAH                            ; LINE?
0735  2807      01397         JR      Z,T_LINE
0737  FEE4      01398         CP      0E4H                            ; DATA?
0739  CAD207    01399         JP      Z,T_DATA
                01400 
073C  E7        01401 _SC_ERR RST     SH_ERR                          ; *
073D  00        01402         DEFB    00H                             ; 'NONSENSE IN BASIC'
                01403 
                01404 
                01405 ;______________________________________________________________________
                01406 
                01407 
073E  D7        01408 T_LINE  RST     CALBAS
073F  2000      01409         DEFW    0020H                           ; STEP ON
0741  D7        01410         RST     CALBAS
0742  821C      01411         DEFW    1C82H                           ; FETCH THE LINE NUMBER
0744  CDB705    01412         CALL    ST_END                          ; STATEMENT TO FINISH HERE
                01413 
                01414                 ; RUN-TIME
0747  D7        01415         RST     CALBAS
0748  991E      01416         DEFW    1E99H                           ; UNSTACK THE LINE NUMBER
074A  ED43ED5C  01417         LD      (DR+HD_11),BC                   ; STORE THE LINE NUMBER
074E  1803      01418         JR      T_PR_1
                01419 
                01420 ;______________________________________________________________________
                01421 
0750  CDB705    01422 T_PROG  CALL    ST_END                          ; STATEMENT MUST FINISH HERE
                01423 
                01424                 ; T_PROG RUN-TIME
                01425 
0753  AF        01426 T_PR_1  XOR     A
0754  32E65C    01427         LD      (DR+HD_00),A                    ; PROGRAMS ARE OF TYPE '0'
0757  2A595C    01428         LD      HL,(E_LINE)
075A  ED5B535C  01429         LD      DE,(PROG)
075E  ED53E95C  01430         LD      (DR+HD_0D),DE                   ; START IS 'PROG'
0762  37        01431         SCF
0763  ED52      01432         SBC     HL,DE
0765  22E75C    01433         LD      (DR+HD_0B),HL                   ; SAVE THE 'PROGRAM & VARIABLES' LENGTH
0768  2A4B5C    01434         LD      HL,(VARS)
076B  ED52      01435         SBC     HL,DE
076D  22EB5C    01436         LD      (DR+HD_0F),HL                   ; SAVE THE 'PROGRAM' LENGTH
0770  C9        01437         RET
                01438 
                01439 ;______________________________________________________________________
                01440 
0771  D7        01441 T_SCRE  RST     CALBAS
0772  2000      01442         DEFW    0020H                           ; STEP ON
0774  CDB705    01443         CALL    ST_END                          ; STATEMENT TO FINISH HERE
                01444 
                01445                 ; SCREEN$ RUN-TIME
0777  21001B    01446         LD      HL,1B00H                        ; SIZE OF SCREEN
077A  22E75C    01447         LD      (DR+HD_0B),HL
077D  210040    01448         LD      HL,4000H                        ; START ADDRESS
0780  22E95C    01449         LD      (DR+HD_0D),HL
0783  3E03      01450         LD      A,03H                           ; SCREEN$ IS TYPE '3'
0785  32E65C    01451         LD      (DR+HD_00),A
0788  C9        01452         RET
                01453 
                01454 
                01455 ;______________________________________________________________________
0789  D7        01456 T_CODE  RST     CALBAS
078A  2000      01457         DEFW    0020H                           ; STEP ON
078C  FE0D      01458         CP      0DH
078E  280A      01459         JR      Z,T_C1
0790  FE3A      01460         CP      3AH
0792  200B      01461         JR      NZ,T_C2
0794  FDCB7C6E  01462         BIT     5,(IY+FLAGS3-Y)                 ; USING 'SAVE'?
0798  20A2      01463         JR      NZ,_SC_ERR                      ; * ERROR IF YES
079A  D7        01464 T_C1    RST     CALBAS
079B  E61C      01465         DEFW    1CE6H                           ; STACK A ZERO
079D  1808      01466         JR      T_C3
079F  D7        01467 T_C2    RST     CALBAS
07A0  821C      01468         DEFW    1C82H                           ; GET FIRST NUMBER
07A2  CDB105    01469         CALL    COMM                            ; LOOK FOR A SEPARATOR
07A5  280B      01470         JR      Z,T_C4
07A7  FDCB7C6E  01471 T_C3    BIT     5,(IY+FLAGS3-Y)                 ; USING 'SAVE' ?
07AB  208F      01472         JR      NZ,_SC_ERR                      ; * ERROR IF YES
07AD  D7        01473         RST     CALBAS
07AE  E61C      01474         DEFW    1CE6H                           ; STACK THE 'SECOND' ZERO
07B0  1806      01475         JR      T_C5
07B2  D7        01476 T_C4    RST     CALBAS
07B3  2000      01477         DEFW    0020H                           ; STEP ON
07B5  D7        01478         RST     CALBAS
07B6  821C      01479         DEFW    1C82H                           ; GET SECOND NUMBER
07B8  D7        01480 T_C5    RST     CALBAS
07B9  1800      01481         DEFW    0018H
07BB  CDB705    01482         CALL    ST_END                          ; STATEMENT FINISHES HERE
                01483 
                01484                 ; CODE RUN-TIME
07BE  D7        01485         RST     CALBAS
07BF  991E      01486         DEFW    1E99H                           ; UNSTACK SECOND NUMBER
07C1  ED43E75C  01487         LD      (DR+HD_0B),BC                   ; STORE LENGTH
07C5  D7        01488         RST     CALBAS
07C6  991E      01489         DEFW    1E99H                           ; UNSTACK FIRST NUMBER
07C8  ED43E95C  01490         LD      (DR+HD_0D),BC                   ; STORE START
07CC  3E03      01491         LD      A,03H
07CE  32E65C    01492         LD      (DR+HD_00),A                    ; CODE IS TYPE '3'
07D1  C9        01493         RET
                01494 
                01495 
                01496 ;______________________________________________________________________
                01497 
07D2  FDCB7C76  01498 T_DATA  BIT     6,(IY+FLAGS3-Y)                 ; USING 'MERGE' ?
07D6  2802      01499         JR      Z,T_D1
                01500 
07D8  E7        01501         RST     SH_ERR
07D9  14        01502         DEFB    014H                            ; 'MERGE' ERROR
                01503 ;
07DA  D7        01504 T_D1    RST     CALBAS
07DB  2000      01505         DEFW    0020H                           ; STEP ON PAST 'DATA'
                01506 
07DD  D7        01507         RST     CALBAS
07DE  B228      01508         DEFW    28B2H                           ; SCAN THE NEXT EXPRESSION
07E0  CBF9      01509         SET     7,C                             ; BIT 7,C IS A SYNTAX/RUN BIT
                01510                                                 ; AND NEEDS RESETTING FOR 'ARRAYS'
                01511 
07E2  300E      01512         JR      NC,T_D2                         ; JUMP IS AN EXISTING VARIABLES
                01513 
07E4  210000    01514         LD      HL,0000H                        ; CLEAR THE BASE ADDRESS
07E7  FDCB7C66  01515         BIT     4,(IY+FLAGS3-Y)
07EB  2021      01516         JR      NZ,T_D5                         ; JUMP IS USING 'LOAD'
                01517 
07ED  FD360001  01518         LD      (IY+ERR_NR-Y),01H
07F1  EF        01519         RST     ROMERR                          ; 'VARIABLE NOT FOUND'
                01520 
07F2  2802      01521 T_D2    JR      Z,T_D3
                01522 
07F4  E7        01523 T_DERR  RST     SH_ERR
07F5  00        01524         DEFB    00H                             ; 'NONSENSE IN BASIC'
                01525 
07F6  DF        01526 T_D3    RST     SYNT
07F7  2823      01527         JR      Z,T_D7                          ; FORWARD IN SYNTAX TIME
                01528 
07F9  FDCB7C6E  01529         BIT     5,(IY+FLAGS3-Y)
07FD  2804      01530         JR      Z,T_D4                          ; FORWARD UNLESS 'SAVE'
                01531 
07FF  CB7E      01532         BIT     7,(HL)                          ; TEST THE 'DESCRIPTOR'
0801  28F1      01533         JR      Z,T_DERR                        ; ERROR IF NOT A DIMENSIONED ARRAY
                01534 
0803  23        01535 T_D4    INC     HL                              ; ADVANCE ALONG THE VARIABLE
0804  7E        01536         LD      A,(HL)                          ; FETCH THE LOW LENGTH
0805  32E75C    01537         LD      (DR+HD_0B),A                    ; SAVE IT
0808  23        01538         INC     HL
0809  7E        01539         LD      A,(HL)                          ; FETCH THE HIGH LENGTH
080A  32E85C    01540         LD      (DR+HD_0C),A                    ; SAVE IT
080D  23        01541         INC     HL                              ; STEP ON
                01542 
080E  79        01543 T_D5    LD      A,C
080F  32EB5C    01544         LD      (DR+HD_0F),A                    ; SAVE THE VARIABLE'S DESCRIPTOR
0812  3E01      01545         LD      A,01H                           ; ASSUME A NUMERIC ARRAY
0814  CB71      01546         BIT     6,C
0816  2801      01547         JR      Z,T_D6                          ; JUMP IF NUMERIC
0818  3C        01548         INC     A                               ; MAKE IT A STRING ARRAY
                01549 
0819  32E65C    01550 T_D6    LD      (DR+HD_00),A                    ; SAVE THE TYPE
                01551 
081C  EB        01552 T_D7    EX      DE,HL                           ; POINTER TO DE
081D  D7        01553         RST     CALBAS
081E  2000      01554         DEFW    0020H                           ; STEP ON
0820  FE29      01555         CP      29H                             ; LOOK FOR THE ')'
0822  20D0      01556         JR      NZ,T_DERR                       ; ERROR IF ABSENT
                01557 
0824  D7        01558         RST     CALBAS
0825  2000      01559         DEFW    0020H                           ; STEP PAST IT
                01560 
0827  CDB705    01561         CALL    ST_END                          ; STATEMENT FINISHES IN SYNTAX TIME
                01562 
                01563                 ; DATA RUN-TIME
082A  ED53E95C  01564         LD      (DR+HD_0D),DE                   ; POINTER GOES TO 'START'
082E  C9        01565         RET
                01566 
                01567 
                01568 ;______________________________________________________________________
                01569 
                01570 
                01571 
                01572 S_SAVE          ; SCAN THE STATEMENT FIRST
082F  FDCB7CEE  01573         SET     5,(IY+FLAGS3-Y)                 ; SET THE 'SAVE' FLAG
0833  CD0107    01574         CALL    SCANN
0836  3AD95C    01575         LD      A,(DR+L_STR1)                   ; FETCH THE LETTER
0839  FE42      01576         CP      42H                             ; IS IT 'B' ?
083B  2812      01577         JR      Z,S_BYTS
083D  FE4E      01578         CP      4EH                             ; IS IT 'N' ?
083F  2008      01579         JR      NZ,S_SA_M
0841  CD8F06    01580         CALL    N_CHEK                          ; CHECK FOR A 'IRIS' STATION NUMBER
0844  CDA90E    01581         CALL    NTEMP                           ; CREATE A 'TEMPORARY' NET CHANNEL
0847  1806      01582         JR      S_BYTS
0849  CD8506    01583 S_SA_M  CALL    MNCHEK                          ; CHECK FOR "M",DRIVE NUMBER, NAME
084C  C37F1E    01584         JP      ACT_SA                          ; JUMP FORWARD TO ' SAVE TO M'
                01585 
084F  0609      01586 S_BYTS  LD      B,09H                           ; THERE ARE NINE HEADER BYTES
0851  21E65C    01587         LD      HL,DR+HD_00                     ; BASE ADDRESS
0854  CD8008    01588 S_B1    CALL    SA_OUT
0857  23        01589         INC     HL
0858  10FA      01590         DJNZ    S_B1                            ; FOR THE NINE BYTES
                01591 
085A  2AE95C    01592         LD      HL,(DR+HD_0D)                   ; THE 'START' ADDRESS
085D  FDCB7C5E  01593         BIT     3,(IY+FLAGS3-Y)                 ; USING THE NET?
0861  280B      01594         JR      Z,S_B2A                         ; CONTINUE ONLY WITH THE NET
0863  3AE65C    01595         LD      A,(DR+HD_00)                    ; FETCH THE TYPE CODE
0866  FE03      01596         CP      03H                             ; IS IT 00 - 02 ?
0868  3004      01597         JR      NC,S_B2A
                01598 
                01599                 ; CREATING A CHANNEL WILL CHANGE THE POINTERS
086A  111401    01600         LD      DE,N_LEN                        ; LENGTH OF NET AREA
086D  19        01601         ADD     HL,DE
                01602 
086E  ED4BE75C  01603 S_B2A   LD      BC,(DR+HD_0B)                   ; THE LENGTH
0872  79        01604 S_B2    LD      A,C
0873  B0        01605         OR      B
0874  2807      01606         JR      Z,S_B3                          ; UNTIL 'BC' BYTES ARE SENT
0876  CD8008    01607         CALL    SA_OUT
0879  0B        01608         DEC     BC                              ; COUNTER DOWN
087A  23        01609         INC     HL                              ; ADDRESS UP
087B  18F5      01610         JR S_B2
                01611 
087D  C38809    01612 S_B3    JP      SLVMEX                          ; EXIT (RECLAIMING NET CHANNEL IF USED)
                01613 
0880  E5        01614 SA_OUT  PUSH    HL                              ; SEND OUT A CHARACTER
0881  C5        01615         PUSH    BC
0882  FDCB7C5E  01616         BIT     3,(IY+FLAGS3-Y)                 ; USING THE NET?
0886  7E        01617         LD      A,(HL)                          ; FOR EACH BYTE
0887  2005      01618         JR      NZ,SA_O1                        ; JUMP IF YES
0889  CD5A0C    01619         CALL    OUT_T2                          ; TO THE RS232 PORT
088C  1803      01620         JR      SA_O2
088E  CD6C0D    01621 SA_O1   CALL    OUT_N                           ; TO THE NET
0891  C1        01622 SA_O2   POP     BC
0892  E1        01623         POP     HL
0893  C9        01624         RET
                01625 
                01626 ;______________________________________________________________________
                01627 
                01628 S_LOAD          ; SCAN THE STATEMENT FIRST
0894  FDCB7CE6  01629         SET     4,(IY+FLAGS3-Y)                 ; SET A 'LOAD' FLAG
0898  CD0107    01630         CALL    SCANN                           ; USE THE 'SAVE' PARAMETER SUBROUTINE
                01631 
                01632                 ; LOAD RUN-TIME
089B  C3AF08    01633         JP      L_TEST
                01634 
                01635 ;______________________________________________________________________
                01636 
                01637 S_VERI          ; SCAN THE STATEMENT FIRST
089E  FDCB7CFE  01638         SET     7,(IY+FLAGS3-Y)                 ; SET THE VERIFY FLAG
08A2  CD0107    01639         CALL    SCANN
                01640 
                01641                 ; VERIFY  RUN-TIME
08A5  C3AF08    01642         JP      L_TEST
                01643 
                01644 ;______________________________________________________________________
                01645 
                01646 S_MERG          ; SCAN THE STATEMENT FIRST
08A8  FDCB7CF6  01647         SET     6,(IY+FLAGS3-Y)                 ; SET THE MERGE FLAG
08AC  CD0107    01648         CALL    SCANN
                01649 
                01650                 ; MERGE  RUN-TIME
                01651 
                01652 ;______________________________________________________________________
                01653 
                01654 L_TEST          ; CONSIDER "N" & "B", RETURNING IF "M"
                01655 
                01656                 ; FIRST SAVE THE 'SCANN' PARAMETERS
08AF  21E65C    01657         LD      HL,DR+HD_00                     ; BASE OF 'SCANN' PARAMETERS
08B2  11DE5C    01658         LD      DE,DR+SC_00                     ; BASE OF PRESERVING AREA
08B5  010700    01659         LD      BC,0007H
08B8  EDB0      01660         LDIR                                    ; PRESERVE THEM
                01661 
                01662                 ; NOW FETCH THE 'INCOMING' HEADER
08BA  3AD95C    01663         LD      A,(DR+L_STR1)                   ; FETCH THE LETTER
08BD  FE4E      01664         CP      4EH                             ; IS IT 'N'?
08BF  280C      01665         JR      Z,L_T1
08C1  FE42      01666         CP      42H                             ; IS IT 'B'?
08C3  280E      01667         JR      Z,L_T2
08C5  CD8506    01668         CALL    MNCHEK                          ; ENSURE IT IS 'M'
08C8  CD8815    01669         CALL    GET_HD                          ; GET MICRODRIVE HEADER
08CB  1825      01670         JR      H_SORT                          ; THEN SORT OUT
                01671 
08CD  CD8F06    01672 L_T1    CALL    N_CHEK                          ; CHECK THE STATION NUMBER
08D0  CDA90E    01673         CALL    NTEMP                           ; CREATE A 'TEMPORARY' NET CHANNEL
                01674 
08D3  21E65C    01675 L_T2    LD      HL,DR+HD_00                     ; PREPARE TO FETCH THE NEW HEADER
08D6  0609      01676         LD      B,09H                           ; WHICH WILL HAVE NINE BYTES
                01677 
08D8  E5        01678 L_T3    PUSH    HL                              ; SAVE POINTER
08D9  C5        01679         PUSH    BC                              ; SAVE COUNTER
08DA  FDCB7C5E  01680         BIT     3,(IY+FLAGS3-Y)                 ; USING THE NET?
08DE  2807      01681         JR      Z,L_T4
                01682 L_T35
08E0  CD120D    01683         CALL    IN_BYT                          ; FETCH A BYTE FROM THE NET
08E3  30FB      01684         JR      NC,L_T35
08E5  1805      01685         JR      L_T5
08E7  CD810B    01686 L_T4    CALL    IN_BYP                          ; FETCH A BYTE FROM THE RS232
08EA  30FB      01687         JR      NC,L_T4
08EC  C1        01688 L_T5    POP     BC                              ; RETREIVE THE COUNTER
08ED  E1        01689         POP     HL                              ; RETREIVE THE POINTER
08EE  77        01690         LD      (HL),A                          ; ENTER THE BYTE
08EF  23        01691         INC     HL                              ; STEP ON
08F0  10E6      01692         DJNZ    L_T3
                01693 
                01694 ;______________________________________________________________________
                01695 
                01696 H_SORT          ; ANALYSE THE HEADER
08F2  3ADE5C    01697         LD      A,(DR+SC_00)                    ; FETCH THE 'SCANN' TYPE CODE
08F5  47        01698         LD      B,A                             ; SAVE IT AN 'B'
08F6  3AE65C    01699         LD      A,(DR+HD_00)                    ; FETCH THE 'INCOMING' TYPE CODE
08F9  B8        01700         CP      B                               ; ARE THEY THE SAME?
08FA  2006      01701         JR      NZ,H_ERR
                01702 
08FC  FE03      01703         CP      03H                             ; IS IT A CODE BLOCK?
08FE  2811      01704         JR      Z,VE_CON                        ; JUMP IF IT IS
0900  3802      01705         JR      C,H_S1
                01706 
0902  E7        01707 H_ERR   RST     SH_ERR
0903  16        01708         DEFB    16H                             ; WRONG FILE TYPE
                01709 
0904  FDCB7C76  01710 H_S1    BIT     6,(IY+FLAGS3-Y)
0908  205D      01711         JR      NZ,ME_CON                       ; FORWARD IF MERGING
090A  FDCB7C7E  01712         BIT     7,(IY+FLAGS3-Y)
090E  CAA309    01713         JP      Z,LD_CON                        ; FORWARD IF LOADING
                01714                                                 ; CONTINUE WITH VERIFY
                01715 
                01716 ;______________________________________________________________________
                01717 
                01718 VE_CON          ; HANDLE ALL VERIFICATION; AND THE LOADING OF CODE BLOCKS
0911  FDCB7C76  01719         BIT     6,(IY+FLAGS3-Y)
0915  2802      01720         JR      Z,VE_C1                         ; MERGING OF BLOCKS IS NOT ALLOWED
                01721 
0917  E7        01722         RST     SH_ERR                          ; BLOCKS CANNOT BE MERGED
0918  14        01723         DEFB    14H                             ; 'MERGE' ERROR
                01724 
0919  2ADF5C    01725 VE_C1   LD      HL,(DR+SC_0B)                   ; FETCH THE 'OLD' LENGTH
091C  ED5BE75C  01726         LD      DE,(DR+HD_0B)                   ; AND THE 'NEW' LENGTH
0920  7C        01727         LD      A,H
0921  B5        01728         OR      L
0922  280E      01729         JR      Z,VE_C2                         ; JUMP IF NO START SPECIFIED
0924  ED52      01730         SBC     HL,DE
0926  300A      01731         JR      NC,VE_C2                        ; ERROR IF BLOCK TOO BIG
                01732 
0928  FDCB7C66  01733         BIT     4,(IY+FLAGS3-Y)                 ; CODE/VERIFY
092C  2802      01734         JR      Z,VE_C15
                01735 
092E  E7        01736         RST     SH_ERR                          ; CODE ERROR
092F  13        01737         DEFB    13H
                01738 VE_C15
0930  E7        01739         RST     SH_ERR
0931  15        01740         DEFB    15H                             ; ERROR IN VERIFICATION
                01741 
0932  2AE15C    01742 VE_C2   LD      HL,(DR+SC_0D)                   ; FETCH 'OLD' START
0935  DD7E04    01743         LD      A,(IX+CHTYPE)                   ; IS IT A MICRODRIVE
0938  FECD      01744         CP      'M'+80H
093A  2005      01745         JR      NZ,LD_C35
093C  2AE45C    01746         LD      HL,(DR+N_STR2+2)                ; RELOCATED ADDRESS OF ARRAY
093F  1811      01747         JR      LD_D4
                01748 LD_C35
0941  FDCB7C5E  01749         BIT     3,(IY+FLAGS3-Y)
0945  280B      01750         JR      Z,LD_D4                         ; JUMP IF USING THE RS232
                01751 
0947  3AE65C    01752         LD      A,(DR+HD_00)                    ; DONT BOTHER TO RELOCATE CODE
094A  FE03      01753         CP      3
094C  2804      01754         JR      Z,LD_D4
                01755 
094E  011401    01756         LD      BC,N_LEN                        ; ELSE ALLOW FOR THE NET CHANNEL
0951  09        01757         ADD     HL,BC
                01758 
                01759 LD_D4
0952  7C        01760         LD      A,H
0953  B5        01761         OR      L
0954  2003      01762         JR      NZ,VE_C3                        ; USE IT IF SPECIFIED
0956  2AE95C    01763         LD      HL,(DR+HD_0D)                   ; ELSE USE THE 'NEW' START
                01764 
0959  3AE65C    01765 VE_C3   LD      A,(DR+HD_00)                    ; FETCH THE TYPE CODE
095C  A7        01766         AND     A
095D  2003      01767         JR      NZ,VE_C4
095F  2A535C    01768         LD      HL,(PROG)                       ; USE 'PROG' IF VERIFYING A PROGRAM
                01769 
0962  CD5C0A    01770 VE_C4   CALL    GET_BL                          ; NOW LOAD/VERIFY THE CODE BLOCK
0965  1821      01771         JR      SLVMEX                          ; EXIT (RECLAIMING NET CHANNEL IF USED)
                01772 
                01773 ;______________________________________________________________________
                01774 
                01775 ME_CON          ; CONTROL ROUTINE FOR MERGING PROGRAMS AND VARIABLES
0967  3AEE5C    01776         LD      A,(DR+HD_12)                    ; IS THERE A LINE NUMBER?
096A  E6C0      01777         AND     0C0H
                01778 
096C  2005      01779         JR      NZ,ME1                          ; NO CONTINUE
                01780 
096E  CDB917    01781         CALL    DELTMP
0971  E7        01782         RST     SH_ERR
0972  14        01783         DEFB    14H                             ; 'MERGE' ERROR
                01784 
                01785 ME1
0973  ED4BE75C  01786         LD      BC,(DR+HD_0B)                   ; 'LENGTH'
0977  C5        01787         PUSH    BC                              ; SAVE A COPY
                01788 
0978  03        01789         INC     BC                              ; MAKE ROOM +1 IN THE WORKSPACE
0979  D7        01790         RST     CALBAS
097A  3000      01791         DEFW    0030H
                01792 
097C  3680      01793         LD      (HL),80H                        ; ENTER A '80H' INTO THE EXTRA LOCATION
                01794 
097E  EB        01795         EX      DE,HL                           ; BASE TO HL
097F  D1        01796         POP     DE                              ; LENGTH TO DE
0980  E5        01797         PUSH    HL                              ; FOR THE 'LINES' & THE 'VARIABLES'
                01798 
0981  CD5C0A    01799         CALL    GET_BL                          ; NOW GET THE BLOCK
                01800 
0984  E1        01801         POP     HL                              ; RETREIVE THE POINTER TO THE LOADED 'LINES & VARIABLES'
0985  D7        01802         RST     CALBAS                          ; CALL THE 'MERGING' SUBROUTINE
0986  CE08      01803         DEFW    08CEH
                01804 
                01805 ;______________________________________________________________________
                01806 
                01807 SLVMEX
0988  DD7E04    01808         LD      A,(IX+CHTYPE)
098B  FECD      01809         CP      'M'+80H
098D  2005      01810         JR      NZ,SLV2
098F  CDB112    01811         CALL    CLOSIX
0992  180C      01812         JR      SLV1
                01813 SLV2
0994  FDCB7C5E  01814         BIT     3,(IY+FLAGS3-Y)                 ; USING THE NET?
0998  2806      01815         JR      Z,SLV1
                01816 
                01817                                                 ; OTHERWISE RECLAIM THE 'AD HOC' NET CHANNEL
099A  CDF50E    01818         CALL    NTCLSE                          ; SEND THE FINAL BUFFER
099D  CDB917    01819         CALL    DELTMP
                01820 
09A0  C3C105    01821 SLV1    JP      END1                            ; EXIT AS USUAL
                01822 
                01823 ;______________________________________________________________________
                01824 *INCLUDE SH_SAVE2.S
                01825 ;
                01826 ;********************************************************************
                01827 ;
                01828 ;                       SH_SAVE2.S
                01829 ;
                01830 ;********************************************************************
                01831 
                01832 
                01833 
                01834 ;       GLOBAL LD_CON
                01835 ;       GLOBAL GET_BL
                01836 ;       GLOBAL  AUTO_R
                01837 
                01838 ;       EXTERNAL        H_SORT,T_PR1,GET_HD
                01839 ;       EXTERNAL SLVMEX
                01840 ;       EXTERNAL IN_BYP, IN_BYT
                01841 ;       EXTERNAL        GETMBL
                01842 
                01843 
                01844 
                01845 
                01846 LD_CON          ; LOAD A PROGRAM OR ARRAY
09A3  ED5BE75C  01847         LD      DE,(DR+HD_0B)                   ; FETCH THE 'NEW' LENGTH
09A7  2AE15C    01848         LD      HL,(DR+SC_0D)                   ; AND THE 'OLD' START
                01849 
                01850                 ; CONSIDER HOW MUCH EXTRA RAM WILL BE REQUIRED
09AA  E5        01851         PUSH    HL
09AB  7C        01852         LD      A,H
09AC  B5        01853         OR      L
09AD  2006      01854         JR      NZ,LD_C1
09AF  13        01855         INC     DE                              ; ONE FOR THE 'DESCRIPTOR' AND TWO FOR THE 'LENGTH'
09B0  13        01856         INC     DE
09B1  13        01857         INC     DE
09B2  EB        01858         EX      DE,HL
09B3  1809      01859         JR      LD_C2
                01860 
09B5  2ADF5C    01861 LD_C1   LD      HL,(DR+SC_0B)
09B8  EB        01862         EX      DE,HL
09B9  37        01863         SCF
09BA  ED52      01864         SBC     HL,DE
09BC  3809      01865         JR      C,LD_C3
                01866 
09BE  110500    01867 LD_C2   LD      DE,0005H                        ; FIVE EXTRA LOCATIONS ARE ADDED FOR 'LUCK'
09C1  19        01868         ADD     HL,DE
09C2  44        01869         LD      B,H
09C3  4D        01870         LD      C,L
09C4  D7        01871         RST     CALBAS
09C5  051F      01872         DEFW    1F05H                           ; TEST THAT ROOM EXISTS
                01873 
09C7  E1        01874 LD_C3   POP     HL
                01875 
                01876                 ; SEPARATE PROGRAMS FROM ARRAYS
09C8  3AE65C    01877         LD      A,(DR+HD_00)                    ; FETCH THE TYPE CODE
09CB  A7        01878         AND     A
09CC  2847      01879         JR      Z,L_PROG                        ; JUMP FORWARD TO LOAD A PROGRAM
                01880 
                01881                 ; DEAL WITH NUMERIC AND STRING ARRAYS
09CE  7C        01882         LD      A,H
09CF  B5        01883         OR      L
09D0  2821      01884         JR      Z,LD_D5                         ; JUMP IF A 'NEW' ARRAY
                01885 
                01886                 ; ELSE RECLAIM THE 'OLD' ARRAY
09D2  DD7E04    01887         LD      A,(IX+CHTYPE)                   ; IS IT A MICRODRIVE
09D5  FECD      01888         CP      'M'+80H
09D7  2005      01889         JR      NZ,_LD_C35                      ; *
09D9  2AE45C    01890         LD      HL,(DR+N_STR2+2)                ; RELOCATED ADDRESS OF ARRAY
09DC  180A      01891         JR      _LD_D4                          ; *
                01892 _LD_C35                                         ; *
09DE  FDCB7C5E  01893         BIT     3,(IY+FLAGS3-Y)
09E2  2804      01894         JR      Z,_LD_D4                        ; JUMP IF USING THE RS232
                01895 
09E4  111401    01896         LD      DE,N_LEN                        ; ELSE ALLOW FOR THE NET CHANNEL
09E7  19        01897         ADD     HL,DE
                01898 
09E8  2B        01899 _LD_D4  DEC     HL                              ; * BACK ONE
09E9  46        01900         LD      B,(HL)                          ; FETCH HIGH LENGTH
09EA  2B        01901         DEC     HL
09EB  4E        01902         LD      C,(HL)                          ; FETCH LOW LENGTH
09EC  2B        01903         DEC     HL
09ED  03        01904         INC     BC                              ; COUNT UP BY THREE
09EE  03        01905         INC     BC
09EF  03        01906         INC     BC
09F0  D7        01907         RST     CALBAS
09F1  E819      01908         DEFW    19E8H                           ; 'DELREC'
                01909 
09F3  2A595C    01910 LD_D5   LD      HL,(E_LINE)
09F6  2B        01911         DEC     HL                              ; FIND END OF PRESENT VARIABLES AREA
09F7  ED4BE75C  01912         LD      BC,(DR+HD_0B)                   ; FETCH NEW LENGTH
09FB  C5        01913         PUSH    BC                              ; TAKE A COPY
09FC  03        01914         INC     BC                              ; UP BY THREE AGAIN
09FD  03        01915         INC     BC
09FE  03        01916         INC     BC
09FF  3AE35C    01917         LD      A,(DR+SC_0F)                    ; FETCH THE LETTER
0A02  F5        01918         PUSH    AF                              ; SAVE IT BRIEFLY
0A03  D7        01919         RST     CALBAS
0A04  5516      01920         DEFW    1655H                           ; MAKE THE ROOM FOR THE NEW ARRAY
0A06  23        01921         INC     HL
0A07  F1        01922         POP     AF                              ; RETRIEVE THE LETTER
0A08  77        01923         LD      (HL),A                          ; ENTER IT
0A09  D1        01924         POP     DE                              ; FETCH THE LENGTH
0A0A  23        01925         INC     HL
0A0B  73        01926         LD      (HL),E
0A0C  23        01927         INC     HL
0A0D  72        01928         LD      (HL),D                          ; ENTER THE LENGTH
0A0E  23        01929         INC     HL
                01930 
                01931                 ; NOW GET THE ACTUAL ARRAY
0A0F  CD5C0A    01932 LD_D6   CALL    GET_BL                          ; GET THE ACTUAL BLOCK
0A12  C38809    01933         JP      SLVMEX
                01934 
                01935 ;______________________________________________________________________
                01936 
                01937 L_PROG          ; RECLAIM THE 'OLD' PROGRAM
0A15  FDCB7C8E  01938         RES     1,(IY+FLAGS3-Y)                 ; DONT WANT TO PROTECT ALL LOADS
                01939                                                 ; UNLESS LINE WAS SPECIFIED
0A19  ED5B535C  01940         LD      DE,(PROG)                       ; THE BASE ADDRESS IS TO BE 'PROG'
0A1D  2A595C    01941         LD      HL,(E_LINE)
0A20  2B        01942         DEC     HL
0A21  D7        01943         RST     CALBAS
0A22  E519      01944         DEFW    19E5H                           ; RECLAIM THE 'OLD' PROGRAM AND VARIABLES TOTALLY
                01945 
                01946                 ; NEXT CREATE ROOM (TESTS IF POSSIBLE)
0A24  ED4BE75C  01947         LD      BC,(DR+HD_0B)                   ; FETCH THE LENGTH
0A28  2A535C    01948         LD      HL,(PROG)
0A2B  D7        01949         RST     CALBAS
0A2C  5516      01950         DEFW    1655H                           ; MAKE SUFFICIENT ROOM
                01951 
                01952                 ; SET VARS & NEWPPC AS REQUIRED
0A2E  23        01953         INC     HL
0A2F  ED4BEB5C  01954         LD      BC,(DR+HD_0F)                   ; FETCH THE PROGRAM LENGTH
0A33  09        01955         ADD     HL,BC
0A34  224B5C    01956         LD      (VARS),HL                       ; ENTER THE REQUIRED VALUE FOR VARS
0A37  3AEE5C    01957         LD      A,(DR+HD_12)                    ; LINE NUMBER?
0A3A  67        01958         LD      H,A
0A3B  E6C0      01959         AND     0C0H                            ; TEST IT
0A3D  200F      01960         JR      NZ,L_P1                         ; JUMP IF 'FFH'
0A3F  FDCB7CCE  01961         SET     1,(IY+FLAGS3-Y)                 ; NOW WANT TO PROTECT IT
                01962 
0A43  3AED5C    01963         LD      A,(DR+HD_11)                    ; FETCH THE LOW NUMBER
0A46  6F        01964         LD      L,A
0A47  22425C    01965         LD      (NEWPPC),HL                     ; ENTER IT
0A4A  FD360A00  01966         LD      (IY+NSPPC-Y),00H                ; ZERO STATEMENT NUMBER
                01967 
                01968                 ; SET UP REGISTERS FOR THE ACTUAL LOADING
0A4E  2A535C    01969 L_P1    LD      HL,(PROG)                       ; BASE ADDRESS
0A51  ED5BE75C  01970         LD      DE,(DR+HD_0B)                   ; BLOCK LENGTH
                01971 
                01972                 ; TAKE THE OPPORTUNITY HERE TO RESET DATADD
0A55  2B        01973         DEC     HL
0A56  22575C    01974         LD      (DATADD),HL
0A59  23        01975         INC     HL
                01976 
0A5A  18B3      01977         JR      LD_D6                           ; COLLECT THE BLOCK AND EXIT
                01978 
                01979 ;______________________________________________________________________
                01980 
                01981 GET_BL          ; GET A BLOCK FROM THE NET OR THE RS232
                01982                 ; DE HOLDS THE LENGTH
                01983                 ; HL HOLDS THE START
                01984                 ; BIT 7,FLAGS3 IS SET FOR VERIFYING
                01985                 ; BIT 3,FLAGS3 IS SET FOR USING THE NET
                01986 
0A5C  7A        01987         LD      A,D                             ; DO NOTHING IF NULL PROGRAM
0A5D  B3        01988         OR      E
0A5E  C8        01989         RET     Z
                01990 ;
0A5F  DD7E04    01991         LD      A,(IX+CHTYPE)                   ; IS IT A MICRODRIVE
0A62  FECD      01992         CP      'M'+80H
0A64  2004      01993         JR      NZ,GE_1
0A66  CDB115    01994         CALL    GETMBL                          ; YES ... DO SEPERATELY
0A69  C9        01995         RET
                01996 
0A6A  E5        01997 GE_1    PUSH    HL                              ; SAVE THE START
0A6B  D5        01998         PUSH    DE                              ; SAVE THE LENGTH
0A6C  FDCB7C5E  01999         BIT     3,(IY+FLAGS3-Y)                 ; USING THE NET?
0A70  2807      02000         JR      Z,GE_2
                02001 GE_15
0A72  CD120D    02002         CALL    IN_BYT                          ; FETCH A BYTE FROM THE NET
0A75  30FB      02003         JR      NC,GE_15
0A77  1805      02004         JR      GE_3
0A79  CD810B    02005 GE_2    CALL    IN_BYP                          ; FETCH A BYTE FROM THE RS232
0A7C  30FB      02006         JR      NC,GE_2
0A7E  D1        02007 GE_3    POP     DE                              ; RETRIEVE THE LENGTH
0A7F  1B        02008         DEC     DE                              ; DECREASE IT
0A80  E1        02009         POP     HL                              ; RETRIEVE THE START
0A81  FDCB7C7E  02010         BIT     7,(IY+FLAGS3-Y)                 ; VERIFYING?
0A85  2003      02011         JR      NZ,GE_4                         ; JUMP IF IT IS
0A87  77        02012         LD      (HL),A                          ; ASSIGN IT IF NOT
0A88  1805      02013         JR      GE_5
                02014 
0A8A  BE        02015 GE_4    CP      (HL)                            ; DOES IT MATCH?
0A8B  2802      02016         JR      Z,GE_5
                02017 
0A8D  E7        02018         RST     SH_ERR
0A8E  15        02019         DEFB    15H                             ; 'VERIFICATION HAS FAILED'
                02020 
0A8F  23        02021 GE_5    INC     HL                              ; STEP ON
0A90  7B        02022         LD      A,E
0A91  B2        02023         OR      D
0A92  20D6      02024         JR      NZ,GE_1                         ; GO ROUND UNTIL FINISHED
0A94  C9        02025         RET                                     ; ALL DONE
                02026 
                02027 
                02028 AUTO_R
0A95  010100    02029         LD      BC,1                            ; PREPARE VARIABLES AS IF THE USER HAD
0A98  ED43D65C  02030         LD      (DR+D_STR1),BC                  ; TYPE LOAD*"M";1;"RUN"
0A9C  010300    02031         LD      BC,3                            ; FIRST DRIVE NUMBER NOW NAME LENGTH
0A9F  ED43DA5C  02032         LD      (DR+N_STR1),BC
0AA3  01C60A    02033         LD      BC,NAME                         ; AND ADDRESS
0AA6  ED43DC5C  02034         LD      (DR+N_STR1+2),BC
                02035 
0AAA  FDCB7CE6  02036         SET     4,(IY+FLAGS3-Y)                 ; SET LOAD FLAG
                02037 
0AAE  CD5307    02038         CALL    T_PR_1                          ; GET OLD PROG PARAMETERS
0AB1  21E65C    02039         LD      HL,DR+HD_00                     ; AND MOVE THEM UP AS IN L_TEST
0AB4  11DE5C    02040         LD      DE,DR+SC_00
0AB7  010900    02041         LD      BC,9
0ABA  EDB0      02042         LDIR
                02043 
0ABC  FDCB0AFE  02044         SET     7,(IY+NSPPC-Y)                  ; RUN CLEARED THIS IN ANTICIPATION OF
                02045                                                 ; LINE NUMBER. MUST SET IT TO PREVENT
                02046                                                 ; JUMP TO PROGRAM.
                02047 
0AC0  CD8815    02048         CALL    GET_HD                          ; NOW RESUME AS BEFORE
0AC3  C3F208    02049         JP      H_SORT
                02050 
                02051 NAME
0AC6  72        02052         DEFB "r"
0AC7  75        02053         DEFB "u"
0AC8  6E        02054         DEFB "n"
                02055 
                02056 *INCLUDE SH_PORT.S
                02057 ;
                02058 ;******************************************************************************
                02059 ;
                02060 ;                       RS_232 MODULE
                02061 ;
                02062 ;******************************************************************************
                02063 
                02064 ;       GLOBAL  ACT_FT
                02065 ;       GLOBAL  ACT_OT
                02066 ;       GLOBAL  IN_T
                02067 ;       GLOBAL  IN_BYP
                02068 ;       GLOBAL  OUT_T
                02069 ;       GLOBAL  OUT_T2
                02070 ;       GLOBAL  STR_OF
                02071 ;       GLOBAL  B_COL
                02072 ;       GLOBAL   OPENT
                02073 ;       EXTERNAL END1
                02074 ;       EXTERNAL CHANGE
                02075 ;       EXTERNAL        RELNAM
                02076 
                02077 
                02078 
                02079                 ; THERE ARE FOUR ROUTINES IN THIS MODULE
                02080 
                02081                 ; 1. ACT_FT     - FORMAT "T" ,BAUD
                02082                 ; 2. ACT_IT     - OPEN #?,"T",BAUD
                02083                 ; 3. IN_T       - INPUT VIA RS_232
                02084                 ; 4. OUT_T      - OUTPUT VIA RS_232
                02085 
                02086 
                02087 ACT_FT                                          ; FETCHES THE VALUE FROM 'D-STR1'
                02088                                                 ; AND COMPUTES THE VALUE FOR THE SYS. VAR. 'BAUD'
                02089 
0AC9  ED4BD65C  02090         LD      BC,(DR+D_STR1)                  ; GET PARAMETER
0ACD  21EF0A    02091         LD      HL,T_BAUD                       ; BASE ADDRESS OF TABLE
                02092 
0AD0  5E        02093 FT_1    LD      E,(HL)                          ; FETCH LOW BYTE OF 'RATE'
0AD1  23        02094         INC     HL
0AD2  56        02095         LD      D,(HL)                          ; FETCH HIGH BYTE OF 'RATE'
0AD3  23        02096         INC     HL
0AD4  EB        02097         EX      DE,HL                           ; SWITCH POINTER & VALUE
                02098 
0AD5  7C        02099         LD      A,H                             ; TEST HIGH BYTE
0AD6  FE4B      02100         CP      04BH                            ; AGAINST 'LAST ENTRY'
0AD8  300A      02101         JR      NC,FT_2                         ; JUMP AT END
                02102 
0ADA  A7        02103         AND     A
0ADB  ED42      02104         SBC     HL,BC                           ; TEST VALUE (CARRY RESET)
0ADD  3005      02105         JR      NC,FT_2                         ; JUMP IF VALUE IS GOOD
0ADF  EB        02106         EX      DE,HL                           ; SWITCH BACK
0AE0  23        02107         INC     HL
0AE1  23        02108         INC     HL                              ; STEP PAST DATA BYTES
0AE2  18EC      02109         JR      FT_1                            ; ROUND AGAIN
                02110 
0AE4  EB        02111 FT_2    EX      DE,HL                           ; POINTER BACK TO HL
0AE5  5E        02112         LD      E,(HL)                          ; FETCH LOW 'BAUD'
0AE6  23        02113         INC     HL
0AE7  56        02114         LD      D,(HL)                          ; FETCH HIGH 'BAUD'
0AE8  ED53C35C  02115         LD      (DR+BAUD),DE                    ; STORE IT
                02116 
0AEC  C3C105    02117         JP      END1                            ; RUN IS FINISHED
                02118 
0AEF  3200      02119 T_BAUD  DEFW    0032H                           ; RATE 50
0AF1  820A      02120         DEFW    0A82H
0AF3  6E00      02121         DEFW    006EH                           ; RATE 110
0AF5  C504      02122         DEFW    04C5H
0AF7  2C01      02123         DEFW    012CH                           ; RATE 300
0AF9  BE01      02124         DEFW    01BEH
0AFB  5802      02125         DEFW    0258H                           ; RATE 600
0AFD  DE00      02126         DEFW    00DEH
0AFF  B004      02127         DEFW    04B0H                           ; RATE 1200
0B01  6E00      02128         DEFW    006EH
0B03  6009      02129         DEFW    0960H                           ; RATE 2400
0B05  3600      02130         DEFW    0036H
0B07  C012      02131         DEFW    12C0H                           ; RATE 4800
0B09  1A00      02132         DEFW    001AH
0B0B  8025      02133         DEFW    2580H                           ; RATE 9600
0B0D  0C00      02134         DEFW    000CH
0B0F  004B      02135         DEFW    4B00H                           ; RATE 19200
0B11  0500      02136         DEFW    0005H                    
                02137 
                02138 
                02139 ; OPENT CREATES AN RS232 CHANNEL.
                02140 ; THE TYPE, B OR T IS DEFINED BY L_STR1
                02141 
                02142 OPENT
0B13  2A535C    02143         LD      HL,(PROG)
0B16  2B        02144         DEC     HL
0B17  010B00    02145         LD      BC,T_TABL
0B1A  C5        02146         PUSH    BC
0B1B  D7        02147         RST     CALBAS
0B1C  5516      02148         DEFW    1655H                           ; INSERT CHANNEL DATA FOR A RS_232 STREAM
0B1E  C1        02149         POP     BC
0B1F  D5        02150         PUSH    DE
0B20  CD9916    02151         CALL    RELNAM                          ; RELOCATE FILENAMES FOR MOVE "T" TO "M"
0B23  D1        02152         POP     DE
                02153 
0B24  216E0B    02154         LD      HL,T_TAB+T_TABL-1
0B27  010B00    02155         LD      BC,T_TABL
0B2A  EDB8      02156         LDDR                                    ; MOVE THE DATA
0B2C  13        02157         INC     DE
                02158 
0B2D  3AD95C    02159         LD      A,(DR+L_STR1)                   ; FETCH THE LETTER
0B30  FE42      02160         CP      42H                             ; IS IT 'B'?
0B32  C0        02161         RET     NZ
                02162 
0B33  D5        02163         PUSH    DE                              ; FOR 'B' CHANGE 'OUT_T' TO 'OUT_T2'
                02164                                                 ; 'IN_T' TO 'IN_T2'
0B34  210500    02165         LD      HL,0005H                        ; FIFTH AND SIXTH BYTE
0B37  19        02166         ADD     HL,DE
0B38  115A0C    02167         LD      DE,OUT_T2
0B3B  73        02168         LD      (HL),E                          ; LOW BYTE
0B3C  23        02169         INC     HL
0B3D  72        02170         LD      (HL),D                          ; HIGH BYTE
0B3E  23        02171         INC     HL
0B3F  11750B    02172         LD      DE,IN_T2
0B42  73        02173         LD      (HL),E
0B43  23        02174         INC     HL
0B44  72        02175         LD      (HL),D
0B45  D1        02176         POP     DE                              ; NOW CONTINUE INTO STR_OF
0B46  C9        02177         RET
                02178 
                02179 ;______________________________________________________________________
                02180 
                02181 ACT_OT                  ; ASSOCIATES A GIVEN STEAM (IN S_STR1)
0B47  CD130B    02182         CALL    OPENT
                02183 STR_OF                                          ; ENTER THE STREAM OFFSET
                02184                                                 ; DE POINTS TO THE FIRST LOCATION
0B4A  2A4F5C    02185         LD      HL,(CHANS_)                     ; COMPUTE THE 'OFFSET' AS REQUIRED
0B4D  2B        02186         DEC     HL
0B4E  EB        02187         EX      DE,HL
0B4F  A7        02188         AND     A
0B50  ED52      02189         SBC     HL,DE
0B52  EB        02190         EX      DE,HL
0B53  21165C    02191         LD      HL,STRMS+6                      ; FIND THE 'CURRENT' STREAM BYTES
0B56  3AD85C    02192         LD      A,(DR+S_STR1)
0B59  07        02193         RLCA
0B5A  4F        02194         LD      C,A
0B5B  0600      02195         LD      B,00H
0B5D  09        02196         ADD     HL,BC
0B5E  73        02197         LD      (HL),E                          ; ENTER THE 'OFFSET'
0B5F  23        02198         INC     HL
0B60  72        02199         LD      (HL),D
0B61  C3C105    02200         JP      END1                            ; EXIT NOW - THE STREAM IS NOW OPEN
                02201 
                02202 T_TAB           ; CHANNEL DATA FOR RS_232
0B64  0800      02203         DEFW    0008H
0B66  0800      02204         DEFW    0008H
0B68  54        02205         DEFB    54H
0B69  3C0C      02206         DEFW    OUT_T
0B6B  6F0B      02207         DEFW    IN_T
0B6D  0B00      02208         DEFW    T_TABL
                02209 
                02210 T_TABL  EQU     $-T_TAB
                02211 
                02212 ;______________________________________________________________________
                02213 
0B6F  217B0B    02214 IN_T    LD      HL,IN_BYQ                       ; 7 BIT INPUT ROUTINE
0B72  C3BD0C    02215         JP      CHANGE
                02216 
0B75  21810B    02217 IN_T2   LD      HL,IN_BYP                       ; ACTUAL INPUT FROM PORT ROUTINE
0B78  C3BD0C    02218         JP      CHANGE                          ; JUMP TO IT FOR BOTH INPUT & INKEY$
                02219 
                02220 ;______________________________________________________________________
0B7B  CD810B    02221 IN_BYQ  CALL    IN_BYP                          ; JUST THE SAME BUT
0B7E  CBBF      02222         RES     7,A                             ; FORCES ASCII
0B80  C9        02223         RET
                02224 
                02225 
                02226 IN_BYP          ; BYTE IN FROM PORT
                02227 
0B81  21C75C    02228         LD      HL,SER_FL+DR                    ; ADDRESS THE FLAG
0B84  7E        02229         LD      A,(HL)                          ; FETCH THE FLAG
0B85  A7        02230         AND     A                               ; TEST IT
0B86  2806      02231         JR      Z,IN_BY0                        ; JUMP IF NO SAVED CHARACTER
                02232 
0B88  3600      02233         LD      (HL),00H                        ; BUT CLEAR FLAG IF THERE IS ONE
0B8A  23        02234         INC     HL
0B8B  7E        02235         LD      A,(HL)                          ; FETCH CHARACTER IN SECOND BYTE OF SER_FL
0B8C  37        02236         SCF
0B8D  C9        02237         RET                                     ; EXIT WITH THE CHARACTER
                02238 
                02239 IN_BY0
0B8E  3E7F      02240         LD      A,7FH                           ; MUST CHECK THE BREAK KEY SOMEWHERE
0B90  DBFE      02241         IN      A,(KB_PT)
0B92  0F        02242         RRCA
0B93  3805      02243         JR      C,INBY05
                02244 
0B95  FD360014  02245         LD      (IY+ERR_NR-Y),14H
0B99  EF        02246         RST     ROMERR
                02247 INBY05
0B9A  F3        02248         DI
0B9B  3AC65C    02249         LD      A,(DR+IOBORD)
0B9E  D3FE      02250         OUT     (0FEH),A
                02251 
0BA0  ED5BC35C  02252         LD      DE,(DR+BAUD)
0BA4  212003    02253         LD      HL,800                          ; 10MS TIMEOUT
0BA7  42        02254         LD      B,D
0BA8  4B        02255         LD      C,E
0BA9  CB38      02256         SRL     B
0BAB  CB19      02257         RR      C                               ; 1/2 BIT INTERVAL IN BC
                02258 
0BAD  3EFE      02259         LD      A,SELD                          ; ASSERT CTS
0BAF  D3EF      02260         OUT     (STATUS),A
                02261 
                02262 INBY1
0BB1  DBF7      02263         IN      A,(SERIAL)
0BB3  07        02264         RLCA
0BB4  300F      02265         JR      NC,INBY15
                02266 
0BB6  DBF7      02267         IN      A,(SERIAL)                      ; WAS IT A FALSE START BIT
0BB8  07        02268         RLCA
0BB9  300A      02269         JR      NC,INBY15
                02270 
0BBB  DBF7      02271         IN      A,(SERIAL)
0BBD  07        02272         RLCA
0BBE  3005      02273         JR      NC,INBY15
                02274     
0BC0  DBF7      02275         IN      A,(SERIAL)
0BC2  07        02276         RLCA
0BC3  380C      02277         JR      C,INBY2
                02278 INBY15                                          ; KEEP LOOKING
0BC5  2B        02279         DEC     HL
0BC6  7C        02280         LD      A,H
0BC7  B5        02281         OR      L
0BC8  20E7      02282         JR      NZ,INBY1
                02283 
0BCA  F5        02284         PUSH    AF                              ; RETURN NC,Z ON TIMEOUT
0BCB  3EEE      02285         LD      A,CTS.AND.SELD
0BCD  D3EF      02286         OUT     (STATUS),A
0BCF  181F      02287         JR      INBY45
                02288 INBY2
0BD1  60        02289         LD      H,B
0BD2  69        02290         LD      L,C
0BD3  0680      02291         LD      B,80H
0BD5  2B        02292         DEC     HL                              ; COMPENSATE FOR FALSE START BIT DETECTION
0BD6  2B        02293         DEC     HL
0BD7  2B        02294         DEC     HL
                02295 
0BD8  19        02296 IN_BY3  ADD     HL,DE
0BD9  00        02297         NOP                                     ; WASTE TIME
                02298 
0BDA  2B        02299 IN_BY4  DEC     HL
0BDB  7C        02300         LD      A,H
0BDC  B5        02301         OR      L
0BDD  20FB      02302         JR      NZ,IN_BY4                       ; EXHAUSE THE TIMING COUNTER
                02303 
0BDF  C600      02304         ADD     A,00H                           ; WASTE 7 T-STATES
0BE1  DBF7      02305         IN      A,(SERIAL)                      ; READ THE PORT
0BE3  07        02306         RLCA                                    ; MOVE BIT 7 TO THE CARRY
0BE4  CB18      02307         RR      B                               ; COLLECT THE BITS IN B
0BE6  30F0      02308         JR      NC,IN_BY3                       ; ROUND FOR 8 BITS - IGNORES THE 'STOP BITS'
                02309 
0BE8  3EEE      02310         LD      A,CTS.AND.SELD
0BEA  D3EF      02311         OUT     (STATUS),A                      ; CLEAR CTS (NO LONGER 'READY')
                02312 
0BEC  78        02313         LD      A,B                             ; SAVE THE CHARACTER AND FLAG
0BED  2F        02314         CPL
0BEE  37        02315         SCF
0BEF  F5        02316         PUSH    AF
                02317 
                02318                 ; NOW SEE IF THERE IS A 'SECOND CHARACTER
                02319 INBY45
0BF0  19        02320         ADD     HL,DE                           ; FETCH THE 'DELAY'
0BF1  2B        02321 IN_BY5  DEC     HL
0BF2  7D        02322         LD      A,L
0BF3  B4        02323         OR      H
0BF4  20FB      02324         JR      NZ,IN_BY5                       ; WAIT THE DELAY TIME
                02325 
0BF6  19        02326         ADD     HL,DE
0BF7  19        02327         ADD     HL,DE                           ; THREE BITS (GERIATRIC IBM!)
0BF8  19        02328         ADD     HL,DE
0BF9  2B        02329 IN_BY6  DEC     HL
0BFA  7D        02330         LD      A,L
0BFB  B4        02331         OR      H
0BFC  2838      02332         JR      Z,IN_BY9                        ; USE THE DELAY TIME AS A TIME-OUT
                02333 
0BFE  DBF7      02334         IN      A,(SERIAL)                      ; LOOK FOR THE 'START'
0C00  07        02335         RLCA
0C01  30F6      02336         JR      NC,IN_BY6                       ; ROUND AGAIN IF NOT FOUND
                02337 
0C03  DBF7      02338         IN      A,(SERIAL)                      ; FALSE START BIT ?
0C05  07        02339         RLCA
0C06  30F1      02340         JR      NC,IN_BY6
                02341 
0C08  DBF7      02342         IN      A,(SERIAL)
0C0A  07        02343         RLCA
0C0B  30EC      02344         JR      NC,IN_BY6
                02345 
0C0D  DBF7      02346         IN      A,(SERIAL)
0C0F  07        02347         RLCA
0C10  30E7      02348         JR      NC,IN_BY6
                02349 
0C12  62        02350         LD      H,D
0C13  6B        02351         LD      L,E
0C14  CB3C      02352         SRL     H
0C16  CB1D      02353         RR      L
0C18  0680      02354         LD      B,080H                          ; SET THE MARKER BIT
0C1A  2B        02355         DEC     HL
0C1B  2B        02356         DEC     HL                              ; COMPENSATE FOR FALSE START BIT DETECTION
0C1C  2B        02357         DEC     HL
                02358 
                02359                 ; NOW COLLECT THE CHARACTER (AS ABOVE)
0C1D  19        02360 IN_BY7  ADD     HL,DE
0C1E  00        02361         NOP
0C1F  2B        02362 IN_BY8  DEC     HL
0C20  7C        02363         LD      A,H
0C21  B5        02364         OR      L
0C22  20FB      02365         JR      NZ,IN_BY8
0C24  C600      02366         ADD     A,00H
0C26  DBF7      02367         IN      A,(SERIAL)
0C28  07        02368         RLCA
0C29  CB18      02369         RR      B
0C2B  30F0      02370         JR      NC,IN_BY7
                02371 
0C2D  21C75C    02372         LD      HL,SER_FL+DR                    ; SET THE FLAG
0C30  3601      02373         LD      (HL),01H
0C32  23        02374         INC     HL
0C33  78        02375         LD      A,B
0C34  2F        02376         CPL                                     ; COMPLEMENT THE NEW CHARACTER
0C35  77        02377         LD      (HL),A                          ; AND SAVE IT
                02378 
0C36  CDA90C    02379 IN_BY9  CALL    B_COL                           ; RESET ORIGINAL BORDER COLOUR
0C39  F1        02380         POP     AF                              ; RETRIEVE THE CHARACTER
0C3A  FB        02381         EI                                      ; INTERRUPT ON NOW
0C3B  C9        02382         RET                                     ; EXIT APPROPRIATELY
                02383 
                02384 
                02385 ;______________________________________________________________________
                02386 
                02387 
                02388 
                02389 OUT_T
                02390                 ; ACTUAL WRCH ROUTINE FOR THE RS232 - DEALS WITH 'SINCLAIR' CODES
                02391 
                02392 
0C3C  FEA5      02393         CP      0A5H                            ; COMPARE CHARACTER TO 'RND' - FIRST TOKEN
0C3E  3806      02394         JR      C,LOT_A                         ; JUMP IF NOT A TOKEN
                02395 
0C40  D6A5      02396         SUB     0A5H
0C42  D7        02397         RST     CALBAS
0C43  100C      02398         DEFW    0C10H
0C45  C9        02399         RET
                02400 
0C46  FE7F      02401 LOT_A   CP      7FH                             ; IS IT A GRAPHIC?
0C48  3802      02402         JR      C,LOT_B                         ; JUMP IF NOT
0C4A  3E3F      02403         LD      A,3FH                           ; FORCE ALL GRAPHICS TO 03FH - '?'
                02404       
0C4C  FE0D      02405 LOT_B   CP      0DH                             ; CARRIAGE RETURN?
0C4E  2007      02406         JR      NZ,LOT_C
0C50  CD5A0C    02407         CALL    OUT_T2                          ; CR
0C53  3E0A      02408         LD      A,0AH
0C55  1803      02409         JR      OUT_T2                          ; AUTO LF
0C57  FE20      02410 LOT_C   CP      20H                             ; TEST AGAINST 'SPACE'
0C59  D8        02411         RET     C                               ; RETURN - IGNORING THE CONTROL CHARACTERS
                02412 
                02413 ;______________________________________________________________________
                02414 
                02415 
                02416 OUT_T2          ; ACTUAL 'BYTE' WRCH ROUTINE
                02417 
0C5A  060B      02418         LD      B,0BH                           ; A 'START BIT', 8 CODE BITS & 2 'STOP BITS
0C5C  2F        02419         CPL                                     ; COMPLEMENT THE CODE BITS
0C5D  4F        02420         LD      C,A                             ; SAVE THE CODE BYTE IN C
0C5E  3AC65C    02421         LD      A,(DR+IOBORD)                   ; FETCH THE CURRENT I/O BORDER COLOUR
0C61  D3FE      02422         OUT     (0FEH),A
                02423 
0C63  3EEF      02424         LD      A,CTS                           ; SELECT THE RS32 OVER NET
0C65  D3EF      02425         OUT     (PORTC),A
0C67  2F        02426         CPL
0C68  D3F7      02427         OUT     (RS232),A                       ; PUT OUT LOW LEVEL
                02428        
                02429 
0C6A  2AC35C    02430         LD      HL,(DR+BAUD)                    ; FETCH CURRENT RATE
                02431         
0C6D  54        02432         LD      D,H
0C6E  5D        02433         LD      E,L
                02434 LOT1
0C6F  1B        02435         DEC     DE                              ; ALLOW TIME FOR THE NOISE TO BE IGNORED
0C70  7A        02436         LD      A,D
0C71  B3        02437         OR      E
0C72  20FB      02438         JR      NZ,LOT1
                02439 LOT2    
0C74  3E7F      02440         LD      A,7FH
0C76  DBFE      02441         IN      A,(KB_PT)
0C78  F6FE      02442         OR      0FEH
0C7A  DBFE      02443         IN      A,(KB_PT)
0C7C  1F        02444         RRA
0C7D  D2B40C    02445         JP      NC,ERRH
0C80  DBEF      02446         IN      A,(STATUS)
0C82  E608      02447         AND     DTR                             ; WAIT FOR BIT 3 OF STATUS TO BE FOUND 'HIGH'
0C84  28EE      02448         JR      Z,LOT2                          ; WAIT UNTIL THE PORT BECOMES FREE
0C86  37        02449         SCF                                     ; FORM THE 'START BIT'
0C87  F3        02450         DI                                      ; INTERRUPT OFF
                02451 LOT3
0C88  CE00      02452         ADC     A,00H                           ; 'CARRY SET' SENDS 'HIGH'; 'RESET' SENDS 'LOW'
0C8A  D3F7      02453         OUT     (RS232),A                       ; SEND OUT BIT 0
0C8C  54        02454         LD      D,H                             ; FETCH THE TIMING LOOP VALUE (BAUD)
0C8D  5D        02455         LD      E,L
                02456 LOT4
0C8E  1B        02457         DEC     DE
0C8F  7A        02458         LD      A,D
0C90  B3        02459         OR      E
0C91  20FB      02460         JR      NZ,LOT4                         ; ROUND TIMING LOOP UNTIL EXHAUSTED
0C93  1B        02461         DEC     DE                              ; WASTE 6 T-STATES
0C94  AF        02462         XOR     A                               ; CLEAR THE 'A' REGISTER
0C95  CB39      02463         SRL     C                               ; BITS GO INTO CARRY (LSB FIRST)
                02464                                                 ; TRUE VALUES ARE SENT 'INVERTED'
                02465                                                 ; THE STOP BITS ARE FORMED BY THE LAST TWO " NC'S "
0C97  10EF      02466         DJNZ    LOT3                            ; ROUND FOR ALL THE BITS
                02467                                                 ; TIME BETWEEN BITS IS - 'LOOP COUNT' + 57 T-STATES
0C99  FB        02468         EI                                      ; INTERRUPT ON BEFORE CONTINUING INTO B_COL
0C9A  3E01      02469         LD      A,1                             ; DEACTIVATE THE NET
0C9C  0EEF      02470         LD      C,PORTC
0C9E  06EE      02471         LD      B,CTS.AND.SELD                  ; RESELECT THE NET
0CA0  D3F7      02472         OUT     (SERIAL),A
0CA2  ED41      02473         OUT     (C),B
                02474 LOT5
0CA4  2B        02475         DEC     HL                              ; WAIT FOR THE NOISE TO GO AWAY
0CA5  7D        02476         LD      A,L
0CA6  B4        02477         OR      H
0CA7  20FB      02478         JR      NZ,LOT5
                02479 
                02480 
                02481 ;______________________________________________________________________
                02482 
                02483 
                02484 
0CA9  3A485C    02485 B_COL   LD      A,(BORDCR)                      ; RETURN THE ORIGINAL BORDER COLOUR
0CAC  E638      02486         AND     38H
0CAE  0F        02487         RRCA
0CAF  0F        02488         RRCA
0CB0  0F        02489         RRCA
0CB1  D3FE      02490         OUT     (0FEH),A
0CB3  C9        02491         RET
                02492 ERRH
0CB4  FB        02493         EI
0CB5  CDA90C    02494         CALL    B_COL
0CB8  FD360014  02495         LD      (IY+ERR_NR-Y),14H
0CBC  EF        02496         RST     ROMERR
                02497 
                02498 ;______________________________________________________________________
                02499 *INCLUDE SH_NET.S
                02500 ;
                02501 ;******************************************************************************
                02502 ;
                02503 ;               NET  MODULE
                02504 ;
                02505 ;******************************************************************************
                02506 
                02507 
                02508 
                02509 ;               GLOBAL ACT_ON           ;OPEN A NET STREAM
                02510 ;               GLOBAL IN_N             ;INCH FOR INPUT/INKEY$
                02511 ;               GLOBAL OUT_N            ;WRCH FOR NET
                02512 ;               GLOBAL NTCLSE           ;SEND A 'CLOSED' NET BUFFER
                02513 ;               GLOBAL NOPEN            ;OPEN A NET CHANNEL
                02514 ;               GLOBAL NTEMP            ;OPEN A TEMPORARY CHANNEL
                02515 ;               GLOBAL IN_BYT           ;ACTUAL INCH ROUTINE (ALL CASES)
                02516 ;               GLOBAL CHANGE           ;CHANGE INPUT/INKEY$ AS NEEDED
                02517 ;               GLOBAL  ONETO           ;OUTPUT TO NET WITHOUT WAITING
                02518 ;               EXTERNAL B_COL          ;RESTORE ORIGINAL BORDER COLOUR
                02519 ;               EXTERNAL RETBAS                 ;EXIT VIA PAGING MECHANISM
                02520 ;               EXTERNAL STR_OF                 ;ENTER STREAM DATA BYTES
                02521 ;       EXTERNAL        RELNAM
                02522 
                02523 ;       GLOBAL OUTPAK,RSPOND,INPAK,GETPAK,OUTNET,OUTSCT,INSCT
                02524 
                02525 
                02526 ; DATA ON THE NET IS FORMATTED INTO 'PACKET SETS'. A PACKET SET COMPRISES
                02527 ; (1) A 'SCOUT', WHICH IS THE STATION NO. OUTPUT SLOWLY.
                02528 ; (11) A HEADER PACKET OF 8 BYTES:
                02529 ;     THE STATION NO. OF THE DESTINATION.
                02530 ;     THE STATION NO. OF THE SENDER.
                02531 ;     THE TYPE OF THE PACKET SET ('DATA' OR 'CLOSE').
                02532 ;     THE LENGTH OF THE DATA BLOCK ('0' & '255').
                02533 ;     THE NUMBER OF THE BLOCK ('0' - '65535').
                02534 ;     A CHECKSUM FOR THE DATA.
                02535 ;     A CHECKSUM FOR THE FIRST SEVEN BYTES OF THIS HEADER.
                02536 ; (111) A DATA PACKET, BETWEEN 1 & 255 BYTES (OMITTED IF NO DATA).
                02537 
                02538 
                02539 ;       THE DATA FOR A NET CHANNEL IS AS FOLLOWS:
                02540 
                02541 ;DEFW   0008H                                   ; SHADOW ROM VECTOR
                02542 ;DEFW   0008H                                   ; SHADOW ROM VECTOR
    = 0004      02543 NCCODE  EQU     04H                             ; 'N'
    = 0005      02544 NCWRCH  EQU     05H                             ; WRCH ADDRESS
    = 0007      02545 NCINCH  EQU     07H                             ; INCH ADDRESS
    = 0009      02546 NCILEN  EQU     09H                             ; LENGTH OF NET CHANNEL DATA
                02547 
                02548                 ; OUTPUT DETAILS - THE NEXT 8 BYTES ALSO FORM THE HEADER
    = 000B      02549 NCIRIS  EQU     0BH                             ; 'IRIS' STATION NUMBER - DESTINATION
    = 000C      02550 NCSELF  EQU     0CH                             ; OWN STATION NUMBER
    = 000D      02551 NCNUMB  EQU     0DH                             ; BLOCK NUMBER ('0' TO '65535')
    = 000F      02552 NCTYPE  EQU     0FH                             ; TYPE OF PACKET - 'DATA' OR 'CLOSE'
    = 0010      02553 NCOBL   EQU     10H                             ; OUTPUT BUFFER LENGTH
    = 0011      02554 NCDCS   EQU     11H                             ; DATA CHECKSUM
    = 0012      02555 NCHCS   EQU     12H                             ; HEADER CHECKSUM
                02556 
                02557                 ; INPUT DETAILS
    = 0013      02558 NCCUR   EQU     13H                             ; NUMBER OF LAST CHARACTER TAKEN DURING INPUT
    = 0014      02559 NCIBL   EQU     14H                             ; INPUT BUFFER LENGTH
                02560 
                02561                 ; AND FINALLY THE BUFFER
    = 0015      02562 NCB     EQU     15H                             ; BUFFER FOR INPUT & OUTPUT OF 255 LOCATIONS
    = 0114      02563 NCEND   EQU     N_LEN
                02564 
                02565 
                02566 ;       TOTAL LENGTH = 0114H  = 276 DECIMAL BYTES
                02567 
                02568 ;______________________________________________________________________
                02569  
                02570                 ; CHANGE SUBROUTINE
                02571                 ; COMMON TO BOTH NET & DRIVE SOFTWARE
0CBD  FDCB029E  02572 CHANGE  RES     3,(IY+TV_FLAG-Y)                ; CORRECT THE ERROR ON EACH CALL
                02573 
0CC1  E5        02574         PUSH    HL                              ; ROUTINE ADDRESS TO STACK DURING THE TEST
0CC2  2A3D5C    02575         LD      HL,(ERR_SP)                     ; FETCH THE ERROR POINTER
0CC5  5E        02576         LD      E,(HL)                          ; FETCH THE LOW BYTE
0CC6  23        02577         INC     HL
0CC7  56        02578         LD      D,(HL)                          ; AND THE HIGH BYTE
0CC8  A7        02579         AND     A                               ; PREPARE FOR A TRUE SUBTRACTION
0CC9  217F10    02580         LD      HL,107FH                        ; ADDRESS OF ED_ERROR (IN EDITOR)
0CCC  ED52      02581         SBC     HL,DE                           ; DOES THE ERROR STACK POINTER ADDRESS 107FH?
0CCE  202B      02582         JR      NZ,MRDCH8                       ; JUMP TO THE INCH ROUTINE FOR INKEY$#N
0CD0  E1        02583         POP     HL                              ; RESTORE ROUTINE ADDRESS
                02584                                                 ; CONTINUE FOR INPUT #N
                02585 
                02586                 ; DROP THE STACK BACK
0CD1  ED7B3D5C  02587         LD      SP,(ERR_SP)
0CD5  D1        02588         POP     DE
0CD6  D1        02589         POP     DE
0CD7  ED533D5C  02590         LD      (ERR_SP),DE
                02591 
                02592                 ; PUSH A RETURN ADDRESS ON THE STACK
0CDB  E5        02593 MRDCH4  PUSH    HL                              ; THE ACTUAL INPUT ROUTINE ADDRESS
0CDC  11E10C    02594         LD      DE,MRDCH5
0CDF  D5        02595         PUSH    DE
0CE0  E9        02596         JP      (HL)                            ; JUMP TO ACTUAL INPUT ROUTINE
                02597 
                02598 MRDCH5
0CE1  380A      02599         JR      C,MRDCH6
0CE3  2805      02600         JR      Z,MRD55                         ; TRY AGAIN
                02601 MRDC10
0CE5  FD360007  02602         LD      (IY+ERR_NR-Y),7                 ; OR EOF
0CE9  EF        02603         RST     ROMERR
                02604 MRD55
0CEA  E1        02605         POP     HL
0CEB  18EE      02606         JR      MRDCH4
                02607 
                02608                 ; CONSIDER THE CHARACTER
0CED  FE0D      02609 MRDCH6  CP      0DH                             ; END OF LINE?
0CEF  2806      02610         JR      Z,MRDCH7
0CF1  D7        02611         RST     CALBAS
0CF2  850F      02612         DEFW    0F85H                           ; ENTER IT INTO INPUT BUFFER
0CF4  E1        02613         POP     HL                              ; FETCH INPUT ROUTINE ADDRESS
0CF5  18E4      02614         JR      MRDCH4                          ; ROUND AGAIN
                02615 
                02616                 ; TO EXIT
0CF7  E1        02617 MRDCH7  POP     HL                              ; DROP INPUT ROUTINE ADDRESS
0CF8  C30007    02618         JP      RETBAS                          ; EXIT
                02619 
                02620 MRDCH8
0CFB  E1        02621         POP     HL
0CFC  11010D    02622         LD      DE,MRDCH9                       ; PUSH A RETURN ADDRESS ONTO THE STACK
0CFF  D5        02623         PUSH    DE
0D00  E9        02624         JP      (HL)                            ; AND "CALL" THE INPUT ROUTINE
                02625 MRDCH9
0D01  D8        02626         RET     C                               ; RETURN UNLESS EOF
0D02  C8        02627         RET     Z
0D03  FDCB7C66  02628         BIT     4,(IY+FLAGS3-Y)                 ; NO REPORT IN MOVE
0D07  28DC      02629         JR      Z,MRDC10
0D09  F601      02630         OR      1                               ; JUST NC,NZ
0D0B  C9        02631         RET
                02632 
                02633 
                02634 ;______________________________________________________________________
                02635 
                02636 IN_N            ; THE INCH ROUTINE FOR THE NET
                02637                 ; LOOKS IN THE BUFFER FOR A CHARACTER
                02638                 ; TAKE IT IF ONE IS FOUND
                02639                 ; IF NOT AWAITS A FURTHER PACKET
                02640 
0D0C  21120D    02641         LD      HL,IN_BYT                       ; THE ACTUAL INPUT ROUTINE
0D0F  C3BD0C    02642         JP      CHANGE
                02643 
                02644 ;______________________________________________________________________
                02645 
0D12  DD2A515C  02646 IN_BYT  LD      IX,(CURCHL)                     ; FETCH BASE ADDRESS OF CHANNEL AREA
                02647 
0D16  DD7E10    02648         LD      A,(IX+NCOBL)                    ; FETCH THE 'OUTPUT' LENGTH
0D19  A7        02649         AND     A
0D1A  2802      02650         JR      Z,IN_B0                         ; JUMP IF O.K.
                02651 
0D1C  E7        02652         RST     SH_ERR
0D1D  0D        02653         DEFB    0DH                             ; 'READING FROM A 'WRITE; FILE'
                02654 
0D1E  DD7E14    02655 IN_B0   LD      A,(IX+NCIBL)                    ; PRESENT LENGTH OF BUFFER - '0' TO '255'
0D21  A7        02656         AND     A                               ; COULD IT BE ZERO?
0D22  2814      02657         JR      Z,IN_B1                         ; JUMP IF IT IS
0D24  DD5E13    02658         LD      E,(IX+NCCUR)                    ; NUMBER OF LAST CHARACTER TAKEN - '0' TO '255'
0D27  3D        02659         DEC     A
0D28  93        02660         SUB     E
0D29  380D      02661         JR      C,IN_B1                         ; JUMP IF BUFFER EMPTY
                02662 
                02663                 ; NOW FETCH A CHARACTER
0D2B  1600      02664         LD      D,00H
0D2D  1C        02665         INC     E                               ; CONSIDER THE REQUIRED CHARACTER LOCATION
0D2E  DD7313    02666         LD      (IX+NCCUR),E                    ; UPDATE THE POINTER
0D31  DD19      02667         ADD     IX,DE
0D33  DD7E14    02668         LD      A,(IX+NCB-1)                    ; FETCH THE CHARACTER
0D36  37        02669         SCF                                     ; INKEY$#N REQUIRES CARRY SET
0D37  C9        02670         RET                                     ; SUCCESSFUL SO RETURN TO - FOR INPUT - MRDCH6
                02671                                                 ;                         - FOR INKEY$- RETBAS
                02672 
                02673                 ; ELSE FETCH ANOTHER BUFFER
                02674                 ; BUT FIRST SEE IF INPUT HAS BEEN CLOSED
0D38  DD7E0F    02675 IN_B1   LD      A,(IX+NCTYPE)                   ; FETCH CURRENT TYPE FLAG
0D3B  A7        02676         AND     A                               ; IS IT 'DATA' OR 'CLOSE'
0D3C  2801      02677         JR      Z,IN_B15
0D3E  C9        02678         RET                                     ; EOF RETURN NC,NZ
                02679 ;
                02680 IN_B15
0D3F  3AC65C    02681         LD      A,(DR+IOBORD)
0D42  D3FE      02682         OUT     (0FEH),A                        ; CHANGE THE BORDER COLOUR AS SPECIFIED (BLACK DEFAULT)
                02683 
0D44  F3        02684         DI                                      ; INTERRUPT OFF
                02685 
                02686                 ; NOW ENTER A LOOP TO FIND A SUITABLE BLOCK
0D45  CD1E0F    02687 IN_B2   CALL    INSCT                           ; WAIT FOR A SCOUT - ALLOWING FOR 'BREAK'
0D48  3015      02688         JR      NC,IN_B3                        ; JUMP ON TIMEOUT
0D4A  CD180E    02689         CALL    GETPAK                          ; GET A PACKET - HEADER & DATA
                02690                                                 ; RETURN Z IF O.K.
                02691                                                 ; BUT NZ FOR ANY OF THE REASONS FOR FAILURE
0D4D  2010      02692         JR      NZ,IN_B3                        ; FAILED WITH SCOUT
0D4F  FB        02693         EI
                02694 
                02695                 ; THE BUFFER HAS BEEN REFILLED - OR PARTLY SO
0D50  CDA90C    02696         CALL    B_COL                           ; BORDER COLOUR RESTORED
0D53  DD361300  02697         LD      (IX+NCCUR),00H                  ; RESET THE CHARACTER COUNTER
0D57  3AD25C    02698         LD      A,(DR+NTTYPE)                   ; COPY OVER THE TYPE FLAG
0D5A  DD770F    02699         LD      (IX+NCTYPE),A                   ; 'DATA' OR 'CLOSE'
0D5D  18BF      02700         JR      IN_B0                           ; ROUND AGAIN
                02701 
                02702 IN_B3
0D5F  DD7E0B    02703         LD      A,(IX+NCIRIS)                   ; ARE WE EXPECTING A BROADCAST?
0D62  A7        02704         AND     A
0D63  28E0      02705         JR      Z,IN_B2                         ; YES...GET BACK AND POLL
0D65  FB        02706         EI                                      ; TIMEOUT OR OTHER FAILURE ON GETPAK
0D66  CDA90C    02707         CALL    B_COL
0D69  E600      02708         AND     0                               ; RETURN                NC,Z
0D6B  C9        02709         RET
                02710 
                02711 ;________________________________________________________________________
                02712 
                02713 
                02714 
                02715 OUT_N           ; WRCH ROUTINE FOR THE NET
                02716 
0D6C  DD2A515C  02717         LD      IX,(CURCHL)                     ; FETCH THE BASE ADDRESS OF THE CHANNEL DATA
0D70  47        02718         LD      B,A                             ; PASS CHARACTER TO B
0D71  DD7E14    02719         LD      A,(IX+NCIBL)                    ; FETCH THE 'INPUT' LENGTH
0D74  A7        02720         AND     A
0D75  78        02721         LD      A,B                             ; RESTORE CHARACTER TO A
0D76  2802      02722         JR      Z,OUT_N0                        ; JUMP IF O.K.
                02723 
0D78  E7        02724         RST     SH_ERR
0D79  0C        02725         DEFB    0CH                             ; 'WRITING TO A 'READ' FILE'
                02726 
0D7A  DD5E10    02727 OUT_N0  LD      E,(IX+NCOBL)                    ; HOW MANY CHARACTERS ARE IN THE BUFFER?
0D7D  1C        02728         INC     E                               ; ADD '1' FOR THE PRESENT CHARACTER BEING HANDLED
0D7E  2008      02729         JR      NZ,OUT_N1                       ; JUMP UNLESS THAT MAKES '256' IN THE BUFFER
                02730 
                02731                 ; BUFFER FULL - SO SEND THE '255' CHARACTERS PRESENT
0D80  F5        02732         PUSH    AF                              ; SAVE THE PRESENT CHARACTER ON THE STACK
0D81  AF        02733         XOR     A                               ; SIGNAL TYPE 'DATA'
0D82  CDAB0D    02734         CALL    OUTNET                          ; SEND THE BUFFER
0D85  F1        02735         POP     AF                              ; RETRIEVE THE PRESENT CHARACTER
0D86  1E01      02736         LD      E,01H                           ; RESET THE BUFFER COUNTER
                02737 
                02738                 ; NOW PUT THE CHARACTER IN THE BUFFER
0D88  DD7310    02739 OUT_N1  LD      (IX+NCOBL),E                    ; ENTER UPDATED COUNTER
0D8B  1600      02740         LD      D,00H                           ; CLEAR D
0D8D  DD19      02741         ADD     IX,DE                           ; ADD TO IX
0D8F  DD7714    02742         LD      (IX+NCB-1),A                    ; FINALLY ENTER THE CHARACTER
0D92  C9        02743         RET                                     ; FINISHED
                02744 
                02745 ;______________________________________________________________________
                02746 
                02747 
                02748 SNDPAK          ; SEND A PACKET OF E BYTES FROM '(HL)'
                02749                 ; TO FORM A HEADER OR A DATA BLOCK
                02750                 ; DO NOT WAIT FOR A RESPONSE IF SENDING A BROADCAST
                02751 
0D93  CDC50F    02752         CALL    OUTPAK                          ; SEND OUT A PACKET
0D96  DD7E0B    02753         LD      A,(IX+NCIRIS)                   ; THE PRESENT DESTINATION STATION NUMBER
0D99  A7        02754         AND     A
0D9A  C8        02755         RET     Z                               ; RETURN IF SENDING A BROADCAST
0D9B  21CD5C    02756         LD      HL,DR+NTRESP
0D9E  3600      02757         LD      (HL),00H                        ; CLEAR THE RESPONSE FLAG
0DA0  1E01      02758         LD      E,01H
0DA2  CD920F    02759         CALL    INPAK                           ; ONE BYTE RESPONSE AWAITED
0DA5  C0        02760         RET     NZ                              ; RETURN NOW ON TIME-OUT
0DA6  3ACD5C    02761         LD      A,(DR+NTRESP)                   ; FETCH RESPONSE
0DA9  3D        02762         DEC     A                               ; THE CORRECT '1' SETS THE Z FLAG
0DAA  C9        02763         RET                                     ; Z SET IF O.K; ELSE RESET
                02764 
                02765 
                02766 ;______________________________________________________________________
                02767 
                02768 OUTNET          ; SEND A BUFFER OUT
0DAB  CDB20D    02769         CALL    ONET0
0DAE  C0        02770         RET     NZ                              ; NOT A BROADCAST RETURN NO DELAY
0DAF  C30F0E    02771         JP      BROADL
                02772 
                02773 ONET0
                02774                 ; 'A' HOLDS THE TYPE CODE - 'DATA' OR 'CLOSE'
0DB2  DD770F    02775         LD      (IX+NCTYPE),A                   ; '0' FOR 'DATA'; '1' FOR 'CLOSE'
0DB5  DD4610    02776         LD      B,(IX+NCOBL)                    ; NUMBER OF BYTES IN THE BUFFER
0DB8  3AC65C    02777         LD      A,(DR+IOBORD)
0DBB  D3FE      02778         OUT     (0FEH),A                        ; CHANGE THE BORDER COLOUR AS SPECIFIED (BLACK DEFAULT)
0DBD  DDE5      02779         PUSH    IX
0DBF  D1        02780         POP     DE                              ; BASE ADDRESS TO DE
0DC0  211500    02781         LD      HL,NCB                          ; THE BUFFER OFFSET
0DC3  19        02782         ADD     HL,DE                           ; POINT TO THE BUFFER
0DC4  AF        02783         XOR     A
0DC5  86        02784 ONET1   ADD     A,(HL)                          ; ADD IN EACH BYTE
0DC6  23        02785         INC     HL                              ; STEP ON
0DC7  10FC      02786         DJNZ    ONET1
0DC9  DD7711    02787         LD      (IX+NCDCS),A                    ; ENTER THE DATA CHECKSUM
                02788 
                02789                 ; NOW FIND THE HEADER CHECKSUM
0DCC  210B00    02790         LD      HL,NCIRIS                       ; THE FIRST OF THE HEADER BYTES
0DCF  19        02791         ADD     HL,DE
0DD0  E5        02792         PUSH    HL                              ; SAVE THE POINTER TO NCIRIS
0DD1  0607      02793         LD      B,NCDCS-NCIRIS+1                ; ADD THE FIRST SEVEN BYTES OF THE HEADER
0DD3  AF        02794         XOR     A                               ; CLEAR THE ACCUMULATOR
0DD4  86        02795 ONET2   ADD     A,(HL)                          ; ADD IN EACH BYTE
0DD5  23        02796         INC     HL                              ; STEP ON
0DD6  10FC      02797         DJNZ    ONET2                           ; ROUND UNTIL FINISHED
0DD8  77        02798         LD      (HL),A                          ; ENTER RESULT INTO 'NCHCS'
0DD9  F3        02799         DI                                      ; INTERRUPT OFF NOW
                02800 
                02801                 ; THE HEADER HAS NOW BEEN SET UP IN THE CHANNEL DATA AREA
                02802                 ; POINTER TO IT IS ON THE STACK
0DDA  CD610F    02803 ONET3   CALL    OUTSCT                          ; SEND OUT A SCOUT  (WAITING UNTIL SUCCESSFUL)
0DDD  E1        02804         POP     HL
0DDE  E5        02805         PUSH    HL                              ; RETRIEVE POINTER TO 'NCIRIS'
0DDF  1E08      02806         LD      E,NCHCS-NCIRIS+1                ; THE LENGTH OF THE HEADER
0DE1  CD930D    02807         CALL    SNDPAK
0DE4  20F4      02808         JR      NZ,ONET3                        ; NOT ACKNOWLEDGED - SO TRY AGAIN
                02809                                                 ; A BROADCAST WILLL ALWAYS 'PASS'THROUGH
                02810 
                02811                 ; HEADER HAS NOW BEEN SENT
0DE6  DDE5      02812         PUSH    IX
0DE8  E1        02813         POP     HL                              ; BASE ADDRESS TO HL
0DE9  111500    02814         LD      DE,NCB                          ; BUFFER OFFSET
0DEC  19        02815         ADD     HL,DE                           ; POINT TO BUFFER
0DED  DD5E10    02816         LD      E,(IX+NCOBL)                    ; FETCH LENGTH
0DF0  7B        02817         LD      A,E                             ; TAKE A COPY
0DF1  A7        02818         AND     A                               ; TEST IT
0DF2  2809      02819         JR      Z,ONET4                         ; JUMP IF NO DATA
                02820 
                02821                 ; NOW SEND THE DATA BLOCK
0DF4  0620      02822         LD      B,20H
0DF6  10FE      02823         DJNZ    $                               ; JUST WAIT A WHILE HOWEVER
0DF8  CD930D    02824         CALL    SNDPAK
0DFB  20DD      02825         JR      NZ,ONET3                        ; NOT ACKNOWLEDGED - SO TRY AGAIN
                02826                                                 ; A BROADCAST WILL ALWAYS 'PASS'THROUGH
                02827 
                02828                 ; UPDATE POINTERS AND TIDY UP
0DFD  DD340D    02829 ONET4   INC     (IX+NCNUMB)                     ; UPDATE THE BLOCK NUMBER
0E00  2003      02830         JR      NZ,ONET5
0E02  DD340E    02831         INC     (IX+NCNUMB+1)                   ; INCLUDING HIGH BYTE IF NECESSARY
0E05  E1        02832 ONET5   POP     HL                              ; DROP POINTER
0E06  CDA90C    02833         CALL    B_COL                           ; RESET THE BORDER COLOUR
0E09  FB        02834         EI                                      ; INTERRUPT ON
                02835 
0E0A  DD7E0B    02836         LD      A,(IX+NCIRIS)                   ; FETCH THE 'DESTINATION' NUMBER
0E0D  A7        02837         AND     A                               ; TEST IT
0E0E  C9        02838         RET
                02839 
                02840 BROADL          ; DELAY FOR SPACING OUT BROADCASTS
0E0F  110015    02841         LD      DE,1500H
0E12  1B        02842 ONET6   DEC     DE
0E13  7B        02843         LD      A,E
0E14  B2        02844         OR      D
0E15  20FB      02845         JR      NZ,ONET6
0E17  C9        02846         RET                                     ; EXIT
                02847 
                02848 
                02849 
                02850 ;______________________________________________________________________
                02851 
                02852 
                02853 GETPAK          ; COME HERE ONCE A SCOUT HAS BEEN FOUND
                02854                 ; FIRST AWAIT THE HEADER, THEN FETCH THE DATA BLOCK
                02855 
0E18  21CE5C    02856         LD      HL,DR+NTDEST                    ; THE HEADER IS COPIED INTO THE SHADOW SYS. VARS.
0E1B  1E08      02857         LD      E,08H                           ; THERE WILL BE '8' BYTES IN ALL
0E1D  CD920F    02858         CALL    INPAK                           ; FETCH THE HEADER
0E20  C0        02859         RET     NZ                              ; RETURN NOW IF 'TIME-OUT'
                02860 
                02861                 ; PROCEED TO ANALYSE THE HEADER
                02862                 ; FIRST EXAMINE THE CHECKSUM
0E21  21CE5C    02863         LD      HL,DR+NTDEST
0E24  AF        02864         XOR     A
0E25  0607      02865         LD      B,07H                           ; NOW MATCH THE HEADER CHECKSUM
0E27  86        02866 GET1    ADD     A,(HL)                          ; ADD EACH BYTE IN
0E28  23        02867         INC     HL
0E29  10FC      02868         DJNZ    GET1                            ; ROUND FOR EACH
0E2B  BE        02869         CP      (HL)                            ; AND TEST IT AGAINST 'NTHCS'
0E2C  C0        02870         RET     NZ                              ; RETURN IF INCORRECT  - NZ
                02871 
0E2D  3ACE5C    02872         LD      A,(DR+NTDEST)                   ; IS IT A BROADCAST
0E30  A7        02873         AND     A
0E31  280D      02874         JR      Z,GET15
                02875 
0E33  DDBE0C    02876         CP      (IX+NCSELF)                     ; NO...IS IT MEANT FOR US
0E36  C0        02877         RET     NZ
                02878 
0E37  3ACF5C    02879         LD      A,(DR+NTSRCE)                   ; IS IT FROM THE RIGHT IRIS
0E3A  DDBE0B    02880         CP      (IX+NCIRIS)
0E3D  C0        02881         RET     NZ
0E3E  1805      02882         JR      GET2
                02883 GET15
0E40  DD7E0B    02884         LD      A,(IX+NCIRIS)                   ; BROADCAST...IS IS EXPECTED?
0E43  B7        02885         OR      A
0E44  C0        02886         RET     NZ
                02887 
                02888 GET2
0E45  2AD05C    02889         LD      HL,(DR+NTNUMB)                  ; IS IT THE RIGHT BLOCK
0E48  DD5E0D    02890         LD      E,(IX+NCNUMB)
0E4B  DD560E    02891         LD      D,(IX+NCNUMB+1)
0E4E  A7        02892         AND     A
0E4F  ED52      02893         SBC     HL,DE
0E51  2812      02894         JR      Z,GET3                          ; YES..READ IT
                02895 
0E53  2B        02896         DEC     HL                              ; WAS IT THE ONE BEFORE?
0E54  7C        02897         LD      A,H
0E55  B5        02898         OR      L
0E56  C0        02899         RET     NZ                              ; NO...NO GOOD
                02900 
0E57  CD650E    02901         CALL    GET3                            ; YES... THE SENDER MUST HAVE MISSED
0E5A  DD350D    02902         DEC     (IX+NCNUMB)                     ; OUR ACK...RESPOND TO IT AGAIN
0E5D  3003      02903         JR      NC,GET25                        ; CORRECT THE BLOCK NUMBER
0E5F  DD350E    02904         DEC     (IX+NCNUMB+1)
                02905 GET25
0E62  F601      02906         OR      1                               ; AND RETURN UNSATISFIED
0E64  C9        02907         RET
                02908 GET3
0E65  3ACE5C    02909         LD      A,(DR+NTDEST)                   ; IS A RESPONSE WANTED TO HEADER
0E68  B7        02910         OR      A
0E69  C4BE0F    02911         CALL    NZ,RSPOND
                02912 GET35
0E6C  3AD35C    02913         LD      A,(DR+NTLEN)                    ; FETCH THE LENGTH OF THE INCOMING BLOCK
0E6F  A7        02914         AND     A
0E70  2821      02915         JR      Z,GET5                          ; JUMP IF OF 'NULL' LENGTH
0E72  DDE5      02916         PUSH    IX
0E74  E1        02917         POP     HL                              ; BASE ADDRESS TO HL
0E75  111500    02918         LD      DE,NCB                          ; BUFFER OFFSET
0E78  19        02919         ADD     HL,DE                           ; HL POINTS TO THE BUFFER
0E79  E5        02920         PUSH    HL                              ; SAVE A COPY OF THIS BASE ADDRESS
0E7A  5F        02921         LD      E,A                             ; MOVE THE LENGTH TO E
0E7B  CD920F    02922         CALL    INPAK                           ; FETCH THE DATA BLOCK
0E7E  E1        02923         POP     HL                              ; RETREIVE THE BASE ADDRESS
0E7F  C0        02924         RET     NZ                              ; BUT RETURN NZ IF TIME-OUT
                02925 
                02926                 ; CHECK DATA BLOCK CHECKSUM
0E80  3AD35C    02927         LD      A,(DR+NTLEN)                    ; NUMBER OF BYTES
0E83  47        02928         LD      B,A                             ; PASS IT TO B
0E84  3AD45C    02929         LD      A,(DR+NTDCS)                    ; FETCH THE 'DATA CHECKSUM'
0E87  96        02930 GET4    SUB     (HL)                            ; SUBTRACT EACH BYTE IN THE BLOCK
0E88  23        02931         INC     HL                              ; STEP ON
0E89  10FC      02932         DJNZ    GET4                            ; ROUND UNTIL FINISHED
0E8B  C0        02933         RET     NZ                              ; RETURN IF CHECKSUM IS WRONG
                02934 
                02935                 ; NOW ACKNOWLEDGE THE BLOCK IF NEEDED
0E8C  3ACE5C    02936         LD      A,(DR+NTDEST)                   ; FETCH 'DESTINTATION STATION' NUMBER
0E8F  A7        02937         AND     A                               ; TEST IT
0E90  C4BE0F    02938         CALL    NZ,RSPOND                       ; ACKNOWLEDGE THE BLOCK UNLESS IT WAS A BROADCAST
                02939 
                02940                 ; UPDATE AS NEEDED
0E93  3AD35C    02941 GET5    LD      A,(DR+NTLEN)
0E96  DD7714    02942         LD      (IX+NCIBL),A                    ; UPDATE THE INPUT LENGTH
                02943 
0E99  DD340D    02944         INC     (IX+NCNUMB)                     ; UPDATE THE BLOCK NUMBER
0E9C  2003      02945         JR      NZ,GET6
0E9E  DD340E    02946         INC     (IX+NCNUMB+1)                   ; INCLUDING HIGH BYTE IF NECESSARY
                02947 
                02948                                                 ; EXIT Z
0EA1  BF        02949 GET6    CP      A
0EA2  C9        02950         RET
                02951 
                02952 
                02953 ;______________________________________________________________________
                02954 
                02955 
                02956 
                02957 ACT_ON          ; OPEN A CHANNEL FOR THE NET
                02958 
0EA3  CDB50E    02959         CALL    NOPEN
0EA6  C34A0B    02960         JP      STR_OF                          ; ENTER CHANNEL DATA AND THEN THE STREAM DATA
                02961 
                02962 
                02963 ;______________________________________________________________________
                02964 
                02965 
                02966 
                02967 NTEMP           ; OPEN A NET CHANNEL 'MARKED TEMPORARY'
0EA9  CDB50E    02968         CALL    NOPEN
0EAC  DD2A515C  02969         LD      IX,(CURCHL)                     ; BASE ADDRESS
0EB0  DDCB04FE  02970         SET     7,(IX+NCCODE)                   ; MARK IT
0EB4  C9        02971         RET
                02972 
                02973 ;______________________________________________________________________
                02974 
                02975 
                02976                 ; ENTER THE CHANNEL DATA AS FOLLOWS
0EB5  2A535C    02977 NOPEN   LD      HL,(PROG)                       ; THE DATA GOES BEFORE THE BASIC PROGRAM
0EB8  2B        02978         DEC     HL
0EB9  011401    02979         LD      BC,N_LEN                        ; NUMBER OF BYTES IN A NET AREA
0EBC  C5        02980         PUSH    BC
0EBD  D7        02981         RST     CALBAS
0EBE  5516      02982         DEFW    1655H                           ; INSERT CHANNEL DATA FOR A NET STREAM
0EC0  23        02983         INC     HL
0EC1  C1        02984         POP     BC
0EC2  CD9916    02985         CALL    RELNAM                          ; RELOCATE FILENAMES FOR MOVE "N" TO "M"
0EC5  22515C    02986         LD      (CURCHL),HL                     ; MAKE THE NEW CHANNEL THE 'CURRENT CHANNEL'
0EC8  EB        02987         EX      DE,HL
0EC9  21EA0E    02988         LD      HL,NETINI                       ; THE INITIALIZATION DATA BASE ADDRESS
0ECC  010B00    02989         LD      BC,000BH                        ; THERE ARE '11' FIXED NUMBERS
0ECF  EDB0      02990         LDIR                                    ; COPY THEM FROM THE TABLE
0ED1  3AD65C    02991         LD      A,(DR+D_STR1)                   ; ENTER THE 'IRIS' STATION NUMBER
0ED4  12        02992         LD      (DE),A
0ED5  13        02993         INC     DE                              ; STEP ON
0ED6  3AC55C    02994         LD      A,(DR+NTSTAT)                   ; ENTER OUT PRESENT STATION NUMBER
0ED9  12        02995         LD      (DE),A
0EDA  13        02996         INC     DE                              ; STEP ON
0EDB  AF        02997         XOR     A
                02998 
0EDC  12        02999         LD      (DE),A                          ; A FIRST ZERO
0EDD  62        03000         LD      H,D
0EDE  6B        03001         LD      L,E
0EDF  13        03002         INC     DE
0EE0  010601    03003         LD      BC,NCEND-NCNUMB-1
0EE3  EDB0      03004         LDIR                                    ; COPY ZERO THROUGHOUT BUFFER
0EE5  ED5B515C  03005         LD      DE,(CURCHL)                     ; RETURN WITH BASE ADDRESS IN DE & (CURCHL)
0EE9  C9        03006         RET
                03007 
                03008 
                03009 NETINI          ; INITIALIZATION DATA FOR A NET CHANNEL
0EEA  0800      03010         DEFW    0008H
0EEC  0800      03011         DEFW    0008H
0EEE  4E        03012         DEFB    'N'
0EEF  6C0D      03013         DEFW    OUT_N
0EF1  0C0D      03014         DEFW    IN_N
0EF3  1401      03015         DEFW    N_LEN
                03016 
                03017 
                03018 ;______________________________________________________________________
                03019 
                03020 
                03021 
                03022 NTCLSE          ; EMPTY THE NET BUFFER IF ANY UNSENT OUTPUT PRESENT
0EF5  DD2A515C  03023         LD      IX,(CURCHL)                     ; FETCH BASE POINTER
0EF9  DD7E10    03024         LD      A,(IX+NCOBL)                    ; FETCH LENGTH
0EFC  A7        03025         AND     A
0EFD  C8        03026         RET     Z                               ; RETURN IF NO OUTPUT TO BE SENT
0EFE  3E01      03027         LD      A,01H                           ; BUT WHEN THERE IS - SET 'CLOSE'
0F00  C3AB0D    03028         JP      OUTNET                          ; SEND THE BUFFER
                03029 
                03030 
                03031 ;______________________________________________________________________
                03032 
                03033 
                03034 
                03035 NETIDL          ; WAIT FOR THE NET TO BECOME FREE   3 - 5 MS APPROX.
                03036                 ; ALLOWS FOR BREAK TO BE READ
                03037                 ; TAKING THE CURRENT VALUE OF 'R' RANDOMIZES THE DELAY
                03038 
0F03  ED5F      03039         LD      A,R                             ; FETCH THE 'R' REGISTER
0F05  F6C0      03040         OR      0C0H                            ; SET BITS 6 & 7
0F07  47        03041         LD      B,A
0F08  CD0E0F    03042         CALL    IDLE_1                          ; WAIT A 'RANDOMIZED' DELAY
0F0B  38F6      03043         JR      C,NETIDL                        ; REPEAT IT ALL IF 'BUSY'
0F0D  C9        03044         RET                                     ; EXIT WHEN 'FREE'
                03045 
                03046 IDLE_1          ; WAIT 'B' PASSES
                03047                 ; RETURN CARRY SET IF 'BUSY'
                03048                 ; RETURN CARRY RESET IF 'FREE'
0F0E  3E7F      03049         LD      A,7FH
0F10  DBFE      03050         IN      A,(KB_PT)                       ; READ THE BREAK KEY
0F12  0F        03051         RRCA
0F13  3038      03052         JR      NC,NET_BK                       ; JUMP IF BEING PRESSED
0F15  C5        03053 IDLE_2  PUSH    BC
0F16  C1        03054         POP     BC                              ; WASTE TIME    
0F17  DBF7      03055         IN      A,(SERIAL)
0F19  0F        03056         RRCA
0F1A  D8        03057         RET     C                               ; RETURN WHEN 'BUSY'
0F1B  10F8      03058         DJNZ    IDLE_2                          ; DECREASE THE COUNTER
0F1D  C9        03059         RET                                     ; RETURN ONCE NET FOUND 'FREE FOR USE'
                03060 
                03061 
                03062  
                03063 ;______________________________________________________________________
                03064 
                03065 
                03066 
                03067 ;
                03068 ; INSCT WAITS AT MOST 12.6MS FOR A SCOUT.
                03069 ; UNLESS WE ARE WAITING FOR A BROADCAST IN WHICH CASE
                03070 ; WE WAIT TILL WE RECEIVE A SCOUT
                03071 ; THE CARRY FLAG IS SET IF SUCCESSFUL
                03072 ;
                03073 INSCT
0F1E  21C201    03074         LD      HL,450                          ; TIMEOUT... MUST BE EVEN
                03075 ISC0
0F21  0680      03076         LD      B,80H
0F23  CD0E0F    03077         CALL    IDLE_1                          ; WAIT FOR A GAP OF 2MS OR RETURN IF BUSY
0F26  300D      03078         JR      NC,ISC1
0F28  2B        03079         DEC     HL
0F29  2B        03080         DEC     HL
0F2A  7C        03081         LD      A,H
0F2B  B5        03082         OR      L
0F2C  20F3      03083         JR      NZ,ISC0
0F2E  DD7E0B    03084         LD      A,(IX+NCIRIS)                   ; ARE WE EXPECTING A BROADCAST
0F31  A7        03085         AND     A
0F32  28ED      03086         JR      Z,ISC0                          ; YES...KEEP LOOKING
0F34  C9        03087         RET
                03088 ISC1
0F35  DBF7      03089         IN      A,(SERIAL)
0F37  0F        03090         RRCA
0F38  381C      03091         JR      C,ISC2
                03092 
0F3A  3E7F      03093         LD      A,7FH
0F3C  DBFE      03094         IN      A,(KB_PT)
0F3E  0F        03095         RRCA
0F3F  300C      03096         JR      NC,NET_BK
                03097 
0F41  2B        03098         DEC     HL
0F42  7C        03099         LD      A,H
0F43  B5        03100         OR      L
0F44  20EF      03101         JR      NZ,ISC1
0F46  DD7E0B    03102         LD      A,(IX+NCIRIS)                   ; BROADCAST EXPECTED?
0F49  A7        03103         AND     A
0F4A  28E9      03104         JR      Z,ISC1                          ; DON'T GO LOOKING FOR GAPS AGAIN
0F4C  C9        03105         RET
                03106 
0F4D  FB        03107 NET_BK  EI                                      ; INTERRUPT MUST BE ON
0F4E  CDA90C    03108         CALL    B_COL                           ; GIVE THE BORDER ITS CORRECT COLOUR
0F51  FD360014  03109         LD      (IY+ERR_NR-Y),14H               ; 'BREAK INTO PROGRAM'
0F55  EF        03110         RST     ROMERR                          ; EXIT     
                03111 
                03112                 ; CONTINUE SHOULD A SCOUT BE FOUND
0F56  2E09      03113 ISC2    LD      L,09H                           ; WAIT FOR A PERIOD SO AS TO PASS THE SCOUT
0F58  2D        03114 ISC3    DEC     L
0F59  37        03115         SCF
0F5A  C8        03116         RET     Z                               ; EXIT AFTER LOOPING
0F5B  060E      03117         LD      B,0EH
0F5D  10FE      03118         DJNZ    $                               ; WASTE TIME
0F5F  18F7      03119         JR      ISC3
                03120 
                03121 
                03122 
                03123 
                03124 ;______________________________________________________________________
                03125 
                03126 
                03127 OUTSCT          ; ATTEMPT TO SEND OUT A SCOUT
                03128                 ; IF UNABLE TO DO IT IMMEDIATELY JUST TRY
                03129                 ; OVER AGAIN
                03130                 ; BREAK IS READ IN NETIDL
                03131 
0F61  CD030F    03132         CALL    NETIDL                          ; WAIT FOR THE NET TO BE FREE
                03133                                                 ; READ BREAK KEY AS NECESSARY
                03134 
0F64  0EF7      03135         LD      C,SERIAL                        ; FETCH THE PORT ADDRESS
0F66  210900    03136         LD      HL,0009H                        ; H HOLDS 00H     - TO ACTIVATE THE NET
                03137                                                 ; L HOLDS 09H     - FOR 9 BITS
0F69  3AC55C    03138         LD      A,(DR+NTSTAT)                   ; FETCH OWN STATION NUMBER
0F6C  5F        03139         LD      E,A                             ; PASS IT TO E
0F6D  DBF7      03140         IN      A,(SERIAL)
0F6F  0F        03141         RRCA
0F70  38EF      03142         JR      C,OUTSCT                        ; TRY AGAIN IF NET HAS GONE ACTIVE
                03143 
                03144 
                03145                 ; NOW ENTER A LOOP FOR THE BITS OF THE STATION NUMBER
0F72  ED61      03146 OSC1    OUT     (C),H
0F74  54        03147         LD      D,H                             ; TAKE A COPY OF THE BIT SENT
0F75  2600      03148         LD      H,00H                           ; CLEAR THE H REGISTER
0F77  CB03      03149         RLC     E                               ; THE STATION NUMBER GOES TO THE CARRY
                03150                                                 ; MS BIT FIRST
0F79  CB14      03151         RL      H                               ; PICK UP THE CARRY ON EACH PASS
0F7B  0608      03152         LD      B,08H
0F7D  10FE      03153         DJNZ    $                               ; WASTE 106 T-STATES
0F7F  DBF7      03154         IN      A,(SERIAL)                      ; READ BACK THE VALUE ON THE NET
0F81  E601      03155         AND     01H                             ; KEEP ONLY BIT 0
0F83  BA        03156         CP      D                               ; COMPARE THE BYTES
0F84  28DB      03157         JR      Z,OUTSCT                        ; ROUND AGAIN IF BIT 0 NOT CORRECT
                03158                                                 ; EITHER SOMEONE ELSE IS TRYING TO GET ON THE NET
                03159                                                 ; (WITH A LOWER STATION NUMBER)
                03160                                                 ; OR THERE IS A HARDWARE FAILURE CONCERNING THE
                03161                                                 ; NET
0F86  2D        03162         DEC     L                               ; DECREASE THE COUNTER
0F87  20E9      03163         JR      NZ,OSC1                         ; ROUND AGAIN?
0F89  3E01      03164         LD      A,01H
0F8B  D3F7      03165         OUT     (SERIAL),A                      ; ENSURE THE NET IS INACTIVE
0F8D  060E      03166         LD      B,0EH
0F8F  10FE      03167         DJNZ    $                               ; WASTE TIME
0F91  C9        03168         RET                                     ; THE NET IS OURS - SO SEND THE HEADER NEXT
                03169 
                03170 
                03171 
                03172 ;______________________________________________________________________
                03173 
                03174 
                03175 
                03176 
                03177 INPAK           ; FETCH A PACKET FROM THE NET
                03178                 ; IT WILL BE A 'HEADER', OR A 'DATA BLOCK' OR A 'RESPONSE'
                03179                 ; IN ALL CASES 'E' BYTES LONG
                03180                 ; AND BYTES ARE TO GO TO '(HL)' AND ONWARDS AS REQUIRED
                03181 
0F92  06FF      03182         LD      B,0FFH                          ; SET A TIME-OUT COUNTER
0F94  DBF7      03183 IN1     IN      A,(SERIAL)
0F96  1F        03184         RRA                                     ; BIT 0 GOES TO THE CARRY
0F97  3804      03185         JR      C,IN2                           ; JUMP WHEN THE NET BECOMES ACTIVE
                03186                                                 ; THE LEADER HAS BEEN FOUND
0F99  10F9      03187         DJNZ    IN1                             ; ROUND IF NOT
0F9B  04        03188         INC     B                               ; MAKES NZ
0F9C  C9        03189         RET                                     ; RETURN ON TIME-OUT   - NZ
                03190 
0F9D  43        03191 IN2     LD      B,E                             ; FETCH THE BYTE COUNT
                03192 
                03193                 ; NOW ENTER A LOOP TO GET THE BYTES
0F9E  1E80      03194 IN3     LD      E,80H                           ; SET A 'MARKER' BIT            ;7
0FA0  3ECE      03195         LD      A,0DFH.AND.CTS.AND.SELD         ; RESET BIT 5                   ;7
0FA2  D3EF      03196         OUT     (STATUS),A                      ; USE 'WAIT' TO SYNC
                03197                                                 ; TO 'START' BIT                ;11
                03198 
                03199                 ;       STEP PAST THE REST OF THE START BIT
0FA4  00        03200         NOP                                                                     ;4
0FA5  00        03201         NOP                                                                     ;4
0FA6  DD23      03202         INC IX                                                                  ;10
0FA8  DD2B      03203         DEC IX                                                                  ;10   
0FAA  DD23      03204         INC IX                                                                  ;10
0FAC  DD2B      03205         DEC IX                                                                  ;10
                03206                 ; NOW ENTER A LOOP TO GET 8 BITS
0FAE  3E00      03207 IN4     LD      A,00H                           ; WASTE TIME                    ;7
0FB0  DBF7      03208         IN      A,(SERIAL)                      ; READ IN A BYTE                ;11
0FB2  1F        03209         RRA                                     ; BIT - TO THE CARRY            ;4
0FB3  CB1B      03210         RR      E                               ; CARRY'S ARE COLLECTED IN E    ;8
0FB5  D2AE0F    03211         JP      NC,IN4                          ; ROUND FOR 8 BITS              ;10
                03212 
                03213                 ; SAVE THE BYTE
0FB8  73        03214         LD      (HL),E                                                          ;7
0FB9  23        03215         INC     HL                              ; STEP ON THE POINTER           ;4
0FBA  10E2      03216         DJNZ    IN3                             ; ROUND AGAIN?                  ;13
                03217 
                03218                 ; FINISH OFF
0FBC  BF        03219         CP      A                               ; MAKES Z
0FBD  C9        03220         RET                                     ; RETURN SUCCESSFUL  - Z
                03221 
                03222 ; NOTES:
                03223 ;       BIT COLLECTING LOOP IS 40 T-STATES
                03224 ;       AND THE BITS SHOULD BE COLLECTED ABOUT MID-PULSE
                03225 
                03226 
                03227 
                03228 ;______________________________________________________________________
                03229 
                03230 
                03231 RSPOND          ; SEND A RESPONSE
                03232 
0FBE  3E01      03233         LD      A,01H                           ; THE RESPONSE IS A '1'
0FC0  21CD5C    03234         LD      HL,DR+NTRESP                    ; THE ADDRESS OF THE 'STORE'
0FC3  77        03235         LD      (HL),A                          ; ENTER THE RESPONSE
0FC4  5F        03236         LD      E,A                             ; THE LENGTH OF THE RESPONSE IS ALSO '1'
                03237                                                 ; PROCESS TO SEND THE RESPONSE
                03238 
                03239 
                03240 
                03241 OUTPAK          ; SEND A PACKET OF 'E' BYTES STARTING AT '(HL)'
                03242 
0FC5  AF        03243         XOR     A
0FC6  D3F7      03244         OUT     (SERIAL),A                      ; FIRST ACTIVATE THE NET TO FORM A LEADER PULSE
0FC8  0604      03245         LD      B,04H
0FCA  10FE      03246         DJNZ    $                               ; WASTE TIME                    ;54
                03247 
                03248                 ; NOW ENTER THE LOOP THAT SENDS THE BYTES
0FCC  7E        03249 OUT1    LD      A,(HL)                          ; FETCH THE BYTES               ;7
0FCD  2F        03250         CPL                                     ; INVERT ALL THE BITS           ;4
0FCE  37        03251         SCF                                     ; MAKE A 'START' BIT'           ;4
0FCF  17        03252         RLA                                     ; MOVE IN 'START BIT'           ;4
                03253                                                 ; BIT 7 GOES TO CARRY
0FD0  060A      03254         LD      B,0AH                           ; TEN BITS ARE TO BE SENT       ;7
                03255 
                03256                 ; AND NOW THE LOOP FOR THE BITS
0FD2  D3F7      03257 OUT2    OUT     (SERIAL),A                      ; SEND BIT 0                    ;11
0FD4  1F        03258         RRA                                     ; ROTATE ALL THE BITS           ;4
0FD5  A7        03259         AND     A                               ; FORMS THE 'STOP' BIT          ;4
0FD6  05        03260         DEC     B                               ; DECREASE THE COUNTER          ;4
0FD7  1600      03261         LD      D,0                             ; WASTE TIME                    ;7
0FD9  C2D20F    03262         JP      NZ,OUT2                         ; ROUND AGAIN?                  ;10
                03263 
                03264                 ; FIND THE NEXT BYTE
0FDC  23        03265         INC     HL                              ; STEP POINTER ON               ;4
0FDD  1D        03266         DEC     E                               ; DECREASE THE COUNTER          ;4
0FDE  E5        03267         PUSH    HL                              ; WASTE TIME                    ;11
0FDF  E1        03268         POP     HL                              ; WASTE TIME                    ;10
0FE0  C2CC0F    03269         JP      NZ,OUT1                         ; ROUND AGAIN?                  ;10
                03270 
                03271                 ; END THE FINAL STOP BIT
0FE3  3E01      03272         LD      A,01H                           ; SET BIT 0                     ;7
0FE5  D3F7      03273         OUT     (SERIAL),A                      ; DEACTIVATE THE NET            ;11
                03274 
0FE7  C9        03275         RET                                     ; ALL DONE
                03276 
                03277 ; NOTES:
                03278 ;       THE LEADER   IS 91 T-STATES
                03279 ;       THE BIT LOOP IS 40 T-STATES
                03280 ;       THE STOP BIT IS 98 T-STATES
                03281 *INCLUDE HISOFT.S
                03282 ;*******************************************
                03283 ;*                                         *
                03284 ;*  HISOFT.S                               *
                03285 ;*   12/3/83                                *
                03286 ;*                                         *
                03287 ;*******************************************
                03288 ;
                03289 ;
                03290 ;
                03291 ;
                03292 ;       GLOBAL          CREATE,MRDCH,MWRCH,WTHDR
                03293 ;       GLOBAL          FREE?,CPSTR,DECSEC,LIST?
                03294 ;       GLOBAL          READN,NERROR,DELIX,RDNXT
                03295 ;       GLOBAL          MARK,WRREC,SPACE?
                03296 ;       GLOBAL          ECD,ECH,WRFREE,CLOSEN
                03297 ;       GLOBAL          WRC,CLOSIX,MRDIX,MWRIX
                03298 ;       GLOBAL          READNC
                03299 ;       GLOBAL          DONE?
                03300 ;
                03301 ;       EXTERNAL        DRVSEL,RDHBLK,RDBLK,WRHBLK,WRBLK        ;DRIVE
                03302 ;       EXTERNAL        DIS10,HEX,OP,OPHEX
                03303 ;       EXTERNAL        RELNAM                                  ;UHSOFT
                03304 ;       EXTERNAL        DELBC                                   ;DUMMY
                03305 ;       EXTERNAL        CHANGE
                03306 ;
                03307 ;
                03308 ;
                03309 ; CREATE CREATES A MICRODRIVE CHANNEL FOR THE FILE SPECIFIED
                03310 ; IN THE SYSTEM VARIABLES
                03311 ; IF A CHANNEL FOR THE FILE HAS ALREADY BEEN OPENED FOR
                03312 ; WRITING AN ERROR OCCURS
                03313 ;
                03314 ; THE PROCEDURE RETURNS THE NUMBER OF THE CREATED CHANNEL
                03315 ; THIS NUMBER GIVES THE OFFSET+1 OF THE START OF THE CHANNEL
                03316 ; DATA FROM (CHANS) AND IS APPROPRIATE FOR THE STREAM DATA
                03317 ; IX POINTS TO THE CHANNEL ON RETURN
                03318 ;
                03319 ; CREATE CORRECTS THE ADDRESSES IN N_STR1  AND N_STR2
                03320 ;
                03321 CREATE
0FE8  D9        03322         EXX
0FE9  210000    03323         LD      HL,0                            ; HL' WILL POINT TO MAP FOR THE CHANNEL
0FEC  D9        03324         EXX
0FED  DD2A4F5C  03325         LD      IX,(CHANS)                      ; LOOK AT FIRST NON PERMANENT CHANNEL
0FF1  111400    03326         LD      DE,20
0FF4  DD19      03327         ADD     IX,DE
                03328 CR4
                03329                                                 ; HERE WE ARE LOOKING FOR AN EXISTING
                03330                                                 ; CHANNEL WITH THE SAME NAME AND DRIVE
                03331                                                 ; AND OPENED FOR WRITE.
0FF6  DD7E00    03332         LD      A,(IX+0)                        ; DOES THE NEXT CHANNEL EXIST?
0FF9  FE80      03333         CP      80H
0FFB  2837      03334         JR      Z,CR6                           ; NO...CREATE NEW CHANNEL
                03335 ;
0FFD  DD7E04    03336         LD      A,(IX+CHTYPE)                   ; YES..IS IT A MICRODRIVE FILE
1000  E67F      03337         AND     7FH
1002  FE4D      03338         CP      'M'
1004  2024      03339         JR      NZ,CR5                          ; NO..NEXT CHANNEL
                03340 ;
1006  3AD65C    03341         LD      A,(DR+D_STR1)
1009  DDBE19    03342         CP      (IX+CHDRIV)                     ; YES..SAME DRIVE?
100C  201C      03343         JR      NZ,CR5
                03344 ;
                03345 CR7
100E  D9        03346         EXX                                     ; YES..USE THE SAME MAP LATER!
100F  DD6E1A    03347         LD      L,(IX+CHMAP)
1012  DD661B    03348         LD      H,(IX+CHMAP+1)    
1015  D9        03349         EXX
                03350 ;
1016  ED4BDA5C  03351         LD      BC,(DR+N_STR1)
101A  2ADC5C    03352         LD      HL,(DR+N_STR1+2)
101D  CD2613    03353         CALL    CPSTR                           ; DOES IT HAVE THE SAME NAME
1020  2008      03354         JR      NZ,CR5                          ; NO..NEXT CHANNEL
                03355 ;
1022  DDCB1846  03356         BIT     WRFLG,(IX+CHFLAG)               ; IS IT OPEN FOR WRITE?
1026  2802      03357         JR      Z,CR5                           ; NEXT CHANNEL IF READ.
                03358 ;
1028  E7        03359         RST     SH_ERR                          ; FILE ALREADY OPEN FOR WRITE
1029  0D        03360         DEFB    0DH                             ; READ FROM A WRITE FILE
                03361 CR5                                             ; HERE TO FIND THE NEXT CHANNEL
                03362                                                 ; TO LOOK AT.
102A  DD5E09    03363         LD      E,(IX+CHLEN)
102D  DD560A    03364         LD      D,(IX+CHLEN+1)         
1030  DD19      03365         ADD     IX,DE
1032  18C2      03366         JR      CR4
                03367 ;
                03368 CR6                                             ; HERE TO CREATE A NEW MICRODRIVE CHANNEL
1034  2A535C    03369         LD      HL,(PROG)
1037  2B        03370         DEC     HL
1038  E5        03371         PUSH    HL
1039  015302    03372         LD      BC,CHANLN
103C            03373         OLDCAL  INSERT                          ; CREATE SPACE FOR CHANNEL DATA AND BUFFER
103F  D1        03377         POP     DE                              ; DE NOW POINTS TO THE NEW CHANNEL
                03378 ;
1040  D5        03379         PUSH    DE                              ; INITIALIZE THE CHANNEL DATA AND NAME
1041  21D413    03380         LD      HL,MCHDAT
1044  011900    03381         LD      BC,CHDRIV
1047  EDB0      03382         LDIR
                03383 ;
1049  3AD65C    03384         LD      A,(DR+D_STR1)
104C  DD7719    03385         LD      (IX+CHDRIV),A                   ; COPY DRIVE NUMBER
                03386 ;
104F  015302    03387         LD      BC,CHANLN                       ; CORRECT THE POSITIONS OF THE NAMES
1052  DDE5      03388         PUSH    IX
1054  E1        03389         POP     HL
1055  CD9916    03390         CALL    RELNAM
                03391 ;
1058  EB        03392         EX      DE,HL                           ; *
1059  ED4BDA5C  03393         LD      BC,(DR+N_STR1)                  ; COPY NAME INTO DATA
105D  CB78      03394         BIT     7,B                             ; TEST FOR A FULL NAME
105F  200E      03395         JR      NZ,CR12_5
                03396 CR12
1061  78        03397         LD      A,B
1062  B1        03398         OR      C
1063  280A      03399         JR      Z,CR12_5
1065  7E        03400         LD      A,(HL)
1066  DD770E    03401         LD      (IX+CHNAME),A
1069  23        03402         INC     HL
106A  DD23      03403         INC     IX
106C  0B        03404         DEC     BC
106D  18F2      03405         JR      CR12
                03406 CR12_5
106F  DDE1      03407         POP     IX
1071  D9        03408         EXX
1072  7C        03409         LD      A,H                             ; NOW CHECK IF MAP ALREADY EXISTS
1073  B5        03410         OR      L
1074  201E      03411         JR      NZ,CR17
                03412 ;
1076  2A4F5C    03413         LD      HL,(CHANS)                      ; NO..CREATE SPACE
1079  E5        03414         PUSH    HL
107A  2B        03415         DEC     HL
107B  012000    03416         LD      BC,MAPLN
107E            03417         OLDCAL  INSERT
1081  E1        03421         POP     HL
                03422 ;
1082  012000    03423         LD      BC,MAPLN
1085  DD09      03424         ADD     IX,BC
                03425 ;
1087  CD9916    03426         CALL    RELNAM                          ; CORRECT THE NAMES AGAIN
108A  3EFF      03427         LD      A,0FFH                          ; MARK MAP FULL
108C  0620      03428         LD      B,MAPLN
108E  E5        03429         PUSH    HL
                03430 CR11
108F  77        03431         LD      (HL),A
1090  23        03432         INC     HL
1091  10FC      03433         DJNZ    CR11
1093  E1        03434         POP     HL
                03435 ;
                03436 CR17
1094  DD751A    03437         LD      (IX+CHMAP),L                    ; PUT ADDRESS IN CHANNEL DATA
1097  DD741B    03438         LD      (IX+CHMAP+1),H
                03439 ;
109A  DDE5      03440         PUSH    IX                              ; SETUP PREAMBLE FOR HEADER
109C  E1        03441         POP     HL
109D  111C00    03442         LD      DE,CHHDR
10A0  19        03443         ADD     HL,DE
10A1  EB        03444         EX      DE,HL                           ; *
10A2  21ED13    03445         LD      HL,P_AMBL
10A5  010C00    03446         LD      BC,PLEN
10A8  EDB0      03447         LDIR
                03448 ;
10AA  DDE5      03449         PUSH    IX                              ; SETUP PREAMBLE FOR DESCRIPTOR
10AC  E1        03450         POP     HL
10AD  113700    03451         LD      DE,CHDES
10B0  010C00    03452         LD      BC,PLEN
10B3  19        03453         ADD     HL,DE
10B4  EB        03454         EX      DE,HL                           ; *
10B5  21ED13    03455         LD      HL,P_AMBL
10B8  EDB0      03456         LDIR
                03457 ;
10BA  DDE5      03458         PUSH    IX                              ; WORK OUT CHANNEL NUMBER
10BC  E1        03459         POP     HL
10BD  ED5B4F5C  03460         LD      DE,(CHANS)
10C1  B7        03461         OR      A
10C2  ED52      03462         SBC     HL,DE
10C4  23        03463         INC     HL
10C5  C9        03464         RET                                     ; AND RETURN WITH IT IN HL
                03465 ;
                03466 ;
                03467 ; DELIX DOES THE OPPOSITE OF CREATE
                03468 ; THE CHANNEL NUMBER IS SPECIFIED BY HL
                03469 ;
                03470 DELIX
10C6  DD6E1A    03471         LD      L,(IX+CHMAP)                    ; YES..GET MAP ADDRESS
10C9  DD661B    03472         LD      H,(IX+CHMAP+1)
10CC  E5        03473         PUSH    HL
10CD  DD7E19    03474         LD      A,(IX+CHDRIV)                   ; AND DRIVE NUMBER
10D0  F5        03475         PUSH    AF
                03476 ;
10D1  DDE5      03477         PUSH    IX                              ; DELETE CHANNEL
10D3  E1        03478         POP     HL
10D4  015302    03479         LD      BC,CHANLN
10D7            03480         OLDCAL  DELREC
                03484 ;
10DA  DDE5      03485         PUSH    IX
10DC  E1        03486         POP     HL
10DD  ED5B4F5C  03487         LD      DE,(CHANS)                      ; CHANNEL OFFSET REQUIRED IN HL
10E1  B7        03488         OR      A
10E2  ED52      03489         SBC     HL,DE
10E4  23        03490         INC     HL
10E5  015302    03491         LD      BC,CHANLN
10E8  CD6713    03492         CALL    ADJSTR                          ; ADJUST THE POINTERS IN STREAMS
                03493 ;
10EB  F1        03494         POP     AF
10EC  E1        03495         POP     HL
10ED  47        03496         LD      B,A                             ; NOW TAKE CARE OF THE MAP
10EE  DD2A4F5C  03497         LD      IX,(CHANS)
10F2  111400    03498         LD      DE,20
10F5  DD19      03499         ADD     IX,DE                           ; START OF IMPERMANENT CHANNELS
                03500 DEL2
10F7  DD7E00    03501         LD      A,(IX+0)                        ; IS THERE A CHANNEL
10FA  FE80      03502         CP      80H
10FC  2818      03503         JR      Z,DEL5                          ; NO..DELETE MAP
                03504 ;
10FE  DD7E04    03505         LD      A,(IX+CHTYPE)                   ; YES..IS IT A MICRODRIVE CHANNEL
1101  E67F      03506         AND     7FH
1103  FE4D      03507         CP      'M'
1105  2005      03508         JR      NZ,DEL4                         ; NO..NEXT CHANNEL
                03509 ;
1107  DD7E19    03510         LD      A,(IX+CHDRIV)                   ; YES..SAME DRIVE
110A  B8        03511         CP      B
110B  C8        03512         RET     Z                               ; YES..KEEP MAP!
                03513 ;
                03514 DEL4
110C  DD5E09    03515         LD      E,(IX+CHLEN)                    ; NEXT CHANNEL
110F  DD560A    03516         LD      D,(IX+CHLEN+1)
1112  DD19      03517         ADD     IX,DE
1114  18E1      03518         JR      DEL2
                03519 ;
                03520 DEL5
1116  012000    03521         LD      BC,MAPLN                        ; HERE IF MAP NOT USED ELSEWHERE
1119  E5        03522         PUSH    HL
111A  C5        03523         PUSH    BC
111B            03524         OLDCAL  DELREC                          ; DELETE IT!
111E  C1        03528         POP     BC
111F  E1        03529         POP     HL
1120  CD9913    03530         CALL    ADJMAP                          ; ADJUST POINTERS TO MAPS IN OTHER CHANNELS
1123  C9        03531         RET
                03532 ;
                03533 ;*********************************************    
                03534 ;*    MRDCH                                  *
                03535 ;*********************************************
                03536 ;
                03537 ; THIS CODE IS CALLED AT INPUT OR INKEY TO OBTAIN A SINGLE
                03538 ; CHARACTER BUT BECAUSE OF THE WAY THE CALLING PROCEDURE
                03539 ; TREATS CONTROL CHARACTERS WE DO THE LINE BUFFERING HERE
                03540 ; AND RETURN TO A MORE APPROPRIATE PLACE IN THE INPUT CODE
                03541 ;
                03542 MRDCH
1124  DD2A515C  03543         LD      IX,(CURCHL)
1128  212E11    03544         LD      HL,MRDIX
112B  C3BD0C    03545         JP      CHANGE
                03546 ;
                03547 ;
                03548 ; THIS PROCEDURE READS A BYTE FROM THE MICRODRIVE CHANNEL
                03549 ; SPECIFIED BY IX
                03550 ; THE BYTE IS RETURNED IN A
                03551 ; THE CARRY FLAG IS SET IF THE DATA IS OK
                03552 ; NZ & NC IF END OF FILE
                03553 ;
                03554 MRDIX
112E  DDCB1846  03555         BIT     WRFLG,(IX+CHFLAG)               ;IS IT OPEN FOR READ
1132  2802      03556         JR      Z,MRD1
                03557 ;
1134  E7        03558         RST     SH_ERR                          ; NO...READING FROM WRITE FILE
1135  0D        03559         DEFB    0DH
                03560 ;
                03561 MRD1
1136  DD5E0B    03562         LD      E,(IX+CHBYTE)                   ; GET POINTER TO NEXT BYTE
1139  DD560C    03563         LD      D,(IX+CHBYTE+1)                 ; IN RANGE 0 TO 511
                03564 ;
113C  DD6E45    03565         LD      L,(IX+RECLEN)                   ; GET LENGTH OF CURRENT BUFFER
113F  DD6646    03566         LD      H,(IX+RECLEN+1)
1142  37        03567         SCF                                     ; COMPARE POINTER WITH LENGTH
1143  ED52      03568         SBC     HL,DE
                03569 ;
1145  3813      03570         JR      C,MRD2                          ; IF POINTER >= LENGTH THEN NEXT RECORD
                03571 ;
1147  13        03572         INC     DE                              ; ELSE INCREMENT POINTER
1148  DD730B    03573         LD      (IX+CHBYTE),E
114B  DD720C    03574         LD      (IX+CHBYTE+1),D
114E  1B        03575         DEC     DE
                03576 ;
114F  DDE5      03577         PUSH    IX
1151  DD19      03578         ADD     IX,DE                           ; GET BYTE AND SET CARRY
1153  DD7E52    03579         LD      A,(IX+CHDATA)
1156  DDE1      03580         POP     IX
1158  37        03581         SCF
1159  C9        03582         RET
                03583 ;
                03584 MRD2
115A  DDCB434E  03585         BIT     1,(IX+RECFLG)                   ; WAS THIS THE LAST RECORD?
115E  2804      03586         JR      Z,MRD3
1160  AF        03587         XOR     A                               ; YES..CLEAR FLAGS AND RETURN
1161  C60D      03588         ADD     A,0DH
1163  C9        03589         RET
                03590 ;
                03591 MRD3
1164  110000    03592         LD      DE,0                            ; NEW BLOCK..NEW POINTERS
1167  DD730B    03593         LD      (IX+CHBYTE),E
116A  DD720C    03594         LD      (IX+CHBYTE+1),D
                03595 ;
116D  DD340D    03596         INC     (IX+CHREC)                      ; NEW RECORD
                03597 ;
1170  CD7911    03598         CALL    READN                           ; READ THIS RECORD
1173  AF        03599         XOR     A
1174  CDF717    03600         CALL    DRVSEL                          ; TURN OFF THE MOTOR AFTER USE
                03601 ;
1177  18BD      03602         JR      MRD1                            ; AND GET THE BYTE AS BEFORE
                03603 ;
                03604 ;
                03605 ;*********************************************
                03606 ;*    READN                                  *
                03607 ;*********************************************
                03608 ;
                03609 ;
                03610 ; THIS PROCEDURE READS A RECORD FROM THE CURRENTLY SELECTED DRIVE
                03611 ; THIS RECORD IS IDENTIFIED BY THE CHANNEL DATA AT IX
                03612 ; THE PROCEDURE MAKES TRYS PASSES AROUND THE TAPE BEFORE GIVING UP
                03613 ; FAILURE TO FIND THE CORRECT BLOCK WILL RESULT IN AN ERROR.
                03614 ;
                03615 READN
1179  DD7E19    03616         LD      A,(IX+CHDRIV)                   ; SELECT THE DRIVE
117C  CDF717    03617         CALL    DRVSEL
                03618 ;
                03619 READNC
117F  01FB04    03620         LD      BC,TRYS*HD_MAX
1182  ED43C95C  03621         LD      (SECTOR),BC                     ; *
                03622 RDN1
1186  CDA711    03623         CALL    RDNXT                           ; READ THE NEXT DATA BLOCK
1189  3815      03624         JR      C,RDN2                          ; NEXT SECTOR IF NO GOOD
118B  2813      03625         JR      Z,RDN2                          ; OR EMPTY
                03626 ;
118D  DD7E44    03627         LD      A,(IX+RECNUM)
1190  DDBE0D    03628         CP      (IX+CHREC)                      ; IS IT THE RIGHT NUMBER
1193  200B      03629         JR      NZ,RDN2
                03630 ;
1195  DDE5      03631         PUSH    IX
1197  E1        03632         POP     HL
1198  115200    03633         LD      DE,CHDATA
119B  19        03634         ADD     HL,DE
119C  CD4E13    03635         CALL    ECD                             ; YES...ERROR CHECK AND RETURN
119F  C8        03636         RET     Z
                03637 RDN2
11A0  CD1A13    03638         CALL    DECSEC
11A3  20E1      03639         JR      NZ,RDN1
                03640 ;
11A5  E7        03641         RST     SH_ERR
11A6  11        03642         DEFB    011H                            ; FILE NOT FOUND
                03643 ;
                03644 ; RDNXT READS THE NEXT DATA BLOCK ON A DRIVE IT IS USED
                03645 ; IN READN, READ_ AND OPENF
                03646 ; RETURNS C IF THE RECORD WAS UNREADABLE OR WRONG NAME
                03647 ;         Z IF THE RECORD WAS EMPTY
                03648 ;     NC,NZ IF THE RECORD WAS READABLE AND RIGHT NAME
                03649 ; NB IT DOES NOT ERROR CHECK THE DATA BLOCK
                03650 ;
                03651 RDNXT
11A7  CDCC12    03652         CALL    WTHDR                           ; WAIT FOR A HEADER
                03653 ;
11AA  111B00    03654         LD      DE,CHDES-CHHDR
11AD  19        03655         ADD     HL,DE
                03656 ;
11AE  CDA918    03657         CALL    RDBLK                           ; READ DATA BLOCK
11B1  CD4913    03658         CALL    ECH                             ; CHECK THE DESCRIPTOR
11B4  2022      03659         JR      NZ,RDNX1                        ; CARRY FLAG IF NO GOOD
                03660 ;
11B6  DDCB4346  03661         BIT     0,(IX+RECFLG)                   ; IS IT REALLY A DESCRIPTOR
11BA  201C      03662         JR      NZ,RDNX1                        ; CARRY FLAG IF NOT
                03663 ;
11BC  DD7E43    03664         LD      A,(IX+RECFLG)                   ; IS IT FULL OR EOF
11BF  DDB646    03665         OR      (IX+RECLEN+1)
11C2  E602      03666         AND     2
11C4  C8        03667         RET     Z                               ; NC,Z IF EMPTY
                03668 ;
11C5  DDE5      03669         PUSH    IX                              ; HAS IT GOT THE SAME NAME
11C7  E1        03670         POP     HL
11C8  114700    03671         LD      DE,RECNAM
11CB  19        03672         ADD     HL,DE
11CC  010A00    03673         LD      BC,10
11CF  CD2613    03674         CALL    CPSTR
11D2  2004      03675         JR      NZ,RDNX1                        ; CARRY FLAG IF NOT
                03676 ;
11D4  3EFF      03677         LD      A,0FFH
11D6  B7        03678         OR      A                               ; NC,NZ IF GOOD
11D7  C9        03679         RET   
                03680 ;
                03681 RDNX1
11D8  37        03682         SCF                                     ; CARRY IF UNREADABLE OR WRONG
11D9  C9        03683         RET
                03684 ;
                03685 ;
                03686 ;
                03687 ;**********************************************
                03688 ;*   BYTE OUTPUT                              *
                03689 ;**********************************************
                03690 ;
                03691 ; MWRCH WRITE THE BYTE IN A TO THE MICRODRIVE CHANNEL
                03692 ; SPECIFIED BY DE
                03693 ; (DE POINTS TO THE SECOND BYTE OF THE ADDRESS OF MWRCH IN
                03694 ; THE CHANNEL DATA)
                03695 ;
                03696 MWRCH
11DA  DD21FAFF  03697         LD      IX,-6
                03698                                                 ; POINT IX AT THE CHANNEL
11DE  DD19      03699         ADD     IX,DE
                03700 MWRIX
11E0  DDCB1846  03701         BIT     WRFLG,(IX+CHFLAG)               ; IS IT OPEN FOR WRITE?
11E4  2002      03702         JR      NZ,MWR1
                03703 ;
11E6  E7        03704         RST     SH_ERR                          ; NO...WRITING TO READ FILE
11E7  0C        03705         DEFB    0CH
                03706 ;
                03707 MWR1
11E8  DD5E0B    03708         LD      E,(IX+CHBYTE)                   ; GET POINTER TO NEXT BYTE
11EB  DD560C    03709         LD      D,(IX+CHBYTE+1)
                03710 ;
11EE  DDE5      03711         PUSH    IX                              ; WRITE BYTE
11F0  DD19      03712         ADD     IX,DE
11F2  DD7752    03713         LD      (IX+CHDATA),A
11F5  DDE1      03714         POP     IX
                03715 ;
11F7  13        03716         INC     DE                              ; NEXT BYTE
11F8  DD730B    03717         LD      (IX+CHBYTE),E
11FB  DD720C    03718         LD      (IX+CHBYTE+1),D
                03719 ;
11FE  CB4A      03720         BIT     1,D                             ; BUFFER FULL?
1200  C8        03721         RET     Z                               ; STILL SPACE SO RETURN
                03722 ;
                03723 ;*********************************************
                03724 ;*    WRITE RECORD                           *
                03725 ;*********************************************
                03726 ;
                03727 ;
                03728 ; THIS PROCEDURE WRITES THE DATA BLOCK DESCRIBED BY THE CHANNEL
                03729 ; AT IX ONTO TAPE.
                03730 ; THE CODE IS USED BY MWRCH AND CLOSEN
                03731 ; WRREC CALLS THE SUBROUTINE WRC THIS DOES MOST OF THE WORK
                03732 ; BUT LEAVES THE MOTOR RUNNING. THIS SUBROUTINE CAN BE USED
                03733 ; INSTEAD OF WRREC BY SAVE IN ORDER TO SPEED-UP THIS
                03734 ; INSTRUCTION
                03735 ;
                03736 ;
                03737 WRREC
1201  DD7E19    03738         LD      A,(IX+CHDRIV)
1204  CDF717    03739         CALL    DRVSEL
1207  01C832    03740         LD      BC,13000                        ; WAIT 100MS FOR GOOD CHANCE
120A  CDFA18    03741         CALL    DELBC                           ; OF READING FIRST TIME
120D  CD1512    03742         CALL    WRC
1210  AF        03743         XOR     A
1211  CDF717    03744         CALL    DRVSEL
1214  C9        03745         RET
                03746 ;
                03747 ;
                03748 WRC
1215  CD6C12    03749         CALL    SPACE?                          ; IS THERE ANY ROOM ON THE MAP
1218  2009      03750         JR      NZ,MWR4
121A  CDC610    03751         CALL    DELIX
121D  AF        03752         XOR     A
121E  CDF717    03753         CALL    DRVSEL
1221  E7        03754         RST     SH_ERR
1222  0F        03755         DEFB    0FH                             ; DELETE CHANNEL AND 'MICRODRIVE FULL'
                03756 ;
                03757 MWR4
1223  DDE5      03758         PUSH    IX                              ; MOVE NAME INTO DESCRIPTOR
1225  060A      03759         LD      B,10
                03760 MWR2
1227  DD7E0E    03761         LD      A,(IX+CHNAME)
122A  DD7747    03762         LD      (IX+RECNAM),A
122D  DD23      03763         INC     IX
122F  10F6      03764         DJNZ    MWR2
1231  DDE1      03765         POP     IX
                03766 ;
1233  DD4E0B    03767         LD      C,(IX+CHBYTE)                   ; MOVE LENGTH INTO DESCRIPTOR
1236  DD7145    03768         LD      (IX+RECLEN),C
1239  DD7E0C    03769         LD      A,(IX+CHBYTE+1)
123C  DD7746    03770         LD      (IX+RECLEN+1),A
                03771 ;
123F  DD7E0D    03772         LD      A,(IX+CHREC)                    ; MOVE RECORD NUMBER INTO DESCRIPTOR
1242  DD7744    03773         LD      (IX+RECNUM),A
                03774 ;
1245  DDE5      03775         PUSH    IX                              ; ERROR ENCODE DESCRIPTOR
1247  E1        03776         POP     HL
1248  114300    03777         LD      DE,CHDES+PLEN
124B  19        03778         ADD     HL,DE
124C  CD4913    03779         CALL    ECH
                03780 ;
124F  110F00    03781         LD      DE,CHDATA-CHDES-PLEN            ; THEN DATA
1252  19        03782         ADD     HL,DE
1253  CD4E13    03783         CALL    ECD
                03784 ;
1256  DDE5      03785         PUSH    IX
1258  E1        03786         POP     HL
1259  114700    03787         LD      DE,RECNAM
                03788 ;
                03789 ;
                03790 MWR3
125C  CD7D12    03791         CALL    WRFREE                          ; WRITE THE BLOCK TO THE NEXT FREE
                03792 ;
125F  110000    03793         LD      DE,0                            ; SET BYTE POINTER TO START AGAIN
1262  DD730B    03794         LD      (IX+CHBYTE),E
1265  DD720C    03795         LD      (IX+CHBYTE+1),D
                03796 ;
1268  DD340D    03797         INC     (IX+CHREC)
126B  C9        03798         RET
                03799 ;
                03800 ;
                03801 ; SPACE? CHECKS THE MAP TO SEE IF THERE IS A FREE BLOCK
                03802 ; IT RETURNS THE ZERO FLAG IF THERE IS NO SPACE
                03803 ;
                03804 SPACE?
126C  DD6E1A    03805         LD      L,(IX+CHMAP)
126F  DD661B    03806         LD      H,(IX+CHMAP+1)
1272  0620      03807         LD      B,MAPLN                         ; TEST THE MAP TO SEE IF THERE IS ROOM
                03808 SP1
1274  7E        03809         LD      A,(HL)
1275  FEFF      03810         CP      0FFH
1277  C0        03811         RET     NZ
1278  23        03812         INC     HL
1279  10F9      03813         DJNZ    SP1
127B  AF        03814         XOR     A
127C  C9        03815         RET
                03816 ;
                03817 ;
                03818 ; WRFREE WRITES THE DATA BLOCK FOR THE CHANNEL POINTED TO BY IX
                03819 ; ONTO THE NEXT FREE SECTOR ON THE DISK
                03820 ;
                03821 WRFREE
127D  DDE5      03822         PUSH    IX                              ; GET POINTER TO DATA BLOCK
127F  E1        03823         POP     HL
1280  113700    03824         LD      DE,CHDES
1283  19        03825         ADD     HL,DE
1284  E5        03826         PUSH    HL
                03827 ;
                03828 WRFR0
1285  CDCC12    03829         CALL    WTHDR                           ; WAIT FOR A HEADER
                03830 ;
1288  CDE712    03831         CALL    FREE?                           ; IS IT MARKED FREE?
128B  20F8      03832         JR      NZ,WRFR0                        ; NO...NEXT HEADER
                03833 ;
128D  E3        03834         EX      (SP),HL                         ; * SAVE POINTER FOR LATER
128E  C5        03835         PUSH    BC
                03836 
128F  DBEF      03837         IN      A,(PORTC)
1291  E601      03838         AND     PROTECT                         ; IS THE DRIVE WRITE PROTECTED?
1293  2002      03839         JR      NZ,WR11
1295  E7        03840         RST     SH_ERR
1296  0E        03841         DEFB    0EH                             ; DRIVE WRITE PROTECTED
                03842 WR11
1297  3EE6      03843         LD      A,ERASE.AND.CTS.AND.SELD
1299  D3EF      03844         OUT     (PORTC),A                       ; ERASE ON TO TIDY UP LONG BLOCKS
129B  016801    03845         LD      BC,GAPT3                        ; LEAVE ON FOR 2.3MS BEFORE WRITING
129E  CDFA18    03846         CALL    DELBC
                03847 ;
12A1  CD7818    03848         CALL    WRBLK                           ; WRITE THE DATA
                03849 ;
12A4  3EEE      03850         LD      A,CTS.AND.SELD
12A6  D3EF      03851         OUT     (PORTC),A                       ; NOT FORGETTING TO TURN OFF THE ERASE
                03852 ;
12A8  C1        03853         POP     BC                              ; NOW UPDATE THE MAP
12A9  E1        03854         POP     HL
12AA  78        03855         LD      A,B
12AB  B6        03856         OR      (HL)
12AC  77        03857         LD      (HL),A
                03858 ;
12AD  C9        03859         RET
                03860 ;
                03861 ;**********************************************
                03862 ;*    CLOSE                                   *
                03863 ;**********************************************
                03864 ;
                03865 ; CLOSEN CLOSES THE MICRODRIVE CHANNEL SPECIFIED BY HL
                03866 ;
                03867 CLOSEN
12AE  E5        03868         PUSH    HL
12AF  DDE1      03869         POP     IX
                03870 CLOSIX
12B1  DDCB1846  03871         BIT     WRFLG,(IX+CHFLAG)               ; IS IT READ OR WRITE?
12B5  2807      03872         JR      Z,CLOSE1                        ; READ...DELETE CHANNEL
                03873 ;
12B7  DDCB43CE  03874         SET     1,(IX+RECFLG)                   ; WRITE...MARK DATA EOF
                03875 ;
12BB  CD0112    03876         CALL    WRREC                           ; AND WRITE ONTO DISK
                03877 ;
                03878 CLOSE1
12BE  AF        03879         XOR     A
12BF  CDF717    03880         CALL    DRVSEL
                03881 ;
12C2  CDC610    03882         CALL    DELIX                           ; DELETE CHANNEL
                03883 ;
12C5  C9        03884         RET
                03885 ;
                03886 NERROR
12C6  E1        03887         POP     HL
12C7  7E        03888         LD      A,(HL)
12C8  323A5C    03889         LD      (ERR_NR),A
12CB  EF        03890         RST     ROMERR
                03891 ;
                03892 ;
                03893 ;********************************************
                03894 ;*  UTILITIES                               *
                03895 ;********************************************
                03896 ;
                03897 ; WTHDR WAITS FOR THE FIRST ERROR FREE HEADER BLOCK AND
                03898 ; READS IT INTO THE HEADER BUFFER IDENTIFIED BY IX
                03899 ;
                03900 WTHDR
12CC  DDE5      03901         PUSH    IX
12CE  E1        03902         POP     HL                              ; POINT TO HEADER BLOCK
12CF  112800    03903         LD      DE,CHHDR+PLEN
12D2  19        03904         ADD     HL,DE
                03905 ;
12D3  CDA318    03906         CALL    RDHBLK                          ; READ A HEADER BLOCK
12D6  CD4913    03907         CALL    ECH
12D9  20F1      03908         JR      NZ,WTHDR                        ; REPEAT IF NO GOOD
                03909 ;
12DB  DDCB2846  03910         BIT     0,(IX+HDFLAG)                   ; IS IT A HEADER BLOCK
12DF  28EB      03911         JR      Z,WTHDR
                03912 ;
12E1  C9        03913         RET
                03914 ;
                03915 ;
                03916 ;
                03917 ; FREE? LOOKS AT THE HEADER BLOCK POINTED TO BY IX EXTRACTS THE
                03918 ; SECTOR NUMBER AND CHECKS THE MAP TO SEE IF THE FOLLOWING
                03919 ; DATA BLOCK IS FREE.
                03920 ; THE ZERO FLAG IS SET IF THE BLOCK IS FREE
                03921 ; HL IS LEFT POINTING AT THE RELEVANT BYTE IN THE MAP
                03922 ; B IS LEFT CONTAINING THE RELEVANT BIT
                03923 ; DONE? DOES THE SAME AS FREE? BUT USES THE RECORD NUMBER
                03924 ; INSTEAD OF THE SECTOR NUMBER
                03925 ;
                03926 DONE?
12E2  DD5E44    03927         LD      E,(IX+RECNUM)
12E5  1803      03928         JR      FREE0
                03929 FREE?
12E7  DD5E29    03930         LD      E,(IX+HDNUMB)                   ; GET SECTOR NUMBER
                03931 FREE0
12EA  DD6E1A    03932         LD      L,(IX+CHMAP)
12ED  DD661B    03933         LD      H,(IX+CHMAP+1)
                03934 FREE1
12F0  AF        03935         XOR     A
12F1  57        03936         LD      D,A
12F2  7B        03937         LD      A,E                             ; DIVIDE BY 8 REMAINDER IN A
12F3  E607      03938         AND     7
12F5  CB3B      03939         SRL     E
12F7  CB3B      03940         SRL     E
12F9  CB3B      03941         SRL     E
12FB  19        03942         ADD     HL,DE                           ; DEAL WITH BYTE
                03943 ;
12FC  47        03944         LD      B,A
12FD  04        03945         INC     B
12FE  AF        03946         XOR     A
12FF  37        03947         SCF
                03948 FREE3
1300  17        03949         RLA                                     ; SORT OUT BIT
1301  10FD      03950         DJNZ    FREE3
                03951 ;
1303  47        03952         LD      B,A
                03953 ;
1304  A6        03954         AND     (HL)                            ; IS IT FREE?
1305  C9        03955         RET
                03956 ;
                03957 ; MARK MARKS THE CURRENT SECTOR FREE IN THE MAP
                03958 ;
                03959 MARK
1306  CDE712    03960         CALL    FREE?
1309  78        03961         LD      A,B
130A  2F        03962         CPL
130B  A6        03963         AND     (HL)
130C  77        03964         LD      (HL),A
130D  C9        03965         RET
                03966 ;
                03967 ; LIST? DOES THE SAME AS FREE? EXCEPT THAT IT WORKS ON THE LIST
                03968 ; OF BLOCKS IN THE CHANNEL DATA.
                03969 ;
                03970 LIST?
130E  DDE5      03971         PUSH    IX
1310  E1        03972         POP     HL
1311  115200    03973         LD      DE,CHDATA
1314  19        03974         ADD     HL,DE
1315  DD5E29    03975         LD      E,(IX+HDNUMB)
1318  18D6      03976         JR      FREE1
                03977 ;
                03978 ;
                03979 ; DECSEC DECREMENTS AND TESTS (SECTOR) IT IS USED BY MANY
                03980 ; OF THE PROCEDURES WHICH HAVE TO LOOK AT ALL THE SECTORS
                03981 ; ON A DRIVE.
                03982 ;
                03983 DECSEC
131A  ED4BC95C  03984         LD      BC,(SECTOR)
131E  0B        03985         DEC     BC
131F  ED43C95C  03986         LD      (SECTOR),BC
1323  78        03987         LD      A,B
1324  B1        03988         OR      C
1325  C9        03989         RET
                03990 ;
                03991 ;
                03992 ; CPSTR COMPARES THE FILENAME AT (IX+CHNAME) WITH
                03993 ; THE BC BYTES AT (HL). THE ZERO FLAG IS SET IF THERE IS
                03994 ; A MATCH.
                03995 ; IF THERE ARE FEWER THAN 10 BYTES AT HL THE REST OF THE NAME
                03996 ; AT IX+CHNAME MUST BE SPACES
                03997 ;
                03998 CPSTR
1326  DDE5      03999         PUSH    IX
1328  060A      04000         LD      B,10
                04001 CPS9
132A  7E        04002         LD      A,(HL)
132B  DDBE0E    04003         CP      (IX+CHNAME)
132E  2016      04004         JR      NZ,CPS8
1330  23        04005         INC     HL
1331  DD23      04006         INC     IX
1333  05        04007         DEC     B
1334  0D        04008         DEC     C
1335  20F3      04009         JR      NZ,CPS9
1337  78        04010         LD      A,B
1338  B7        04011         OR      A                               ; 10 BYTES?
1339  280B      04012         JR      Z,CPS8
                04013 CPS7
133B  DD7E0E    04014         LD      A,(IX+CHNAME)                   ; NO...MAKE SURE THE REST ARE SPACES
133E  FE20      04015         CP      ' '
1340  2004      04016         JR      NZ,CPS8
1342  DD23      04017         INC     IX
1344  10F5      04018         DJNZ    CPS7
                04019 CPS8
1346  DDE1      04020         POP     IX
1348  C9        04021         RET
                04022 ;
                04023 ; ECH AND ECD COMPARE AND COMPUTE THE CHECKSUMS FOR HEADER
                04024 ; AND DATA BLOCKS RESPECTIVELY
                04025 ; THE CHECKSUM IS COMPUTED SUM MOD 255 IT IS COMPARED
                04026 ; WITH THE BYTE AT THE END OF THE BLOCK AND THE NEW CHECKSUM
                04027 ; IS STORED THERE.
                04028 ; THE SAME PROCEDURE CAN THEREFORE BE USED FOR COMPUTING
                04029 ; AND CHECKING THE CHECKSUM;
                04030 ; THE ZERO FLAG IS SET IF THE CHECKSUM IS GOOD
                04031 ;
                04032 ECH
1349  010E00    04033         LD      BC,HD_LEN-PLEN-1
134C  1803      04034         JR      ECD1
                04035 ECD
134E  010002    04036         LD      BC,D_LEN-HD_LEN-1
                04037 ECD1
1351  E5        04038         PUSH    HL
1352  1E00      04039         LD      E,0
                04040 ECD2
1354  7B        04041         LD      A,E
1355  86        04042         ADD     A,(HL)
1356  23        04043         INC     HL
1357  CE01      04044         ADC     A,1
1359  2801      04045         JR      Z,ECD3
135B  3D        04046         DEC     A
                04047 ECD3
135C  5F        04048         LD      E,A
135D  0B        04049         DEC     BC
135E  78        04050         LD      A,B
135F  B1        04051         OR      C
1360  20F2      04052         JR      NZ,ECD2
                04053 ;
1362  7B        04054         LD      A,E
1363  BE        04055         CP      (HL)
1364  77        04056         LD      (HL),A
1365  E1        04057         POP     HL
1366  C9        04058         RET
                04059 ;
                04060 ;
                04061 ; ADJSTR ADJUSTS THE POINTERS INN THE STREAM DATA WHEN A
                04062 ; CHANNEL IS DELETED
                04063 ; THE OFFSET OF THE CHANNEL IS STORED IN HL THE
                04064 ; LENGTH OF THE CHANNEL IS STORED IN BC
                04065 ; THE STREAM OPENED TO THE CLOSED CHANNEL IS RESET
                04066 ;
                04067 ADJSTR
1367  E5        04068         PUSH    HL
1368  3E10      04069         LD      A,16
136A  21165C    04070         LD      HL,STRMS+6
                04071 ADJ1
136D  225F5C    04072         LD      (X_PTR),HL
1370  5E        04073         LD      E,(HL)
1371  23        04074         INC     HL
1372  56        04075         LD      D,(HL)
1373  E1        04076         POP     HL
1374  E5        04077         PUSH    HL
1375  B7        04078         OR      A
1376  ED52      04079         SBC     HL,DE                           ; COMPARE CHANNEL - POINTER
1378  2005      04080         JR      NZ,ADJ3
137A  110000    04081         LD      DE,0                            ; RESET STREAM IF EQUAL
137D  1807      04082         JR      ADJ4
                04083 ADJ3
137F  300B      04084         JR      NC,ADJ2                         ; IF POINTER EXCEEDS CHANNEL
1381  EB        04085         EX      DE,HL                           ; * THEN REDUCE OFFSET
1382  B7        04086         OR      A
1383  ED42      04087         SBC     HL,BC
1385  EB        04088         EX      DE,HL                           ; *
                04089 ADJ4
1386  2A5F5C    04090         LD      HL,(X_PTR)
1389  73        04091         LD      (HL),E
138A  23        04092         INC     HL
138B  72        04093         LD      (HL),D
                04094 ADJ2
138C  2A5F5C    04095         LD      HL,(X_PTR)
138F  23        04096         INC     HL
1390  23        04097         INC     HL
1391  3D        04098         DEC     A
1392  20D9      04099         JR      NZ,ADJ1                         ; NEXT STREAM
1394  325F5C    04100         LD      (X_PTR),A
1397  E1        04101         POP     HL
1398  C9        04102         RET
                04103 ;
                04104 ; ADJMAP ADJUSTS THE POINTERS TO MAPS IN MICRODRIVE CHANNELS
                04105 ; AFTER A MAP IS DELETED
                04106 ; HL CONTAINS THE ADDRESS OF THE DELETED MAP
                04107 ;
                04108 ADJMAP
1399  012000    04109         LD      BC,MAPLN
139C  DD2A4F5C  04110         LD      IX,(CHANS)
13A0  111400    04111         LD      DE,20
13A3  DD19      04112         ADD     IX,DE                           ; START AT IMPERMANENT CHANNELS
                04113 ADJM1
13A5  DD7E00    04114         LD      A,(IX+0)                        ; IS THERE A CHANNEL?
13A8  FE80      04115         CP      80H
13AA  C8        04116         RET     Z                               ; RETURN IF ALL DONE
                04117 ;
13AB  E5        04118         PUSH    HL
13AC  DD7E04    04119         LD      A,(IX+CHTYPE)
13AF  E67F      04120         AND     7FH
13B1  FE4D      04121         CP      'M'                             ; IS IT A MICRODRIVE CHANNEL
13B3  2014      04122         JR      NZ,ADJM2
                04123 ;
13B5  DD5E1A    04124         LD      E,(IX+CHMAP)                    ; YES...LOOK AT MAP ADDRESS
13B8  DD561B    04125         LD      D,(IX+CHMAP+1)
13BB  ED52      04126         SBC     HL,DE
13BD  300A      04127         JR      NC,ADJM2                        ; NEXT IF LESS THAN DELETED MAP
                04128 ;
13BF  EB        04129         EX      DE,HL                           ; *
13C0  B7        04130         OR      A
13C1  ED42      04131         SBC     HL,BC                           ; ADJUST IF ABOVE
13C3  DD751A    04132         LD      (IX+CHMAP),L
13C6  DD741B    04133         LD      (IX+CHMAP+1),H
                04134 ADJM2
13C9  E1        04135         POP     HL                              ; NEXT CHANNEL
13CA  DD5E09    04136         LD      E,(IX+CHLEN)
13CD  DD560A    04137         LD      D,(IX+CHLEN+1)
13D0  DD19      04138         ADD     IX,DE
13D2  18D1      04139         JR      ADJM1
                04140 ;
                04141 ;
                04142 ;********************CHANNEL***************
                04143 ;
                04144 ;
                04145 ; THE FOLLOWING DATA IS USED AS INITIALIZATION DATA FOR MICRO
                04146 ; DRIVE CHANNEL INFORMATION
                04147 ;
13D4  0800      04148 MCHDAT  DEFW    8                               ; ERROR ADDRESS AS USED BY OLD WRCH
13D6  0800      04149         DEFW    8                               ; ERROR ADDRESS AS USED BY OLD RDCH
13D8  CD        04150         DEFB    'M'+80H                         ; CHANNEL TYPE...DEFAULT TEMPORARY
13D9  DA11      04151         DEFW    MWRCH                           ; ADDRESS USED BY NEW WRCH
13DB  2411      04152         DEFW    MRDCH                           ; ADDRESS USED BY NEW RDCH
13DD  5302      04153         DEFW    CHANLN                          ; LENGTH OF THIS CHANNEL DATA
13DF  0000      04154         DEFW    0                               ; CURRENT BYTE POINTER
13E1  00        04155         DEFB    0                               ; CURRENT RECORD
13E2  2020      04156         DEFW    2020H                           ; INITIAL NAME ALL SPACES
13E4  2020      04157         DEFW    2020H
13E6  2020      04158         DEFW    2020H
13E8  2020      04159         DEFW    2020H
13EA  2020      04160         DEFW    2020H
13EC  FF        04161         DEFB    0FFH                            ; INITIALLY OPENED FOR WRITE
                04162 ;
                04163 ;
                04164 ; THE FOLLOWING DATA IS USED TO INITIALIZE THE PREAMBLE DATA
                04165 ;
                04166 P_AMBL
13ED  0000      04167         DEFW    0
13EF  0000      04168         DEFW    0
13F1  0000      04169         DEFW    0
13F3  0000      04170         DEFW    0
13F5  0000      04171         DEFW    0
13F7  FFFF      04172         DEFW    0FFFFH
                04173 *INCLUDE UHSOFT.S
                04174 ;*********************************************
                04175 ;*                                           *
                04176 ;*    UHSOFT.S                              *
                04177 ;*    26/4/83                                *
                04178 ;*                                           *
                04179 ;*********************************************
                04180 ;
                04181 ; THIS MODULE WILL CONTAIN HIGHER LEVEL SOFTWARE FOR THE
                04182 ; MICRODRIVE.
                04183 ; THE PROCEDURES WITHIN THIS MODULE RELATE TO THE KEYWORDS
                04184 ; MOVE, SAVE, LOAD, VERIFY AND MERGE
                04185 ; LOAD, VERIFY AND MERGE ARE MOSTLY TAKEN CARE OF IN
                04186 ; IANS SH_SAVE AND SH_SAVE2 ONLY TWO PROCEDURES FOR GETTING
                04187 ; A HEADER AND GETTING A DATA BLOCK (GET_HD AND GET_BL) ARE
                04188 ; NEEDED
                04189 ;
                04190 ;       GLOBAL          MOVE,SAVE,GET_HD,GETMBL
                04191 ;       GLOBAL          RELNAM
                04192 ;
                04193 ;       EXTERNAL        OPENN,OPENF,FORMAT,CATN                         ;VHSOFT
                04194 ;       EXTERNAL        ERA,MANY?
                04195 ;       EXTERNAL        CREATE,DELIX,NERROR,FREE?,CPSTR                 ;HISOFT
                04196 ;       EXTERNAL        DECSEC,READN,WTHDR,LIST?
                04197 ;       EXTERNAL        MWRCH,MRDCH,DECSEC,SPACE?
                04198 ;       EXTERNAL        ECH,ECD,WRFREE,MARK
                04199 ;       EXTERNAL        MRDIX,MWRIX,CLOSIX,WRC
                04200 ;       EXTERNAL        RDNXT
                04201 ;       EXTERNAL        RDHBLK,RDBLK,WRHBLK,WRBLK               ;DRIVES
                04202 ;       EXTERNAL        DRVSEL,BREAK?
                04203 ;       EXTERNAL        HEX,OP,DIS10,OPHEX,DISMAP               ;BLOCKS
                04204 ;       EXTERNAL        NTEMP,IN_BYT,IN_BYP,OUT_N,OUT_T2,DELTMP,DELBC
                04205 ;       EXTERNAL        NTCLSE
                04206 ;       EXTERNAL        OUT_T,OPENT
                04207 ;       EXTERNAL        DONE
                04208 ;
                04209 ; MOVE IS CALLED IN RESPONSE TO THE COMMAND MOVE SOURCE TO DESTINATION
                04210 ; SOURCE AND DESTINATION MAY EITHER BE STREAMS, MICRODRIVE
                04211 ; FILENAMES, NETWORK CHANNELS OR RS232 CHANNELS
                04212 ; IF A FILENAME THE FILE IS OPENED AND CLOSED BY MOVE
                04213 ; IF A STREAM IT IS LEFT OPEN AFTER USE TO ALLOW APPENDING TO A FILE
                04214 ;
                04215 ; THE SOURCE IS SPECIFIED BY STR1 AND DESTNATION BY STR2
                04216 ;
                04217 MOVE
13F9  FDCB7CE6  04218         SET     4,(IY+FLAGS3-Y)                 ; TELLS CHANGE THAT WE ARE NOT INKEY$
13FD  CD5D14    04219         CALL    MOP                             ; OPEN THE SOURCE
1400  2A4F5C    04220         LD      HL,(CHANS)
1403  E5        04221         PUSH    HL
1404  CDCF14    04222         CALL    EXCH                            ; EXCHANGE SOURCE AND DESTINATION SPECS
1407  CD5D14    04223         CALL    MOP                             ; OPEN THE DESTINATION
140A  CDCF14    04224         CALL    EXCH
140D  D1        04225         POP     DE
140E  2A4F5C    04226         LD      HL,(CHANS)                      ; RELOCATE THE SOURCE ADDRESS
1411  B7        04227         OR      A                               ; IF MAP HAS BEEN INTRODUCED
1412  ED52      04228         SBC     HL,DE
1414  ED5BDA5C  04229         LD      DE,(DR+N_STR1)
1418  19        04230         ADD     HL,DE
1419  22DA5C    04231         LD      (DR+N_STR1),HL
                04232 MOV0
141C  2ADA5C    04233         LD      HL,(DR+N_STR1)
141F  22515C    04234         LD      (CURCHL),HL
                04235 MOV1
1422            04236         OLDCAL  INCH                            ; YES..TRY TO GET A CHARACTER
1425  3804      04240         JR      C,MOV5
1427  28F9      04241         JR      Z,MOV1                          ; TRY AGAIN
1429  180B      04242         JR      MOV9                            ; OR EOF
                04243 MOV5
142B  2AE25C    04244         LD      HL,(DR+N_STR2)
142E  22515C    04245         LD      (CURCHL),HL
                04246 ;
1431            04247         OLDCAL  OUTCH                           ; SEND THE CHARACTER
1434  18E6      04251         JR      MOV0
                04252 ;
                04253 MOV9
1436  FDCB7CA6  04254         RES     4,(IY+FLAGS3-Y)
143A  2A4F5C    04255         LD      HL,(CHANS)
143D  E5        04256         PUSH    HL
143E  CDCF14    04257         CALL    EXCH                            ; CLOSE THE DESTINATION FIRST
1441  CDAC14    04258         CALL    MOC
1444  CDCF14    04259         CALL    EXCH
1447  D1        04260         POP     DE
1448  2A4F5C    04261         LD      HL,(CHANS)                      ; RELOCATE THE SOURCE ADDRESS
144B  B7        04262         OR      A                               ; IF A MAP HAS BEEN DELETED
144C  ED52      04263         SBC     HL,DE 
144E  ED5BDA5C  04264         LD      DE,(DR+N_STR1)
1452  19        04265         ADD     HL,DE
1453  22DA5C    04266         LD      (DR+N_STR1),HL
1456  CDAC14    04267         CALL    MOC
1459  CDB917    04268         CALL    DELTMP
145C  C9        04269         RET
                04270 ;
                04271 ;
                04272 ;
                04273 MOP
145D  3AD85C    04274         LD      A,(DR+S_STR1)                   ; IS IT A STREAM
1460  3C        04275         INC     A
1461  280B      04276         JR      Z,MOP1
                04277 ;
1463  3D        04278         DEC     A                               ; YES...SELECT IT
1464            04279         OLDCAL  SELECT
1467  2A515C    04283         LD      HL,(CURCHL)
146A  22DA5C    04284         LD      (DR+N_STR1),HL
146D  C9        04285         RET
                04286 MOP1
146E  3AD95C    04287         LD      A,(DR+L_STR1)                   ; WHICH LETTER
1471  FE4D      04288         CP      'M'
1473  2012      04289         JR      NZ,MOP2
                04290 ;
1475  CD291B    04291         CALL    OPENF                           ; OPEN MICRODRIVE
1478  AF        04292         XOR     A                               ; ENABLE INTERUPTS
1479  CDF717    04293         CALL    DRVSEL
147C  DD22DA5C  04294         LD      (DR+N_STR1),IX
1480  DDCB4356  04295         BIT     2,(IX+RECFLG)                   ; IS IT A SLVM FILE
1484  C8        04296         RET     Z
                04297 ;
1485  E7        04298         RST     SH_ERR                          ; NO...WRONG FILE TYPE
1486  16        04299         DEFB    16H
                04300 ;
                04301 MOP2
1487  FE4E      04302         CP      'N'                             ; NET?
1489  2008      04303         JR      NZ,MOP3
                04304 ;
148B  CDA90E    04305         CALL    NTEMP
148E  DD22DA5C  04306         LD      (DR+N_STR1),IX
1492  C9        04307         RET
                04308 ;
                04309 MOP3
1493  FE54      04310         CP      'T'                             ; CHECK THAT IT IS RS232
1495  2806      04311         JR      Z,MOP4
1497  FE42      04312         CP      'B'
1499  2802      04313         JR      Z,MOP4
                04314 ;
149B  E7        04315         RST     SH_ERR                          ; OTHERWISE NONSENSE IN BASIC
149C  00        04316         DEFB    0
                04317 ;
                04318 MOP4
149D  CD130B    04319         CALL    OPENT                           ; CREATE AN RS232 CHANNEL AND SAVE ADDRESS
14A0  ED53DA5C  04320         LD      (DR+N_STR1),DE
14A4  D5        04321         PUSH    DE
14A5  DDE1      04322         POP     IX
14A7  DDCB04FE  04323         SET     7,(IX+CHTYPE)                   ; MARK IT TEMPORARY FOR DELTMP
14AB  C9        04324         RET
                04325 ;
                04326 ;
                04327 ;
                04328 MOC
14AC  3AD85C    04329         LD      A,(DR+S_STR1)                   ; IS IT A STREAM
14AF  3C        04330         INC     A
14B0  C0        04331         RET     NZ                              ; YES...JUST RETURN
                04332 ;
14B1  3AD95C    04333         LD      A,(DR+L_STR1)
14B4  FE4D      04334         CP      'M'
14B6  2008      04335         JR      NZ,MOC1
                04336 ;
14B8  DD2ADA5C  04337         LD      IX,(DR+N_STR1)
14BC  CDB112    04338         CALL    CLOSIX                          ; CLOSE MICRODRIVE
14BF  C9        04339         RET
                04340 MOC1
14C0  FE4E      04341         CP      'N'
14C2  C0        04342         RET     NZ                              ; RETURN IF NOT NET
                04343 ;
14C3  DD2ADA5C  04344         LD      IX,(DR+N_STR1)
14C7  DD22515C  04345         LD      (CURCHL),IX
14CB  CDF50E    04346         CALL    NTCLSE
14CE  C9        04347         RET
                04348 ;
                04349 ;
                04350 ;
                04351 ;
                04352 ; EXCH SWAPS THE SPECIFICATIONS OF SOURCE AND DESTINATIONS
                04353 ; IN STR1 AND STR2
                04354 ;
                04355 EXCH
14CF  11D65C    04356         LD      DE,DR+D_STR1
14D2  21DE5C    04357         LD      HL,DR+D_STR2
14D5  0608      04358         LD      B,8
                04359 EXCH1
14D7  1A        04360         LD      A,(DE)
14D8  4E        04361         LD      C,(HL)
14D9  EB        04362         EX      DE,HL                           ; *
14DA  71        04363         LD      (HL),C
14DB  12        04364         LD      (DE),A
14DC  EB        04365         EX      DE,HL                           ; *
14DD  23        04366         INC     HL
14DE  13        04367         INC     DE
14DF  10F6      04368         DJNZ    EXCH1
14E1  C9        04369         RET
                04370 ;
                04371 ;
                04372 ; SAVE OPENS A TEMPORARY MICRORIVE BUFFER FOR THE FILE SPECIFIED
                04373 ; BY STR1. IT THEN COPIES THE HEADER DATA AT DR+HD_00 ETC AND
                04374 ; THE DATA SPECIFIED INTO BUFFERS AND WRITES THEM USING WRC
                04375 ; A SUBROUTINE OF WRREC WHICH LEAVES THE MOTORS SPINNING
                04376 ;
                04377 ; IF (DR+COPIES) IS NOT EQUAL TO 1 THEN MORE COPIES WILL BE MADE
                04378 ; WITHOUT REOPENING THE FILE.
                04379 ;
                04380 ;
                04381 ; ????MAY HAVE TO ADD A DELAY AFTER WRITING THE FIRST BLOCK
                04382 ; SO THAT LOAD DOES NOT MISS THE SECOND
                04383 ;
                04384 SAVE
14E2  3AD65C    04385         LD      A,(DR+D_STR1)                   ; CHECK WRITE PROTECT FIRST
14E5  CDF717    04386         CALL    DRVSEL
14E8  DBEF      04387         IN      A,(PORTC)
14EA  E601      04388         AND     PROTECT
14EC  2002      04389         JR      NZ,SAVE0
14EE  E7        04390         RST     SH_ERR                          ; DRIVE WRITE PROTECTED
14EF  0E        04391         DEFB    0EH
                04392 SAVE0
14F0  2AE95C    04393         LD      HL,(DR+HD_0D)
14F3  22E45C    04394         LD      (DR+N_STR2+2),HL                ; PUT BLOCK ADDR. IN X_PTR SO IT IS RELOCATED
14F6  CD291B    04395         CALL    OPENF                           ; OPEN THE FILE
                04396 
14F9  DDCB1846  04397         BIT     WRFLG,(IX+CHFLAG)               ; IS IT OPEN FOR WRITE
14FD  2005      04398         JR      NZ,SAVE1
14FF  CDB112    04399         CALL    CLOSIX
1502  E7        04400         RST     SH_ERR                          ; NO...ERROR
1503  0C        04401         DEFB    0CH                             ; WRITING TO A READ FILE
                04402 SAVE1
1504  DDCB43D6  04403         SET     2,(IX+RECFLG)                   ; MARK THE FILE AS SLVM
1508  DD7E19    04404         LD      A,(IX+CHDRIV)
150B  CDF717    04405         CALL    DRVSEL
150E  DDE5      04406         PUSH    IX
1510  E1        04407         POP     HL
1511  115200    04408         LD      DE,CHDATA
1514  19        04409         ADD     HL,DE
1515  EB        04410         EX      DE,HL                           ; * MOVE THE HEADER DATA IN TO THE BUFFER
1516  21E65C    04411         LD      HL,DR+HD_00
1519  010900    04412         LD      BC,9
151C  DD710B    04413         LD      (IX+CHBYTE),C
151F  EDB0      04414         LDIR
                04415 
1521  D5        04416         PUSH    DE
1522  210900    04417         LD      HL,9                            ; CHECK THERE IS ENOUGH SPACE ON
1525  ED4BE75C  04418         LD      BC,(DR+HD_0B)                   ; THE DRIVE
1529  09        04419         ADD     HL,BC
152A  CB3C      04420         SRL     H                               ; WORK OUT THE NUMBER OF RECORDS
152C  24        04421         INC     H
                04422 
152D  E5        04423         PUSH    HL
152E  CD381D    04424         CALL    MANY?                           ; COUNT THE NUMBER OF FREE SECTORS
1531  E1        04425         POP     HL
                04426 
1532  7B        04427         LD      A,E
1533  BC        04428         CP      H                               ; AVAILABLE - REQUIRED
1534  3002      04429         JR      NC,SAV1_5
                04430 
1536  E7        04431         RST     SH_ERR
1537  0F        04432         DEFB    0FH                             ; MICRODRIVE FULL
                04433 
                04434 SAV1_5
1538  D1        04435         POP     DE
1539  2AE45C    04436         LD      HL,(DR+N_STR2+2)                ; SOURCE
153C  ED4BE75C  04437         LD      BC,(DR+HD_0B)                   ; LENGTH
                04438 SAVE2
1540  78        04439         LD      A,B
1541  B1        04440         OR      C
1542  2822      04441         JR      Z,SAVE4                         ; END OF DATA...CLOSE!
1544  DD7E0C    04442         LD      A,(IX+CHBYTE+1)                 ; END OF BUFFER?
1547  FE02      04443         CP      2
1549  200F      04444         JR      NZ,SAVE3
154B  E5        04445         PUSH    HL
154C  C5        04446         PUSH    BC
154D  CD1512    04447         CALL    WRC                             ; YES...WRITE RECORD
1550  C1        04448         POP     BC
1551  DDE5      04449         PUSH    IX
1553  E1        04450         POP     HL
1554  115200    04451         LD      DE,CHDATA
1557  19        04452         ADD     HL,DE
1558  EB        04453         EX      DE,HL                           ; *
1559  E1        04454         POP     HL
                04455 SAVE3
155A  EDA0      04456         LDI                                     ; MOVE BYTE INTO BUFFER
155C  DD340B    04457         INC     (IX+CHBYTE)
155F  20DF      04458         JR      NZ,SAVE2
1561  DD340C    04459         INC     (IX+CHBYTE+1)
1564  18DA      04460         JR      SAVE2
                04461 SAVE4
1566  DDCB43CE  04462         SET     1,(IX+RECFLG)                   ; MARK THE BLOCK EOF
156A  CD1512    04463         CALL    WRC                             ; AND SAVE IT
                04464 
156D  3AEF5C    04465         LD      A,(DR+COPIES)                   ; DO WE NEED MORE COPIES
1570  3D        04466         DEC     A
1571  280E      04467         JR      Z,SAVE5
                04468 
1573  32EF5C    04469         LD      (DR+COPIES),A                   ; YES
1576  DDCB438E  04470         RES     1,(IX+RECFLG)                   ; RESET THE BUFFER
157A  3E00      04471         LD      A,0
157C  DD770D    04472         LD      (IX+CHREC),A
157F  1883      04473         JR      SAVE1
                04474 SAVE5
1581  AF        04475         XOR     A
1582  CDF717    04476         CALL    DRVSEL                          ; NO..TURN OFF THE MOTOR
                04477 
1585  C3C610    04478         JP      DELIX                           ; AND CLEAN UP
                04479 ;
                04480 ; GET_HD OPENS THE MICRO DRIVE FILE SPECIFIED IN STR1, TESTS
                04481 ; IT FOR READ AND SLVM, AND READS THE FIRST NINE BYTES OF IT
                04482 ; INTO THE HD_ AREA.
                04483 ;
                04484 GET_HD
1588  2AE15C    04485         LD      HL,(DR+SC_0D)                   ; RELOCATE THE ADDRESS
158B  22E45C    04486         LD      (DR+N_STR2+2),HL                ; OF THE OLD VARIABLE
158E  CD291B    04487         CALL    OPENF                           ; OPEN THE FILE
1591  DDCB1846  04488         BIT     WRFLG,(IX+CHFLAG)               ; IS IT OPEN FOR READ
1595  2802      04489         JR      Z,LOAD2
1597  E7        04490         RST     SH_ERR                          ; NO...ERROR
1598  11        04491         DEFB    11H                             ; FILE NOT FOUND
                04492 LOAD2
1599  DDCB4356  04493         BIT     2,(IX+RECFLG)                   ; IS IT A SLVM FILE
159D  2002      04494         JR      NZ,LOAD25
159F  E7        04495         RST     SH_ERR
15A0  16        04496         DEFB    16H                             ; WRONG FILE TYPE
                04497 LOAD25
15A1  DDE5      04498         PUSH    IX                              ; GET THE HEADER DATA
15A3  E1        04499         POP     HL
15A4  115200    04500         LD      DE,CHDATA
15A7  19        04501         ADD     HL,DE
15A8  11E65C    04502         LD      DE,DR+HD_00
15AB  010900    04503         LD      BC,9
15AE  EDB0      04504         LDIR
15B0  C9        04505         RET
                04506 ;
                04507 ; GETMBL READS THE REMAINDER OF THE FIRST RECORD AND READS ALL THE
                04508 ; OTHERS IN THE FILE SPECIFIED BY IX. THE DATA IS EITHER TRANSFERED TO
                04509 ; OR COMPARED WITH THE DATA AT (HL)
                04510 ;
                04511 GETMBL
15B1  22E95C    04512         LD      (DR+HD_0D),HL                   ; SAVE DESTINATION ADDRESS
15B4  DD5E53    04513         LD      E,(IX+CHDATA+1)                 ; AND LENGTH IN RECORDS
15B7  DD5654    04514         LD      D,(IX+CHDATA+2)
15BA  210800    04515         LD      HL,8                            ; CONVERT LENGTH TO RECORDS
15BD  19        04516         ADD     HL,DE
15BE  CB3C      04517         SRL     H                               ; ADD 8,DIVIDE BY 512,ADD 1
15C0  24        04518         INC     H
15C1  7C        04519         LD      A,H
15C2  32E75C    04520         LD      (DR+HD_0B),A                    ; AND SAVE
                04521 ;
15C5  CD1B16    04522         CALL    PUSHMP                          ; SAVE THE CHANNEL'S MAP
15C8  110900    04523         LD      DE,9                            ; SETUP POINTERS TO DATA
15CB  DD6E45    04524         LD      L,(IX+RECLEN)                   ; RECLEN...REMAINING BYTES
15CE  DD6646    04525         LD      H,(IX+RECLEN+1)                 ; DE...DESTINATION
15D1  B7        04526         OR      A                               ; HL...SOURCE
15D2  ED52      04527         SBC     HL,DE
15D4  DD7545    04528         LD      (IX+RECLEN),L
15D7  DD7446    04529         LD      (IX+RECLEN+1),H
15DA  DDE5      04530         PUSH    IX
15DC  E1        04531         POP     HL
15DD  115B00    04532         LD      DE,CHDATA+9
15E0  19        04533         ADD     HL,DE
15E1  ED5BE95C  04534         LD      DE,(DR+HD_0D)
15E5  181A      04535         JR      LOAD6                           ; AND MOVE RECORD TO MEMORY
                04536 LOAD5
15E7  CD7416    04537         CALL    READ_1                          ; READ ANY RECORD
15EA  DD7E44    04538         LD      A,(IX+RECNUM)                   ; IS IT RECORD 0 AGAIN
15ED  B7        04539         OR      A
15EE  28F7      04540         JR      Z,LOAD5                         ; YES IGNORE
15F0  17        04541         RLA                                     ; NO...WORK OUT WHERE TO PUT IT
15F1  3D        04542         DEC     A
15F2  57        04543         LD      D,A                             ; RECORD*512-9+BASE ADDRESS
15F3  1EF7      04544         LD      E,-9
15F5  2AE95C    04545         LD      HL,(DR+HD_0D)
15F8  19        04546         ADD     HL,DE
15F9  EB        04547         EX      DE,HL                           ; *
15FA  DDE5      04548         PUSH    IX
15FC  E1        04549         POP     HL
15FD  015200    04550         LD      BC,CHDATA                       ; SETUP POINTER AS BEFORE
1600  09        04551         ADD     HL,BC
                04552 LOAD6
1601  D9        04553         EXX                                     ; SAVE POINTERS
1602  CDE212    04554         CALL    DONE?
1605  20E0      04555         JR      NZ,LOAD5                        ; HAS THIS RECORD BEEN DEALT WITH
1607  7E        04556         LD      A,(HL)                          ; NO...MARK MAP
1608  B0        04557         OR      B
1609  77        04558         LD      (HL),A
160A  D9        04559         EXX
160B  CD5016    04560         CALL    CPBLK                           ; MOVE OR VERIFY THE RECORD
160E  3AE75C    04561         LD      A,(DR+HD_0B)                    ; DECREMENT RECORD COUNT
1611  3D        04562         DEC     A
1612  32E75C    04563         LD      (DR+HD_0B),A                    ; WAS IT THE LAST RECORD?
1615  20D0      04564         JR      NZ,LOAD5                        ; NO...NEXT RECORD
1617  CD3516    04565         CALL    POPMAP                          ; YES...RESTORE MAP
161A  C9        04566         RET
                04567 ;
                04568 ; PUSHMP PUSHES THE MAP OF THE CHANNEL IDENTIFIED BY IX
                04569 ; ONTO THE STACK AND REPLACES THE CONTENTS WITH ALL ZEROS
                04570 ;
                04571 PUSHMP
161B  E1        04572         POP     HL                              ; SAVE RETURN ADDRESS
161C  22C95C    04573         LD      (SECTOR),HL
161F  DD6E1A    04574         LD      L,(IX+CHMAP)                    ; POINT TO MAP
1622  DD661B    04575         LD      H,(IX+CHMAP+1)
1625  010010    04576         LD      BC,1000H                        ; WORD COUNT IN B
                04577 PUSHM1
1628  5E        04578         LD      E,(HL)
1629  71        04579         LD      (HL),C
162A  23        04580         INC     HL
162B  56        04581         LD      D,(HL)
162C  71        04582         LD      (HL),C
162D  23        04583         INC     HL
162E  D5        04584         PUSH    DE
162F  10F7      04585         DJNZ    PUSHM1
1631  2AC95C    04586         LD      HL,(SECTOR)                     ; RETURN
1634  E9        04587         JP      (HL)
                04588 ;
                04589 ;
                04590 ; POPMAP                DOES THE OPPOSITE OF PUSHMP
                04591 ;
                04592 POPMAP
1635  E1        04593         POP     HL                              ; SAVE RETURN ADDRESS?
1636  22C95C    04594         LD      (SECTOR),HL
1639  DD6E1A    04595         LD      L,(IX+CHMAP)
163C  DD661B    04596         LD      H,(IX+CHMAP+1)
163F  111F00    04597         LD      DE,31
1642  19        04598         ADD     HL,DE
1643  0610      04599         LD      B,16
                04600 POPMP1
1645  D1        04601         POP     DE
1646  72        04602         LD      (HL),D
1647  2B        04603         DEC     HL
1648  73        04604         LD      (HL),E
1649  2B        04605         DEC     HL
164A  10F9      04606         DJNZ    POPMP1
164C  2AC95C    04607         LD      HL,(SECTOR)
164F  E9        04608         JP      (HL)
                04609 ;
                04610 ;
                04611 ; CPBLK EITHER COPIES THE RECLEN BYTES AT (HL) TO (DE)
                04612 ; OR COMPARES THEM DEPENDING ON BIT XR IN FLAGS3
                04613 ; IF BIT XR IS SET THEN THE BLOCKS ARE COMPARED
                04614 ;
                04615 CPBLK
1650  DD4E45    04616         LD      C,(IX+RECLEN)
1653  DD4646    04617         LD      B,(IX+RECLEN+1)
1656  3AB65C    04618         LD      A,(FLAGS3)
1659  CB7F      04619         BIT     XR,A
165B  2003      04620         JR      NZ,CPBLK1                       ; COPY OR COMPARE
165D  EDB0      04621         LDIR                                    ; COPY...EASY
165F  C9        04622         RET
                04623 
                04624 CPBLK1
1660  1A        04625         LD      A,(DE)                          ; COMPARE...FAIRLY EASY
1661  BE        04626         CP      (HL)
1662  2008      04627         JR      NZ,CPBLK2
1664  23        04628         INC     HL
1665  13        04629         INC     DE
1666  0B        04630         DEC     BC
1667  78        04631         LD      A,B
1668  B1        04632         OR      C
1669  20F5      04633         JR      NZ,CPBLK1
166B  C9        04634         RET
                04635 CPBLK2
166C  E7        04636         RST     SH_ERR                          ; ERROR
166D  15        04637         DEFB    15H                             ; FAILED TO VERIFY
                04638 ;
                04639 ; READ_ READS ANY RECORD FROM THE FILE SPECIFIED BY THE BUFFER
                04640 ; AT IX IT IS BASED ON READN
                04641 ; !!!!!!!!THIS PROCEDURE ONLY READS RECORDS NOT MARKED ON THE
                04642 ; MAP. THIS SAVES DOING ECD ON ALREADY OBTAINED DATA AND MISSING
                04643 ; THE NEXT BLOCK.
                04644 ; THIS PROCEDURE LEAVES THE MOTOR SPINNING
                04645 ;
                04646 READ_
166E  DD7E19    04647         LD      A,(IX+CHDRIV)                   ; SELECT THE DRIVE
1671  CDF717    04648         CALL    DRVSEL
                04649 ;
1674  01FB04    04650 READ_1  LD      BC,TRYS*HD_MAX
1677  ED43C95C  04651         LD      (SECTOR),BC                     ; *
                04652 _RDN1                                           ; *
167B  CDA711    04653         CALL    RDNXT                           ; READ THE NEXT DATA BLOCK
167E  3812      04654         JR      C,_RDN2                         ; * NEXT SECTOR IF NO GOOD
1680  2810      04655         JR      Z,_RDN2                         ; * OR EMPTY
                04656 ;
1682  CDE212    04657         CALL    DONE?
1685  200B      04658         JR      NZ,_RDN2                        ; * SKIP THE ECD IF RECORD DONE ALREADY
                04659 
1687  DDE5      04660         PUSH    IX
1689  E1        04661         POP     HL
168A  115200    04662         LD      DE,CHDATA
168D  19        04663         ADD     HL,DE
168E  CD4E13    04664         CALL    ECD                             ; ERROR CHECK AND RETURN
1691  C8        04665         RET     Z
                04666 _RDN2                                           ; *
1692  CD1A13    04667         CALL    DECSEC
1695  20E4      04668         JR      NZ,_RDN1                        ; *
                04669 ;
1697  E7        04670         RST     SH_ERR
1698  11        04671         DEFB    011H                            ; FILE NOT FOUND
                04672 ;
                04673 ;
                04674 ;
                04675 ; RELNAME RELOCATES THE ADDRESSES OF FILENAMES (OR OTHERWISE)
                04676 ; IN N_STR1+2 AND N_STR2+2 AFTER AN INSERTION
                04677 ; HL SHOULD CONTAIN THE ADDRESS OF THE INSERTION
                04678 ; BC SHOULD CONTAIN THE LENGTH OF THE INSERTION
                04679 ; STR2 IS USED BY SLVM SYNTAX TO STORE SPECIFIED LOAD DETAILS BUT
                04680 ; N_STR2+2 (23780) IS NOT USED.
                04681 ;
                04682 RELNAM
1699  E5        04683         PUSH    HL
169A  E5        04684         PUSH    HL
169B  ED5BE45C  04685         LD      DE,(DR+N_STR2+2)
169F  CDB416    04686         CALL    REL
16A2  ED53E45C  04687         LD      (DR+N_STR2+2),DE
16A6  E1        04688         POP     HL
16A7  ED5BDC5C  04689         LD      DE,(DR+N_STR1+2)
16AB  CDB416    04690         CALL    REL
16AE  ED53DC5C  04691         LD      (DR+N_STR1+2),DE
16B2  E1        04692         POP     HL
16B3  C9        04693         RET
                04694 ;
                04695 ;
                04696 REL
16B4  37        04697         SCF
16B5  ED52      04698         SBC     HL,DE
16B7  D0        04699         RET     NC                              ; IF IT IS BELOW INSERT THEN NO CHANGE
16B8  2A655C    04700         LD      HL,(STKEND)
16BB  ED52      04701         SBC     HL,DE
16BD  D8        04702         RET     C                               ; IF IT IS ABOVE STKEND THEN NO CHANGE
16BE  EB        04703         EX      DE,HL                           ; *
16BF  09        04704         ADD     HL,BC
16C0  EB        04705         EX      DE,HL                           ; *
16C1  C9        04706         RET
                04707 ;
                04708 *INCLUDE SH_CLOSE.S
                04709 ;
                04710 ;**************************************************************
                04711 ;
                04712 ;                CLOSE MODULE
                04713 ;                30/3/83
                04714 ;
                04715 ;**************************************************************
                04716 ;
                04717 ;       GLOBAL          DELTMP,CL_STR
                04718 ;       EXTERNAL        DRVSEL,DELIX
                04719 ;       EXTERNAL        END1,OUT_T2,NTCLSE
                04720 ;       EXTERNAL        CLOSEN,CLOSIX
                04721 
                04722         ORG     1708H
                04723 ;
                04724 
                04725 
1708  23        04726         INC     HL                              ; REPEAT THE BASE ROM INSTRUCTION
1709  F7        04727         RST     INSER_                          ; JUST IN CASE FIRST CALL TO SHADOW ROM
                04728 
170A  CB3F      04729         SRL     A                               ; 'A' HOLDS THE ALTERED STREAM NUMBER
170C  D603      04730         SUB     03H                             ; FIND STREAM NUMBER
                04731                                                 ; USING (A/2-3)
170E  FDCB7C8E  04732         RES     1,(IY+FLAGS3-Y)                 ; TO TELL CL_STR TO CLOSE PROPERLY
1712  CD1817    04733         CALL    CL_STR                          ; CLOSE THE STREAM NOW
                04734 
1715  C3C105    04735         JP      END1
                04736 
                04737 
                04738 
                04739 ;______________________________________________________________________
                04740 
                04741 CL_STR          ; CLOSE STREAM 'A'
1718  D7        04742         RST     CALBAS
1719  2717      04743         DEFW    1727H                           ; FIND 'OFFSET' FOR THAT STREAM
                04744                                                 ; BC - OFFSET
                04745                                                 ; HL - STR_PTR
171B  79        04746         LD      A,C
171C  B0        04747         OR      B
171D  C8        04748         RET     Z                               ; RETURN 'Z' IS STREAM ALREADY CLOSED
                04749 
171E  C5        04750         PUSH    BC                              ; STACK  - OFFSET
171F  E5        04751         PUSH    HL                              ; STACK  - OFFSET, STR_PTR
1720  2A4F5C    04752         LD      HL,(CHANS_)                     ; BASE OF CHANNEL AREA
1723  2B        04753         DEC     HL
1724  09        04754         ADD     HL,BC                           ; BASE OF STREAM A'S CHANNEL DATA
1725  E3        04755         EX      (SP),HL                         ; STACK  - OFFSET, CH_PTR
                04756                                                 ; HL - STR_PTR AGAIN
                04757 
1726  D7        04758         RST     CALBAS
1727  EB16      04759         DEFW    16EBH                           ; TO CLOSE THE STREAM / RESET IT
                04760 
1729  2A4F5C    04761         LD      HL,(CHANS_)                     ; BASE OF CHANNEL AREA
172C  111400    04762         LD      DE,0014H
172F  19        04763         ADD     HL,DE                           ; ADDRESS AFTER K, S, R & P CHANNEL DATA BLOCKS
1730  D1        04764         POP     DE                              ; FETCH CH_PTR
1731  37        04765         SCF                                     ; DECREMENTED SUBTRACTION
1732  ED52      04766         SBC     HL,DE
1734  C1        04767         POP     BC                              ; FETCH OFFSET
1735  D0        04768         RET     NC                              ; RETURN NOW IF THERE IS NO 'RECLAIMING' TO BE DONE
                04769 
1736  C5        04770         PUSH    BC                              ; STACK  - OFFSET
1737  D5        04771         PUSH    DE                              ; STACK  - OFFSET, CH_PTR
                04772 
1738  EB        04773         EX      DE,HL                           ; CH_PTR TO HL
1739  22515C    04774         LD      (CURCHL),HL                     ; MAKE THIS CHANNEL 'CURRENT'
173C  23        04775         INC     HL
173D  23        04776         INC     HL
173E  23        04777         INC     HL
173F  23        04778         INC     HL
1740  7E        04779         LD      A,(HL)                          ; FIND THE 'LETTER'
1741  110500    04780         LD      DE,0005H                        ; THE LENGTH IS 5 LOCATIONS FURTHER ON
1744  19        04781         ADD     HL,DE
1745  5E        04782         LD      E,(HL)                          ; FIND THE 'LOW LENGTH'
1746  23        04783         INC     HL
1747  56        04784         LD      D,(HL)                          ; AND THE 'HIGH LENGTH'
1748  D5        04785         PUSH    DE                              ; STACK  - OFFSET, CHR_PTR, LENGTH
                04786 
1749  FE42      04787         CP      42H                             ; IS IT 'B' ?
174B  2804      04788         JR      Z,CL_BT
174D  FE54      04789         CP      54H                             ; IS IT 'T' ?
174F  200D      04790         JR      NZ,CL_N
                04791 
                04792 CL_BT
1751  FDCB7C4E  04793         BIT     1,(IY+FLAGS3-Y)                 ; JUST DELETE IF CLEAR#
1755  2028      04794         JR      NZ,CL_R
1757  3E0D      04795         LD      A,0DH                           ; A CARRIAGE RETURN CHARACTER
1759  CD5A0C    04796         CALL    OUT_T2
175C  1821      04797         JR      CL_R
                04798 
                04799 CL_N
175E  FE4E      04800         CP      4EH                             ; IS THE LETTER A 'N' ?
1760  200B      04801         JR      NZ,CL_M
1762  FDCB7C4E  04802         BIT     1,(IY+FLAGS3-Y)                 ; JUST DELETE IF CLEAR#
1766  2017      04803         JR      NZ,CL_R
1768  CDF50E    04804         CALL    NTCLSE
176B  1812      04805         JR      CL_R
                04806 
176D  FE4D      04807 CL_M    CP      4DH                             ; IS THE LETTER A 'M' ?
176F  200E      04808         JR      NZ,CL_R                         ; DO THIS FOR THE SAKE OF FUTURE DEVICES
1771  D1        04809         POP     DE
1772  DDE1      04810         POP     IX
1774  D1        04811         POP     DE
1775  FDCB7C4E  04812         BIT     1,(IY+FLAGS3-Y)
1779  CAB112    04813         JP      Z,CLOSIX                        ; CLOSE
177C  C3C610    04814         JP      DELIX                           ; CLEAR#
                04815 
                04816                 ; NOW RECLAIM THE CHANNEL DATA BYTES FOR THIS STREAM
177F  C1        04817 CL_R    POP     BC                              ; FETCH THE 'LENGTH'
1780  E1        04818         POP     HL                              ; FETCH THE 'CH_PTR'
1781  C5        04819         PUSH    BC                              ; STACK  - OFFSET, LENGTH
1782  D7        04820         RST     CALBAS
1783  E819      04821         DEFW    19E8H                           ; RECLAIM THE BYTES
                04822 
                04823                 ; NOW CONSIDER ALL THE STREAM DATA BYTES
                04824                 ; REDUCING THOSE THAT NOW POINT TOO FAR
                04825 
1785  AF        04826         XOR     A                               ; CONSIDER THE OFFSETS FOR STREAMS 00H TO 0FH
1786  21165C    04827         LD      HL,5C16H                        ; BASE ADDRESS FOR STREAM 00H
                04828 
1789  5E        04829 CL_S1   LD      E,(HL)                          ; FETCH THE 'OFFSET' FOR THE STREAM
178A  23        04830         INC     HL
178B  56        04831         LD      D,(HL)
178C  2B        04832         DEC     HL
178D  225F5C    04833         LD      (X_PTR),HL                      ; STORE THE POINTER TEMPORARILY
1790  C1        04834         POP     BC                              ; THE 'LENGTH'
1791  E1        04835         POP     HL                              ; THE 'OFFSET'
1792  E5        04836         PUSH    HL
1793  C5        04837         PUSH    BC                              ; RESTORE THEM FOR THE NEXT LOOP
1794  A7        04838         AND     A
1795  ED52      04839         SBC     HL,DE                           ; TEST OLD OFFSET AGAINST NEW OFFSET
1797  300B      04840         JR      NC,CL_S2                        ; JUMP UNLESS DATA BYTES NEED REDUCING
                04841 
1799  EB        04842         EX      DE,HL                           ; NEW OFFSET TO HL
179A  A7        04843         AND     A
179B  ED42      04844         SBC     HL,BC                           ; REDUCE OFFSET BY 'LENGTH'
179D  EB        04845         EX      DE,HL                           ; MOVE TO DE
179E  2A5F5C    04846         LD      HL,(X_PTR)
17A1  73        04847         LD      (HL),E
17A2  23        04848         INC     HL
17A3  72        04849         LD      (HL),D                          ; ENTER THE NEW VALUE
                04850 
17A4  2A5F5C    04851 CL_S2   LD      HL,(X_PTR)
17A7  23        04852         INC     HL
17A8  23        04853         INC     HL                              ; STEP ON
17A9  3C        04854         INC     A
17AA  FE10      04855         CP      10H
17AC  38DB      04856         JR      C,CL_S1
                04857 
17AE  FD362600  04858         LD      (IY+X_PTR+1-Y),00H              ; RESET X_PTR
17B2  E1        04859         POP     HL
17B3  E1        04860         POP     HL
17B4  FDCB7C8E  04861         RES     1,(IY+FLAGS3-Y)                 ; TIDY UP AFTERWARDS
17B8  C9        04862         RET
                04863 
                04864 
                04865 
                04866 
                04867 ;
                04868 ; DELTMP DELETES ALL TEMPORARY BUFFERS
                04869 ; IE THOSE MARKED BY BIT 7 SET IN THE TYPE
                04870 ;
                04871 DELTMP
17B9  DD2A4F5C  04872         LD      IX,(CHANS)
17BD  111400    04873         LD      DE,20
17C0  DD19      04874         ADD     IX,DE
                04875 DT1
17C2  DD7E00    04876         LD      A,(IX+0)                        ; LAST CHANNEL?
17C5  FE80      04877         CP      80H
17C7  2009      04878         JR      NZ,DT15
17C9  3EEE      04879         LD      A,CTS.AND.SELD                  ; EVERYTHING OFF
17CB  D3EF      04880         OUT     (PORTC),A
17CD  AF        04881         XOR     A                               ; INCLUDING MOTORS
17CE  C3F717    04882         JP      DRVSEL
17D1  C9        04883         RET
                04884 ;
                04885 DT15
17D2  DD7E04    04886         LD      A,(IX+CHTYPE)                   ; TEMPORARY MICRODRIVE?
17D5  FECD      04887         CP      'M'+80H
17D7  2005      04888         JR      NZ,DT2
17D9  CDC610    04889         CALL    DELIX                           ; YES DELETE IT
17DC  18DB      04890         JR      DELTMP                          ; BACK FOR MORE
                04891 DT2
17DE  FECE      04892         CP      'N'+80H                         ; TEMPORARY NET
17E0  200B      04893         JR      NZ,DT3
                04894 ;
17E2  011401    04895         LD      BC,N_LEN
17E5  DDE5      04896         PUSH    IX
17E7  E1        04897         POP     HL
17E8  D7        04898         RST     CALBAS
17E9  E819      04899         DEFW    19E8H
17EB  18CC      04900         JR      DELTMP
                04901 DT3
17ED  DD5E09    04902         LD      E,(IX+CHLEN)
17F0  DD560A    04903         LD      D,(IX+CHLEN+1)
17F3  DD19      04904         ADD     IX,DE
17F5  18CB      04905         JR      DT1                             ; NEXT CHANNEL
                04906 ;
                04907 *INCLUDE DRIVE.S
                04908 ;**************************************************
                04909 ;*                                                *
                04910 ;*       DRIVE.S                                  *
                04911 ;*      12/5/83                                   *
                04912 ;*                                                *
                04913 ;**************************************************
                04914 ;
                04915 ;       GLOBAL          DRVSEL,RDHBLK,RDBLK,WRHBLK,WRBLK
                04916 ;       GLOBAL          BREAK?,DRV0
                04917 ;
                04918 ;       GLOBAL          DECBC
                04919 ;       EXTERNAL        OP,OPHEX,HEX
                04920 ;       EXTERNAL        B_COL
                04921 ;       EXTERNAL        MRDCH,MWRCH,DELIX,CLOSEN        ;HISOFT
                04922 ;       EXTERNAL        CLOSIX
                04923 ;       EXTERNAL        CREATE,WRREC,READN
                04924 ;       EXTERNAL        WTHDR,ECD,ECH
                04925 ;       EXTERNAL        FORMAT,OPENF,OPENN,CATN,ERA     ;VHSOFT
                04926 ;       EXTERNAL        MOVE,SAVE,GET_HD,GETMBL                 ;UHSOFT
                04927 ;
                04928 ; DRVSEL SELECTS AND TURNS ON THE MOTOR FOR THE DRIVE
                04929 ; SPECIFIED BY ACC
                04930 ; TO DESELECT ALL DRIVES A=0
                04931 ; INTERRUPTS ARE DISABLED WHILE A DRIVE IS SELECTED
                04932 ; WHEN A DRIVE IS SELECTED DRVSEL WAITS FOR A PERSISTANT
                04933 ; SIGNAL SO THAT AN EMPTY DRIVE IS NOT SELECTED
                04934 ; FORMAT SHOULD CALL DRV0 IN ORDER TO SELECT A DRIVE
                04935 ; WITH A BLANK TAPE
                04936 ;
                04937 DRVSEL
17F7  E5        04938         PUSH    HL
17F8  FE00      04939         CP      0                               ; STARTING OR STOPPING?
17FA  2006      04940         JR      NZ,DRVS1
17FC  CD2A18    04941         CALL    DRV0                            ; STOPPING...JUST DO IT
17FF  FB        04942         EI
1800  E1        04943         POP     HL
1801  C9        04944         RET
                04945 DRVS1
1802  F3        04946         DI
1803  CD2A18    04947         CALL    DRV0                            ; STARTING...DO IT
1806  218813    04948         LD      HL,5000                         ; THEN WAIT 40MS FOR MOTOR VOLTAGE
                04949 DRVS5
1809  2B        04950         DEC     HL
180A  7C        04951         LD      A,H
180B  B5        04952         OR      L
180C  20FB      04953         JR      NZ,DRVS5
180E  218813    04954         LD      HL,5000                         ; THEN WAIT FOR A SIGNAL
                04955 DRVS4
1811  0606      04956         LD      B,6                             ; AT LEAST THIS LONG
                04957 DRVS2
1813  CDE918    04958         CALL    BREAK?
1816  DBEF      04959         IN      A,(PORTC)
1818  E604      04960         AND     GAP
181A  2004      04961         JR      NZ,DRVS3
181C  10F5      04962         DJNZ    DRVS2                           ; LONG ENOUGH?
181E  E1        04963         POP     HL
181F  C9        04964         RET
                04965 DRVS3
1820  2B        04966         DEC     HL
1821  7C        04967         LD      A,H
1822  B5        04968         OR      L
1823  20EC      04969         JR      NZ,DRVS4                        ; WAITED TOO LONG?
1825  CDF717    04970         CALL    DRVSEL                          ; DRIVE OFF
1828  E7        04971         RST     SH_ERR
1829  10        04972         DEFB    10H                             ; DRIVE NOT PRESENT
                04973 ;
                04974 ;
                04975 DRV0
182A  D5        04976         PUSH    DE
182B  110001    04977         LD      DE,100H                         ; OUTPUTTING E DEACTIVATES THE RS232
                04978                                                 ; OUTPUTTING D DEACTIVES THE NET
182E  ED44      04979         NEG                                     ; COUNTING FROM THIS END
1830  C609      04980         ADD     A,9
1832  4F        04981         LD      C,A
1833  0608      04982         LD      B,8
                04983 DRV1
1835  0D        04984         DEC     C
1836  2013      04985         JR      NZ,DRV2
                04986 
1838  7A        04987         LD      A,D                             ; DEACTIVATE NET
1839  D3F7      04988         OUT     (RS232),A
183B  3EEE      04989         LD      A,SELD.AND.CTS                  ; SELECT THIS DRIVE & NET
183D  D3EF      04990         OUT     (PORTC),A
183F  CD6718    04991         CALL    DELAY
                04992 
1842  3EEC      04993         LD      A,SELD.AND.CTS.AND.SELC         ; CLOCK IT THROUGH
1844  D3EF      04994         OUT     (PORTC),A
1846  CD6718    04995         CALL    DELAY
1849  1811      04996         JR      DRV3
                04997 DRV2
184B  3EEF      04998         LD      A,CTS                           ; NOT THIS DRIVE
184D  D3EF      04999         OUT     (PORTC),A                       ; RS232 SELECTED
184F  7B        05000         LD      A,E
1850  D3F7      05001         OUT     (RS232),A                       ; DEACTIVATE RS232
1852  CD6718    05002         CALL    DELAY
1855  3EED      05003         LD      A,CTS.AND.SELC
1857  D3EF      05004         OUT     (PORTC),A                       ; CLOCK IT THROUGH
1859  CD6718    05005         CALL    DELAY
                05006 DRV3
185C  10D7      05007         DJNZ    DRV1
                05008 
185E  7A        05009         LD      A,D                             ; DEACTIVATE THE NET
185F  D3F7      05010         OUT     (RS232),A
1861  3EEE      05011         LD      A,CTS.AND.SELD                  ; LEAVE NET SELECTED AT END
1863  D3EF      05012         OUT     (PORTC),A
1865  D1        05013         POP     DE
1866  C9        05014         RET
                05015 ;
                05016 ;
                05017 DELAY
1867  C5        05018         PUSH    BC
1868  F5        05019         PUSH    AF
1869  018700    05020         LD      BC,135
186C  CDFA18    05021         CALL    DELBC
186F  F1        05022         POP     AF
1870  C1        05023         POP     BC
1871  C9        05024         RET
                05025 ;
                05026 ;
                05027 ;
                05028 ; WRHBLK                WRITES A HEADER BLOCK FROM (HL)
                05029 ; WRBLK WRITES A DATA BLOCK FROM (HL)
                05030 ; USES ABCDEHL
                05031 ;
                05032 WRHBLK
1872  E5        05033         PUSH    HL
1873  111E00    05034         LD      DE,HD_LEN+3
1876  1804      05035         JR      WR1
                05036 WRBLK
1878  E5        05037         PUSH    HL
1879  111F02    05038         LD      DE,D_LEN+3
                05039 WR1
187C  DBEF      05040         IN      A,(PORTC)
187E  E601      05041         AND     PROTECT                         ; IS THE DRIVE WRITE PROTECTED?
1880  2002      05042         JR      NZ,_WR11
1882  E7        05043         RST     SH_ERR
1883  0E        05044         DEFB    0EH                             ; DRIVE WRITE PROTECTED
                05045 _WR11
1884  3AC65C    05046         LD      A,(DR+IOBORD)
1887  D3FE      05047         OUT     (254),A
                05048 ;
1889  3EE2      05049         LD      A,WRITE.AND.ERASE.AND.CTS.AND.SELD
188B  D3EF      05050         OUT     (PORTC),A
                05051 ;
188D  14        05052         INC     D
188E  7A        05053         LD      A,D
188F  43        05054         LD      B,E
1890  0EE7      05055         LD      C,PORTD
                05056 ;
1892  00        05057         NOP
1893  00        05058         NOP
1894  00        05059         NOP
                05060 ;
                05061 WR2
1895  EDB3      05062         OTIR
1897  3D        05063         DEC     A
1898  20FB      05064         JR      NZ,WR2
                05065 ;
189A  3EE6      05066         LD      A,ERASE.AND.CTS.AND.SELD
189C  D3EF      05067         OUT     (PORTC),A                       ; WRITE CURRENT OFF
                05068 ;
                05069 ;
189E  CDA90C    05070         CALL    B_COL
18A1  E1        05071         POP     HL
18A2  C9        05072         RET
                05073 ;
                05074 ;
                05075 ;
                05076 ; RDHBLK WAITS FOR A GAP AND READS THE NEXT BLOCK AS A HEADER
                05077 ; BLOCK INTO HL
                05078 ; RDBLK DOES THE SAME FOR A DATA BLOCK
                05079 ;
                05080 RDHBLK
18A3  E5        05081         PUSH    HL
18A4  110F00    05082         LD      DE,HD_LEN-PLEN
18A7  1804      05083         JR      RD1
                05084 RDBLK
18A9  E5        05085         PUSH    HL
18AA  111002    05086         LD      DE,D_LEN-PLEN
                05087 RD1
18AD  43        05088         LD      B,E
18AE  4A        05089         LD      C,D
18AF  0C        05090         INC     C
                05091 ;
18B0  C5        05092         PUSH    BC
                05093 RD2
18B1  0608      05094         LD      B,8                             ; WAIT FOR A PERSISTANT GAP
                05095                                                 ; THE PERIOD OF THIS LOOP IS 34US
                05096 RD2_5
18B3  CDE918    05097         CALL    BREAK?
18B6  DBEF      05098         IN      A,(PORTC)
18B8  E604      05099         AND     GAP
18BA  28F5      05100         JR      Z,RD2
18BC  10F5      05101         DJNZ    RD2_5
                05102 RD3
18BE  0606      05103         LD      B,6
                05104 RD3_5
18C0  CDE918    05105         CALL    BREAK?
18C3  DBEF      05106         IN      A,(PORTC)                       ; WAIT FOR A PERSISTANT SIGNAL
18C5  E604      05107         AND     GAP
18C7  20F5      05108         JR      NZ,RD3
18C9  10F5      05109         DJNZ    RD3_5
18CB  C1        05110         POP BC
                05111 ;
18CC  3EEE      05112         LD      A,CTS.AND.SELD                  ; ISSUE READ COMMAND
18CE  D3EF      05113         OUT     (PORTC),A
18D0  E1        05114         POP     HL
18D1  E5        05115         PUSH    HL
                05116 RD4
18D2  DBEF      05117         IN      A,(PORTC)                       ; WAIT FOR SYNC PULSE
18D4  E602      05118         AND     SYNC
18D6  20FA      05119         JR      NZ,RD4
                05120 RD5
18D8  CDE918    05121         CALL    BREAK?                          ; DO SOMETHING SO WE DON'T
                05122                                                 ; READ TOO EARLY
18DB  79        05123         LD      A,C
18DC  0EE7      05124         LD      C,PORTD
                05125 RD6
18DE  EDB2      05126         INIR
18E0  3D        05127         DEC     A
18E1  20FB      05128         JR      NZ,RD6
                05129 ;
18E3  3EEE      05130         LD      A,CTS.AND.SELD
18E5  D3EF      05131         OUT     (PORTC),A
18E7  E1        05132         POP     HL
18E8  C9        05133         RET
                05134 ;
                05135 ;
                05136 ;
                05137 ;*****************************************************
                05138 ;*    UTILITIES                                      *
                05139 ;*****************************************************
                05140 ;
                05141 ;
18E9  3E7F      05142 BREAK?  LD      A,7FH                           ; ROW 7
18EB  DBFE      05143         IN      A,(KB_PT)
18ED  1F        05144         RRA
18EE  D8        05145         RET     C
18EF  3EFE      05146         LD      A,0FEH
18F1  DBFE      05147         IN      A,(KB_PT)
18F3  1F        05148         RRA
18F4  D8        05149         RET     C
18F5  FD360014  05150         LD      (IY+ERR_NR-Y),14H
18F9  EF        05151         RST     ROMERR
                05152 ;
                05153 ;
                05154 DELBC
18FA  F5        05155         PUSH    AF
                05156 DEL1
18FB  0B        05157         DEC     BC
18FC  78        05158         LD      A,B
18FD  B1        05159         OR      C
18FE  20FB      05160         JR      NZ,DEL1
1900  F1        05161         POP     AF
1901  C9        05162         RET
                05163 ;
                05164 ;
                05165 ;
                05166 ; 32 BIT CHECKSUM
                05167 ; IF THE DATA BYTES ARE A,B,C,D,E ETC
                05168 ; THEN THE CHECKSUM IS COMPUTED AS:-
                05169 ; 1024*A + 1023*B + 1022*C + 1021 *D + ETC.
                05170 ;
                05171 ; THIS IS ACHIEVED THIS BY SUMMING THE 512 BYTES AND PROGRESSIVELY
                05172 ; SUMMING THE SUM.
                05173 ; WE THEN HAVE:-
                05174 ; 512*A + 511*B + 510*C + ETC
                05175 ; SO WE MULTIPLY THE SUM BY 512 AND ADD IT TO THE SUM OF SUMS
                05176 ; GIVING THE CHECKSUM.
                05177 ; THIS GIVES COMPLETE PROTECTION AGAINST DOUBLE BIT ERRORS
                05178 ;
                05179 ; HL'HL CONTAINS THE SUM OF SUMS
                05180 ; DE'DE CONTAINS THE SUM
                05181 ; BC CONTAINS THE ADDRESS OF THE DATA
                05182 ; BC' CONTAINS THE BYTE COUNT
                05183 ;
                05184 ECD32
1902  E5        05185         PUSH    HL
1903  DDE5      05186         PUSH    IX
1905  E1        05187         POP     HL
1906  015200    05188         LD      BC,CHDATA
1909  09        05189         ADD     HL,BC
190A  44        05190         LD      B,H
190B  4D        05191         LD      C,L                             ; ADDRESS IN BC
                05192 
190C  210000    05193         LD      HL,0                            ; SS IN HL
190F  110000    05194         LD      DE,0                            ; S IN DE
                05195 
1912  D9        05196         EXX
                05197 
1913  010002    05198         LD      BC,512                          ; BYTE COUNT IN BC
1916  210000    05199         LD      HL,0                            ; SS IN HL
1919  110000    05200         LD      DE,0                            ; S IN DE
                05201 CHK1
191C  D9        05202         EXX
                05203 
                05204 CHK2
191D  0A        05205         LD      A,(BC)
191E  03        05206         INC     BC
                05207 
191F  83        05208         ADD     A,E                             ; ADD BYTE TO SUM
1920  5F        05209         LD      E,A
1921  3006      05210         JR      NC,CHK3
                05211 
1923  14        05212         INC     D
1924  2003      05213         JR      NZ,CHK3
                05214 
1926  D9        05215         EXX
1927  13        05216         INC     DE
1928  D9        05217         EXX
                05218 CHK3
1929  19        05219         ADD     HL,DE                           ; ADD SUM TO SUM OF SUMS
192A  D9        05220         EXX
192B  ED5A      05221         ADC     HL,DE
                05222 
192D  0B        05223         DEC     BC
192E  78        05224         LD      A,B
192F  B1        05225         OR      C
1930  20EA      05226         JR      NZ,CHK1
                05227 
1932  53        05228         LD      D,E                             ; NOW MULTIPLY SUM BY 512
1933  D9        05229         EXX                                     ; *256
1934  7A        05230         LD      A,D
1935  1E00      05231         LD      E,0
1937  CB22      05232         SLA     D                               ; *2
1939  D9        05233         EXX
193A  5F        05234         LD      E,A
193B  CB13      05235         RL      E
193D  CB12      05236         RL      D
                05237 
193F  D9        05238         EXX                                     ; ADD THIS TO SS
                05239 
1940  19        05240         ADD     HL,DE
1941  D9        05241         EXX
1942  ED5A      05242         ADC     HL,DE
1944  E5        05243         PUSH    HL
1945  D9        05244         EXX
                05245 
1946  E5        05246         PUSH    HL                              ; NOW COMPARE WITH AND REPLACE OLD CHECKSUM
1947  C5        05247         PUSH    BC                              ; E ERROR FLAG
1948  E1        05248         POP     HL
1949  C1        05249         POP     BC
194A  1E00      05250         LD      E,0
194C  79        05251         LD      A,C
194D  BE        05252         CP      (HL)
194E  2802      05253         JR      Z,CHK4
1950  1C        05254         INC     E
1951  77        05255         LD      (HL),A
1952  23        05256 CHK4    INC     HL
1953  78        05257         LD      A,B
1954  BE        05258         CP      (HL)
1955  2802      05259         JR      Z,CHK5
1957  1C        05260         INC     E
1958  77        05261         LD      (HL),A
1959  23        05262 CHK5    INC     HL
195A  C1        05263         POP     BC
195B  79        05264         LD      A,C
195C  BE        05265         CP      (HL)
195D  2802      05266         JR      Z,CHK6
195F  1C        05267         INC     E
1960  77        05268         LD      (HL),A
1961  23        05269 CHK6    INC     HL
1962  78        05270         LD      A,B
1963  BE        05271         CP      (HL)
1964  2802      05272         JR      Z,CHK7
1966  1C        05273         INC     E
1967  77        05274         LD      (HL),A
1968  7B        05275 CHK7    LD      A,E
1969  B7        05276         OR      A
196A  E1        05277         POP     HL
196B  C9        05278         RET
                05279 ;
                05280 ;
                05281 ; SCRAM SCRAMBLES (OR UNSCRAMBLES) THE DATA IN THE UDRIVE BUFFER AT IX
                05282 ; IT IS CALLED BEFORE ECD ON WRITING OR AFTER ECD ON READING (IF THE DATA
                05283 ; IS OK).
                05284 ; BY DOING THIS WE HOPE TO BREAK UP RELATIVELY COMMON OFFS IN THE DATA
                05285 ; AND IMPROVE THE RELIABILITY.
                05286 ;
                05287 SCRAM
196C  DDE5      05288         PUSH    IX
196E  E1        05289         POP     HL
196F  115200    05290         LD      DE,CHDATA
1972  19        05291         ADD     HL,DE
1973  010002    05292         LD      BC,512
                05293 SCR
1976  7E        05294         LD      A,(HL)
1977  EE55      05295         XOR     55H
1979  77        05296         LD      (HL),A
197A  23        05297         INC     HL
197B  0B        05298         DEC     BC
197C  78        05299         LD      A,B
197D  B1        05300         OR      C
197E  20F6      05301         JR      NZ,SCR
1980  C9        05302         RET
                05303 ;
                05304         END
                05305 *INCLUDE SH_HOOK.S
                05306 ;
                05307 ;********************************************************************
                05308 ;
                05309 ;               HOOK CODE MODULE        - SH_HOOK.S
                05310 ;
                05311 ;********************************************************************
                05312 
                05313 ;       GLOBAL HOOKS
                05314 
                05315 ;       EXTERNAL RETBAS
                05316 ;       EXTERNAL ACT_FT,ACT_OT,IN_BYP,OUT_T,OUT_T2,IN_BYT
                05317 ;       EXTERNAL OUT_N,OUTNET,GETPAK,ACT_ON,NOPEN,INPAK,RSPOND,OUTPAK
                05318 ;       EXTERNAL   NTEMP,ONET0,NTCLSE,INSCT,BCOL
                05319 ;       EXTERNAL        DRVSEL,OPENF,CLOSIX,READN,DELIX,WRREC
                05320 ;       EXTERNAL        ERA
                05321 ;       EXTERNAL        WTHDR,DECSEC,ECH,ECD,RDBLK,DELBC,WRBLK,FREE?
                05322 
                05323 ;______________________________________________________________
                05324 
                05325 HOOKS           ; DEAL WITH THE HOOK CODES
                05326                 ; HL POINTS TO THE 'DEFB'
                05327                 ; THE ORIGINAL AF IS ON THE STACK
                05328                 ; 'A' HOLDS THE HOOK CODE
                05329 
1981  FE18      05330         CP      H_LEN/2                         ; NUMBER OF HOOK ADDRESSES IN THE TABLE
1983  3802      05331         JR      C,HOOK1
                05332 
1985  E7        05333         RST     SH_ERR
1986  12        05334         DEFB    12H                             ; 'HOOK CODE ERROR'
                05335 
1987  FD3600FF  05336 HOOK1   LD      (IY+ERR_NR-Y),0FFH              ; SIGNAL NO ERROR AFTER ALL
198B  FDCB01D6  05337         SET     2,(IY+FLAGS-Y)                  ; IN CASE THERE IS AN ERROR
                05338                                                 ; SO WE KNOW WHO TO RETURN-TO
198F  23        05339         INC     HL                              ; FORM THE RETURN ADDRESS
1990  E3        05340         EX      (SP),HL
1991  E5        05341         PUSH    HL                              ; PUT IT ON THE STACK ABOVE THE 'AF'
1992  87        05342         ADD     A,A                             ; DOUBLE THE HOOK CODE
1993  1600      05343         LD      D,00H
1995  5F        05344         LD      E,A                             ; 'DE' NOW HOLDS TABLE OFFSET
1996  21A919    05345         LD      HL,H_BASE                       ; HOOK TABLE BASE ADDRESS
1999  19        05346         ADD     HL,DE                           ; INDEX INTO TABLE
199A  5E        05347         LD      E,(HL)                          ; FETCH LOW BYTE
199B  23        05348         INC     HL
199C  56        05349         LD      D,(HL)                          ; FETCH HIGH BYTE
199D  F1        05350         POP     AF                              ; FETCH ORIGINAL 'AF'
199E  210007    05351         LD      HL,RETBAS                       ; THE RETURN ADDRESS IS VIA RETBAS AS USUAL
19A1  E5        05352         PUSH    HL
19A2  EB        05353         EX      DE,HL                           ; JUMP ADDRESS TO HL
19A3  E9        05354         JP      (HL)                            ; NOW JUMP TO IT
                05355                                                 ; RETURNING TO RETBAS AND HENCE TO CONTINUATION ADDRESS
                05356 ;______________________________________________________________________
19A4  2AED5C    05357 H_CALL  LD      HL,(DR+ROMADD)                  ; FETCH THE 'PASSED' ADDRESS
19A7  E9        05358         JP (HL)
                05359 ;________________________________________________________________
19A8  C9        05360 H_RET   RET                                     ; WILL EFFECT THE INSERTION OF THE SHADOW S. V.
                05361 
                05362 ;________________________________________________________________
                05363 
                05364 H_BASE
19A9  D919      05365         DEFW    CONIN                           ; CODE 27 CONSOLE INPUT
19AB  EC19      05366         DEFW    CONOUT                          ; CODE 28 CONSOLE OUTPUT
19AD  810B      05367         DEFW    IN_BYP                          ; CODE 29 RS232 INPUT
19AF  5A0C      05368         DEFW    OUT_T2                          ; CODE 30 RS232 OUTPUT
19B1  FC19      05369         DEFW    ZXOUT                           ; CODE 31 ZX PRINTER OUTPUT
19B3  011A      05370         DEFW    DIRECT                          ; CODE 32 TEST KEYBOARD
19B5  F717      05371         DEFW    DRVSEL                          ; CODE 33 DRIVE SELECT
19B7  291B      05372         DEFW    OPENF                           ; CODE 34 OPEN A FILE
19B9  B112      05373         DEFW    CLOSIX                          ; CODE 35 CLOSE A FILE
19BB  6E1D      05374         DEFW    ERA                             ; CODE 36 DELETE A FILE
19BD  091A      05375         DEFW    READSQ                          ; CODE 37 READ SEQUENTIAL
19BF  0112      05376         DEFW    WRREC                           ; CODE 38 WRITE RECORD
19C1  171A      05377         DEFW    READRN                          ; CODE 39 READ RANDOM
19C3  4B1A      05378         DEFW    READSC                          ; CODE 40 READ SECTOR
19C5  861A      05379         DEFW    READNX                          ; CODE 41 READ NEXT SECTOR
19C7  911A      05380         DEFW    WRSC                            ; CODE 42 WRITE SECTOR
19C9  291B      05381         DEFW    OPENF                           ; CODE 43 CREATE MICRODRIVE BUFFER ***
19CB  C610      05382         DEFW    DELIX                           ; CODE 44 DELETE MICRODRIVE BUFFER
19CD  A90E      05383         DEFW    NTEMP                           ; CODE 45 OPEN A NETWORK CHANNEL
19CF  241A      05384         DEFW    N_CLOS                          ; CODE 46 CLOSE A NETWORK CHANNEL
19D1  311A      05385         DEFW    GE_PAK                          ; CODE 47 GET NETWORK PACKET
19D3  B20D      05386         DEFW    ONET0                           ; CODE 48 SEND A NETWORK PACKET
19D5  A819      05387         DEFW    H_RET                           ; CODE 49 CREATE SYSTEM VARIABLES
19D7  A419      05388         DEFW    H_CALL                          ; CALL A DESIGNATED SUBROUTINE
                05389 H_LEN   EQU     $-H_BASE
                05390 
                05391 ;__________________________________________________________________
                05392 CONIN                                           ; KEYBOARD INPUT ROUTINE
19D9  FB        05393         EI
19DA  FDCB01AE  05394         RES     5,(IY+FLAGS-Y)
                05395 _IN1                                            ; *
19DE  76        05396         HALT
19DF            05397         OLDCAL  02BFH                           ; KEYBOARD SCAN
19E2  FDCB016E  05401         BIT     5,(IY+FLAGS-Y)
19E6  28F6      05402         JR      Z,_IN1                          ; *
                05403 
19E8  3A085C    05404         LD      A,(LAST_K)
19EB  C9        05405         RET
                05406 
                05407 CONOUT
19EC  F5        05408         PUSH    AF
19ED  3EFE      05409         LD      A,0FEH                          ; PERMANENT STREAM
                05410 _OUT1                                           ; *
19EF  218C5C    05411         LD      HL,SCRCT                        ; RESET SCROLL COUNT
19F2  36FF      05412         LD      (HL),0FFH
19F4            05413         OLDCAL  SELECT
19F7  F1        05417         POP     AF
19F8            05418         OLDCAL  10H
19FB  C9        05422         RET
                05423 
                05424 ZXOUT
19FC  F5        05425         PUSH    AF
19FD  3E03      05426         LD      A,3
19FF  18EE      05427         JR      _OUT1                           ; *
                05428 
                05429 DIRECT
1A01  AF        05430         XOR     A
1A02  DBFE      05431         IN      A,(0FEH)
1A04  E61F      05432         AND     1FH
1A06  D61F      05433         SUB     1FH                             ; CARRY SET IF <> 1FH
1A08  C9        05434         RET
                05435 
                05436 READSQ
1A09  DDCB434E  05437         BIT     1,(IX+RECFLG)                   ; EOF?
1A0D  2805      05438         JR      Z,_RD1
                05439 
1A0F  FD360007  05440         LD      (IY+ERR_NR-Y),7                 ; ERROR RETURN
1A13  EF        05441         RST     ROMERR
                05442 _RD1                                            ; *
1A14  DD340D    05443         INC     (IX+CHREC)                      ; NEXT RECORD
                05444 READRN
1A17  CD7911    05445         CALL    READN                           ; READ RANDOM
                05446 _RD3                                            ; *
1A1A  DDCB4356  05447         BIT     2,(IX+RECFLG)                   ; SLVM FILE?
1A1E  C8        05448         RET     Z                               ; NO...OK
                05449 
1A1F  CDC610    05450         CALL    DELIX                           ; YES...REMOVE EVIDENCE
                05451 
1A22  E7        05452         RST     SH_ERR                          ; WRONG FILE TYPE
1A23  16        05453         DEFB    16H
                05454 
                05455 N_CLOS
1A24  CDF50E    05456         CALL    NTCLSE                          ; SEND ANY REMAINING DATA
1A27  DDE5      05457         PUSH    IX
1A29  E1        05458         POP     HL
1A2A  011401    05459         LD      BC,N_LEN
1A2D  D7        05460         RST     CALBAS
1A2E  E819      05461         DEFW    DELREC                          ; AND DELETE THE BUFFER
1A30  C9        05462         RET
                05463 
                05464 GE_PAK
1A31  3AC65C    05465         LD      A,(DR+IOBORD)
1A34  D3FE      05466         OUT     (0FEH),A                        ; SET THE BORDER COLOUR
1A36  F3        05467         DI
1A37  CD1E0F    05468         CALL    INSCT
1A3A  300A      05469         JR      NC,GE_ERR                       ; EXIT ON TIMEOUT
1A3C  CD180E    05470         CALL    GETPAK
1A3F  2005      05471         JR      NZ,GE_ERR                       ; OR ANY OTHER PROBLEM
1A41  FB        05472         EI
1A42  A7        05473         AND     A
1A43  C3A90C    05474         JP      B_COL
                05475 GE_ERR
1A46  37        05476         SCF
1A47  FB        05477         EI
1A48  C3A90C    05478         JP      B_COL
                05479 
                05480 
                05481 READSC
1A4B  21FF00    05482         LD      HL,HD_MAX
1A4E  22C95C    05483         LD      (SECTOR),HL
                05484 RDSC1
1A51  CDCC12    05485         CALL    WTHDR                           ; GET A SECTOR HEADER
1A54  DD7E29    05486         LD      A,(IX+HDNUMB)
1A57  DDBE0D    05487         CP      (IX+CHREC)                      ; IS IT THE RIGHT ONE
                05488 
1A5A  2807      05489         JR      Z,RDSC2
                05490 
1A5C  CD1A13    05491         CALL    DECSEC
1A5F  20F0      05492         JR      NZ,RDSC1
1A61  E7        05493         RST     SH_ERR                          ; FILE NOT FOUND
1A62  11        05494         DEFB    11H
                05495 
                05496 RDSC2
1A63  DDE5      05497         PUSH    IX
1A65  E1        05498         POP     HL
1A66  114300    05499         LD      DE,CHDES+PLEN
1A69  19        05500         ADD     HL,DE
                05501 
1A6A  CDA918    05502         CALL    RDBLK                           ; READ THE BLOCK
1A6D  CD4913    05503         CALL    ECH
1A70  200F      05504         JR      NZ,RDSC3                        ; CHECK THE DESCRIPTOR
                05505 
1A72  110F00    05506         LD      DE,CHDATA-CHDES-PLEN
1A75  19        05507         ADD     HL,DE
1A76  CD4E13    05508         CALL    ECD                             ; AND THEN THE DATA
1A79  2006      05509         JR      NZ,RDSC3
                05510 
1A7B  B7        05511         OR      A                               ; CLEAR THE CARRY FLAG
1A7C  DDCB4356  05512         BIT     2,(IX+RECFLG)                   ; IS IT SLVM
1A80  C8        05513         RET     Z                               ; NO JUST RETURN
                05514 
                05515 RDSC3
1A81  CDE01A    05516         CALL    VOID                            ; HERE IF BUFFER ERRONEOUS OR SLVM
1A84  37        05517         SCF
1A85  C9        05518         RET
                05519 
                05520 READNX
1A86  21FF00    05521         LD      HL,HD_MAX
1A89  22C95C    05522         LD      (SECTOR),HL
                05523 _RDNX1                                          ; *
1A8C  CDCC12    05524         CALL    WTHDR                           ; WAIT FOR A HEADER
1A8F  18D2      05525         JR      RDSC2                           ; USE THE FIRST FOUND
                05526 
1A91  21FF00    05527 WRSC    LD      HL,HD_MAX
1A94  22C95C    05528         LD      (SECTOR),HL
1A97  DDE5      05529         PUSH    IX
1A99  E1        05530         POP     HL
1A9A  113700    05531         LD      DE,CHDES
1A9D  19        05532         ADD     HL,DE
1A9E  E5        05533         PUSH    HL
1A9F  110C00    05534         LD      DE,PLEN
1AA2  19        05535         ADD     HL,DE
1AA3  CD4913    05536         CALL    ECH                             ; ERROR ENCODE THE DESCRIPTOR
1AA6  110F00    05537         LD      DE,CHDATA-CHDES-PLEN
1AA9  19        05538         ADD     HL,DE
1AAA  CD4E13    05539         CALL    ECD                             ; AND THE DATA
                05540 WRSC1
1AAD  CDCC12    05541         CALL    WTHDR                           ; WAIT FOR A HEADER
1AB0  DD7E29    05542         LD      A,(IX+HDNUMB)
1AB3  DDBE0D    05543         CP      (IX+CHREC)                      ; IS IT THE RIGHT ONE
1AB6  2807      05544         JR      Z,WRSC2
                05545 
1AB8  CD1A13    05546         CALL    DECSEC
1ABB  20F0      05547         JR      NZ,WRSC1
                05548 
1ABD  E7        05549         RST     SH_ERR                          ; FILE NOT FOUND
1ABE  11        05550         DEFB    11H
                05551 WRSC2
1ABF  DBEF      05552         IN      A,(PORTC)                       ; IS THE DRIVE WRITE PROTECTED
1AC1  E601      05553         AND     PROTECT
1AC3  2002      05554         JR      NZ,WRSC3
                05555 
1AC5  E7        05556         RST     SH_ERR                          ; DRIVE WRITE PROTECTED
1AC6  0E        05557         DEFB    0EH
                05558 
                05559 WRSC3
1AC7  3EE6      05560         LD      A,ERASE.AND.CTS.AND.SELD        ; ERASE ON
1AC9  D3EF      05561         OUT     (PORTC),A
1ACB  016801    05562         LD      BC,GAPT3
1ACE  CDFA18    05563         CALL    DELBC
                05564 
1AD1  E1        05565         POP     HL                              ; WRITE DATA
1AD2  CD7818    05566         CALL    WRBLK
                05567 
1AD5  3EEE      05568         LD      A,CTS.AND.SELD
1AD7  D3EF      05569         OUT     (PORTC),A                       ; ERASE OFF
                05570 
1AD9  CDE712    05571         CALL    FREE?                           ; FIND POSITION ON THE MAP
                05572 
1ADC  78        05573         LD      A,B
1ADD  B6        05574         OR      (HL)
1ADE  77        05575         LD      (HL),A
1ADF  C9        05576         RET                                     ; MARK MAP AND RETURN
                05577 
                05578 VOID
1AE0  DDE5      05579         PUSH    IX                              ; COPIES THE FIRST BYTE OF A BUFFER
1AE2  E1        05580         POP     HL                              ; INTO THE REST
1AE3  115200    05581         LD      DE,CHDATA
1AE6  19        05582         ADD     HL,DE
1AE7  54        05583         LD      D,H
1AE8  5D        05584         LD      E,L
1AE9  13        05585         INC     DE
1AEA  01FF01    05586         LD      BC,511
1AED  EDB0      05587         LDIR
1AEF  C9        05588         RET
                05589 
                05590 ;??????UNFINISHED
                05591 *INCLUDE VHSOFT.S
                05592 ;*********************************************
                05593 ;*                                           *
                05594 ;*    VHSOFT.S                               *
                05595 ;*    23/3/83                                *
                05596 ;*                                           *
                05597 ;*********************************************
                05598 ;
                05599 ; THIS MODULE WILL CONTAIN HIGHER LEVEL SOFTWARE FOR THE
                05600 ; MICRODRIVE.
                05601 ; THE PROCEDURES WITHIN THIS MODULE RELATE TO KEYWORDS
                05602 ; ON THE SPECTRUM.
                05603 ;
                05604 ;       GLOBAL          OPENN,OPENF,FORMAT,CATN
                05605 ;       GLOBAL          ERA,MANY?
                05606 ;
                05607 ;       EXTERNAL        CREATE,DELIX,NERROR,FREE?,CPSTR                 ;HISOFT
                05608 ;       EXTERNAL        DECSEC,READN,RDNXT,WTHDR,LIST?
                05609 ;       EXTERNAL        MWRCH,MRDCH,DECSEC,SPACE?
                05610 ;       EXTERNAL        ECH,ECD,WRFREE,MARK,READNC
                05611 ;       EXTERNAL        RDHBLK,RDBLK,WRHBLK,WRBLK               ;DRIVES
                05612 ;       EXTERNAL        DRVSEL,BREAK?,DRV0
                05613 ;       EXTERNAL        HEX,OP,DIS10,OPHEX,DISMAP               ;BLOCKS
                05614 ;       EXTERNAL        DELBC                                   ;DUMMY
                05615 ;
                05616 ;
                05617 ;*******************************************
                05618 ;*   OPENN,OPENF                           *
                05619 ;*******************************************
                05620 ;
                05621 ; THE OPEN SUBROUTINE IS USED TO SEARCH A DRIVE FOR A FILE
                05622 ; MAPPING THE FREE SECTORS IN CASE THE FILE DOESN'T ALREADY
                05623 ; EXIST AND READING THE FIRST RECORD IF THE FILE DOES EXIST
                05624 ;
                05625 ; OPENN IS CALLED BY THE SYNTAX CHECKER WHEN THE COMMAND
                05626 ; OPEN #N,FILENAME IS FOUND.
                05627 ; THE STREAM AND FILENAME ARE STORED IN SYSTEM VARIABLES BY
                05628 ; THE SYNTAX CHECKER
                05629 ;
                05630 ; OPENF OPENS A MICRODRIVE FILE IN THE SAME WAY WITHOUT
                05631 ; USING A STREAM THIS IS FOR USE BY THE MOVE, SAVE AND
                05632 ; LOAD COMMANDS
                05633 ;
                05634 OPENN
1AF0  3AD85C    05635         LD      A,(DR+S_STR1)
1AF3  87        05636         ADD     A,A                             ; GET CHANNEL ADDRESS
1AF4  21165C    05637         LD      HL,STRMS+6
1AF7  5F        05638         LD      E,A
1AF8  1600      05639         LD      D,0
1AFA  19        05640         ADD     HL,DE
1AFB  E5        05641         PUSH    HL
                05642 ;
1AFC  CD291B    05643         CALL    OPENF                           ; THEN OPEN FILE
                05644 
1AFF  DDCB1846  05645         BIT     WRFLG,(IX+CHFLAG)               ; IS IT OPEN FOR WRITE?
1B03  2808      05646         JR      Z,OPEN2
1B05  DBEF      05647         IN      A,(PORTC)                       ; YES..CHECK WRITE PROTECT
1B07  E601      05648         AND     PROTECT
1B09  2002      05649         JR      NZ,OPEN2
1B0B  E7        05650         RST     SH_ERR
1B0C  0E        05651         DEFB    0EH
                05652 OPEN2
1B0D  DDCB04BE  05653         RES     7,(IX+CHTYPE)                   ; NOT A TEMPORARY BUFFER ANYMORE
1B11  AF        05654         XOR     A
1B12  CDF717    05655         CALL    DRVSEL
                05656 ;
1B15  DDCB1846  05657         BIT     WRFLG,(IX+CHFLAG)
1B19  2008      05658         JR      NZ,OPEN1
1B1B  DDCB4356  05659         BIT     2,(IX+RECFLG)                   ; IS IT AN SLVM FILE
1B1F  2802      05660         JR      Z,OPEN1
1B21  E7        05661         RST     SH_ERR                          ; YES...WRONG FILE TYPE
1B22  16        05662         DEFB    16H
                05663 OPEN1
                05664 ;
1B23  EB        05665         EX      DE,HL                           ; *
1B24  E1        05666         POP     HL                              ; AND CONNECT NEW CHANNEL NUMBER
1B25  73        05667         LD      (HL),E
1B26  23        05668         INC     HL
1B27  72        05669         LD      (HL),D                          ; INTO STREAMS
                05670 ;
1B28  C9        05671         RET
                05672 ;
                05673 ;
                05674 ;
                05675 OPENF
1B29  CDE80F    05676         CALL    CREATE                          ; CREATE A CHANNEL AND INITIALIZE
1B2C  E5        05677         PUSH    HL                              ; SAVE CHANNEL NUMBER FOR RETURN
                05678 ;
1B2D  DD7E19    05679         LD      A,(IX+CHDRIV)                   ; START MOTOR
1B30  CDF717    05680         CALL    DRVSEL
                05681 ;
1B33  01FF00    05682         LD      BC,HD_MAX                       ; FOR ALL SECTORS ON THE DRIVE MAP
1B36  ED43C95C  05683         LD      (SECTOR),BC                     ; THE FREE SECTORS AND LOOK FOR THE
                05684                                                 ; THE SPECIFIED FILE
                05685 ;
                05686 OPF1
1B3A  CDA711    05687         CALL    RDNXT                           ; READ THE NEXT DATA BLOCK
                05688 ;
1B3D  3820      05689         JR      C,OPF2                          ; NEXT SECTOR IF NO GOOD
1B3F  281B      05690         JR      Z,OPF3                          ; MARK MAP IF EMPTY
                05691 ;
1B41  DDCB1886  05692         RES     WRFLG,(IX+CHFLAG)               ; FILE FOUND...READ FILE
                05693 ;
1B45  DD7E44    05694         LD      A,(IX+RECNUM)                   ; CHECK NUMBER
1B48  B7        05695         OR      A                               ; ZEROETH RECORD?
1B49  200C      05696         JR      NZ,OPF4
1B4B  DDE5      05697         PUSH    IX                              ; YES...CHECK DATA AND RETURN
1B4D  E1        05698         POP     HL
1B4E  115200    05699         LD      DE,CHDATA
1B51  19        05700         ADD     HL,DE
1B52  CD4E13    05701         CALL    ECD
1B55  2815      05702         JR      Z,OPF5
                05703 OPF4
1B57  CD7F11    05704         CALL    READNC                          ; NO...THEN FIND IT
1B5A  1810      05705         JR      OPF5
                05706 OPF3
1B5C  CD0613    05707         CALL    MARK                            ; MARK MAP FREE IF EMPTY RECORD
                05708 OPF2
1B5F  CD1A13    05709         CALL    DECSEC                          ; NEXT SECTOR
1B62  20D6      05710         JR      NZ,OPF1
                05711 ;
1B64  DDCB438E  05712         RES     1,(IX+RECFLG)                   ; CLEAR EOF FLAG FOR WRITE FILE
1B68  DDCB4396  05713         RES     2,(IX+RECFLG)                   ; NOT SLVM FILE AS DEFAULT
                05714 OPF5
1B6C  E1        05715         POP     HL
1B6D  C9        05716         RET
                05717 ;
                05718 ;
                05719 ;***********************************************
                05720 ;*    FORMAT                                   *
                05721 ;***********************************************
                05722 ;
                05723 ;
                05724 ; THIS PROCEDURE IS CALLED IN RESPONSE TO THE COMMAND
                05725 ; FORMAT FILENAME
                05726 ; THE FILENAME IS SPECIFIED IN SYSTEM VARIABLES
                05727 ; THE PROCEDURE HAS THREE PHASES:-
                05728 ;        1) WRITE THE TAPE   .
                05729 ;        2) READ THE TAPE MAPING ERRONEOUS DATA
                05730 ;        3) RE-WRITE THE GOOD BLOCKS TO ENABLE THEIR USE
                05731 ;
                05732 FORMAT
1B6E  CDE80F    05733         CALL    CREATE                          ; CREATE ALL THE NECESSARY DATA
                05734 ;
1B71  DD7E19    05735         LD      A,(IX+CHDRIV)                   ; SELECT THE DRIVE
1B74  CD2A18    05736         CALL    DRV0
1B77  01C832    05737         LD      BC,13000                        ; WAIT FOR MOTOR TO START UP
1B7A  CDFA18    05738         CALL    DELBC
1B7D  F3        05739         DI
                05740 ;
1B7E  DBEF      05741         IN      A,(PORTC)
1B80  E601      05742         AND     PROTECT                         ;IS THE DRIVE WRITE PROTECTED?
1B82  2002      05743         JR      NZ,__WR11                       ; *
1B84  E7        05744         RST     SH_ERR
1B85  0E        05745         DEFB    0EH                             ; DRIVE WRITE PROTECTED
                05746 __WR11                                          ; *
1B86  3EE6      05747         LD      A,ERASE.AND.CTS.AND.SELD        ; ERASE ON
1B88  D3EF      05748         OUT     (PORTC),A
                05749 ;
1B8A  01FF00    05750         LD      BC,HD_MAX                       ; FOR EVERY HEADER STARTING FROM MAX
1B8D  ED43C95C  05751         LD      (SECTOR),BC
                05752 ;
1B91  DDE5      05753         PUSH    IX
1B93  E1        05754         POP     HL                              ; COPY NAME INTO HEADER
1B94  112C00    05755         LD      DE,HDNAME
1B97  19        05756         ADD     HL,DE
                05757 ;
1B98  EB        05758         EX      DE,HL                           ; *
1B99  21E2FF    05759         LD      HL,CHNAME-HDNAME
1B9C  19        05760         ADD     HL,DE
1B9D  010A00    05761         LD      BC,10
1BA0  EDB0      05762         LDIR
                05763 ;
1BA2  AF        05764         XOR     A                               ; MAKE THE FIRST CHARACTER IN THE NAME
1BA3  DD7747    05765         LD      (IX+RECNAM),A                   ; A NULL TO PREVENT LISTING BY CAT
1BA6  DDCB28C6  05766         SET     0,(IX+HDFLAG)                   ; MARK THE HEADER AS A HEADER
1BAA  DDCB4386  05767         RES     0,(IX+RECFLG)                   ; MARK THE HEADER CORRESPONDINGLY
1BAE  DDCB43CE  05768         SET     1,(IX+RECFLG)                   ; MARK THE DATA EOF IE FULL
                05769 ;
1BB2  DDE5      05770         PUSH    IX
1BB4  E1        05771         POP     HL
1BB5  115200    05772         LD      DE,CHDATA
1BB8  19        05773         ADD     HL,DE
                05774 ;
1BB9  0600      05775         LD      B,0                             ; FILL THE DATA WITH THE BYTE MOST
1BBB  3EFC      05776         LD      A,0FCH                          ; PRONE TO ERROR IN ORDER THAT BAD
                05777                                                 ; BLOCKS ARE MOST LIKELY TO BE DETECTED
                05778 FORM10  
1BBD  77        05779         LD      (HL),A
1BBE  23        05780         INC     HL
1BBF  10FC      05781         DJNZ    FORM10
                05782 FORM11
1BC1  77        05783         LD      (HL),A
1BC2  23        05784         INC     HL
1BC3  10FC      05785         DJNZ    FORM11
                05786 ;
1BC5  DDE5      05787         PUSH    IX                              ; ERROR ENCODE THE DESCRIPTOR
1BC7  D1        05788         POP     DE
1BC8  214300    05789         LD      HL,CHDES+PLEN
1BCB  19        05790         ADD     HL,DE
                05791 ;
1BCC  CD4913    05792         CALL    ECH
                05793 ;
1BCF  110F00    05794         LD      DE,CHDATA-CHDES-PLEN
1BD2  19        05795         ADD     HL,DE
                05796 ;
1BD3  CD4E13    05797         CALL    ECD                             ; AND THE DATA
                05798 ;
                05799 ;*******************************************************
                05800 ;* WRITE TO ALL OF TAPE                                *
                05801 ;*******************************************************
                05802 ;
                05803 FORM1
1BD6  CD1A13    05804         CALL    DECSEC                          ; NEXT SECTOR
1BD9  282F      05805         JR      Z,FORM4
                05806 ;
1BDB  DD7129    05807         LD      (IX+HDNUMB),C                   ; UPDATE HEADER NUMBER
                05808 ;
1BDE  DDE5      05809         PUSH    IX
1BE0  E1        05810         POP     HL
1BE1  112800    05811         LD      DE,CHHDR+PLEN
1BE4  19        05812         ADD     HL,DE
                05813 ;
1BE5  CD4913    05814         CALL    ECH                             ; AND ENCODE
                05815 ;
1BE8  11F4FF    05816         LD      DE,-PLEN
1BEB  19        05817         ADD     HL,DE
                05818 ;
1BEC  CD7218    05819         CALL    WRHBLK                          ; WRITE THE HEADER BLOCK
                05820 ;
1BEF  01B201    05821         LD      BC,GAPT1                        ; WAIT FOR THE REMAINDER OF
1BF2  CDFA18    05822         CALL    DELBC
                05823 ;
1BF5  DDE5      05824         PUSH    IX
1BF7  E1        05825         POP     HL
1BF8  113700    05826         LD      DE,CHDES
1BFB  19        05827         ADD     HL,DE
                05828 ;
1BFC  CD7818    05829         CALL    WRBLK                           ; WRITE THE DATA BLOCK
                05830 ;
1BFF  013F03    05831         LD      BC,GAPT2                        ; WAIT FOR THE REMAINDER OF
1C02  CDFA18    05832         CALL    DELBC
1C05  CDE918    05833         CALL    BREAK?
1C08  18CC      05834         JR      FORM1                           ; NEXT SECTOR
                05835 ;
                05836 FORM4
1C0A  3EEE      05837         LD      A,CTS.AND.SELD                  ; ERASE OFF
1C0C  D3EF      05838         OUT     (PORTC),A
                05839 ;
                05840 ;*****************************************************
                05841 ;* NOW READ BACK ALL BLOCKS AND MARK MAP             *
                05842 ;*****************************************************
                05843 ;
1C0E  DD7E19    05844         LD      A,(IX+CHDRIV)                   ; RESELECT THE DRIVE TO MAKE SURE
1C11  CDF717    05845         CALL    DRVSEL                          ; THERE WAS SOMETHING IN IT
                05846 ;
1C14  01FF00    05847         LD      BC,HD_MAX                       ; FOR ALL HEADERS CHECK WHICH DATA BLOCKS
1C17  ED43C95C  05848         LD      (SECTOR),BC                     ; CAN BE READ FIRST TIME AND MARK THEM FREE
                05849 ;
                05850 FORM5
1C1B  CDCC12    05851         CALL    WTHDR                           ; READ HEADER
                05852 ;
1C1E  CDE712    05853         CALL    FREE?                           ; IS IT ALREADY MARKED FREEIGNORE THE DATA
1C21  281B      05854         JR      Z,FORM6                         ; AND WAIT FOR THE NEXT SECTOR
                05855 ;
1C23  DDE5      05856         PUSH    IX                              ; READ DATA
1C25  E1        05857         POP     HL
1C26  114300    05858         LD      DE,CHDES+PLEN
1C29  19        05859         ADD     HL,DE
                05860 ;
1C2A  CDA918    05861         CALL    RDBLK
1C2D  CD4913    05862         CALL    ECH                             ; IS IT OK?
1C30  200C      05863         JR      NZ,FORM6
                05864 ;
1C32  110F00    05865         LD      DE,CHDATA-CHDES-PLEN
1C35  19        05866         ADD     HL,DE
1C36  CD4E13    05867         CALL    ECD
1C39  2003      05868         JR      NZ,FORM6
                05869 ;
1C3B  CD0613    05870         CALL    MARK                            ; MARK SECTOR FREE
                05871 ;
                05872 FORM6
1C3E  CD1A13    05873         CALL    DECSEC                          ; LAST BLOCK?
1C41  20D8      05874         JR      NZ,FORM5
                05875 ;
1C43  CD3E1E    05876         CALL    BUILD                           ; BUILD AN EMPTY DESCRIPTOR
                05877 ;
                05878 FORM7
1C46  CD6C12    05879         CALL    SPACE?                          ; ARE THERE ANY FREE BLOCKS TO BE
1C49  2008      05880         JR      NZ,FORM8                        ; MARKED
                05881 ;
1C4B  AF        05882         XOR     A
1C4C  CDF717    05883         CALL    DRVSEL                          ; DRIVE OFF
                05884 ;
1C4F  CDC610    05885         CALL    DELIX                           ; DELETE CHANNEL INFO
                05886 ;
1C52  C9        05887         RET
                05888 ;
                05889 FORM8
1C53  CD7D12    05890         CALL    WRFREE                          ; WRITE THE DATA BLOCK INTO A
1C56  18EE      05891         JR      FORM7                           ; SECTOR MARKED FREE
                05892 ;
                05893 ;*********************************************
                05894 ;*    CAT                                    *
                05895 ;*********************************************
                05896 
                05897 ; THIS COMMAND HAS TWO FORMS CAT #N,STRING AND CAT STRING
                05898 ; CAT IMPOSES A LIMIT OF 50 FILES PER DRIVE BECAUSE ONLY
                05899 ; 51.2 FILENAMES CAN BE STORED IN A BUFFER
                05900 ; THE NUMBER OF ENTRIES IN THE LIST IS STORED IN CHREC WHICH
                05901 ; IS INITIALIZED BY CREATE
                05902 ;
                05903 CATN
1C58  3AD85C    05904         LD      A,(DR+S_STR1)                   ; FIND THE STREAM NUMBER
1C5B            05905         OLDCAL  SELECT                          ; YES..SELECT THIS STREAM
                05909 ;
1C5E  CDE80F    05910         CALL    CREATE                          ; HERE WITH THE DRIVE NAME
                05911 ;
1C61  DD7E19    05912         LD      A,(IX+CHDRIV)                   ; START MOTOR
1C64  CDF717    05913         CALL    DRVSEL
                05914 ;
1C67  01FF00    05915         LD      BC,HD_MAX
1C6A  ED43C95C  05916         LD      (SECTOR),BC                     ; FOR ALL HEADER READ THE DESCRIPTORS
                05917                                                 ; CHECK FOR NAME IN DIRECTORY AND ENTER
                05918                                                 ; IF NECESSARY
                05919 CATF1
1C6E  CDCC12    05920         CALL    WTHDR                           ; WAIT FOR HEADER
                05921 ;
1C71  CD531E    05922         CALL    RDDES                           ; READ DESCRIPTOR
1C74  20F8      05923         JR      NZ,CATF1                        ; IGNORE IF NO GOOD
                05924 ;
1C76  DD7E43    05925         LD      A,(IX+RECFLG)                   ; IS IT FREE IE NOT FULL OR EOF
1C79  DDB646    05926         OR      (IX+RECLEN+1)
1C7C  E602      05927         AND     2
1C7E  2005      05928         JR      NZ,CATF2
                05929 ;
1C80  CD0613    05930         CALL    MARK                            ; YES...MARK MAP..NEXT HEADER
1C83  1869      05931         JR      CATF5
                05932 ;
                05933 CATF2
1C85  DD7E47    05934         LD      A,(IX+RECNAM)
1C88  B7        05935         OR      A                               ; LOOK AT THE FIRST CHARACTER IN NAME
1C89  2863      05936         JR      Z,CATF5                         ; IGNORE IF NULL
                05937 ;
1C8B  DDE5      05938         PUSH    IX                              ; ADD TO LIST
1C8D  E1        05939         POP     HL
1C8E  115200    05940         LD      DE,CHDATA
1C91  19        05941         ADD     HL,DE
1C92  110A00    05942         LD      DE,10
1C95  0600      05943         LD      B,0
1C97  DD4E0D    05944         LD      C,(IX+CHREC)
                05945 ;
                05946 CATF3
1C9A  79        05947         LD      A,C                             ; END OF LIST?
1C9B  B7        05948         OR      A
1C9C  2836      05949         JR      Z,CATF4                         ; YES...PUT THE NAME ON THE END
                05950 ;
1C9E  E5        05951         PUSH    HL                              ; COMPARE WITH THE CURRENT NAME
1C9F  DDE5      05952         PUSH    IX
1CA1  C5        05953         PUSH    BC
1CA2  060A      05954         LD      B,10
                05955 CATF12
1CA4  7E        05956         LD      A,(HL)
1CA5  DDBE47    05957         CP      (IX+RECNAM)
1CA8  2005      05958         JR      NZ,CATF13
1CAA  23        05959         INC     HL
1CAB  DD23      05960         INC     IX
1CAD  10F5      05961         DJNZ    CATF12
                05962 CATF13
1CAF  C1        05963         POP     BC
1CB0  DDE1      05964         POP     IX
1CB2  E1        05965         POP     HL
1CB3  2839      05966         JR      Z,CATF5                         ; NEXT SECTOR IF THE SAME
1CB5  3004      05967         JR      NC,CATF14
                05968 ;
1CB7  19        05969         ADD     HL,DE                           ; GREATER...NEXT ENTRY
1CB8  0D        05970         DEC     C
1CB9  18DF      05971         JR      CATF3
                05972 ;
                05973 CATF14
1CBB  E5        05974         PUSH    HL                              ; LESS...INSERT
1CBC  D5        05975         PUSH    DE
1CBD  C5        05976         PUSH    BC
1CBE  E5        05977         PUSH    HL
1CBF  CB21      05978         SLA     C                               ; BC := 10*BC LENGTH OF REMAINING LIST
1CC1  60        05979         LD      H,B
1CC2  69        05980         LD      L,C
1CC3  09        05981         ADD     HL,BC
1CC4  09        05982         ADD     HL,BC
1CC5  09        05983         ADD     HL,BC
1CC6  09        05984         ADD     HL,BC
1CC7  44        05985         LD      B,H
1CC8  4D        05986         LD      C,L
1CC9  E1        05987         POP     HL                              ; HL POINTS TO TOP BYTE IN BLOCK
1CCA  2B        05988         DEC     HL                              ; DE POINTS TO 10 BYTES BEYOND
1CCB  09        05989         ADD     HL,BC
1CCC  EB        05990         EX      DE,HL                           ; *
1CCD  19        05991         ADD     HL,DE
1CCE  EB        05992         EX      DE,HL                           ; *
1CCF  EDB8      05993         LDDR                                    ; MOVE UP THE REMAINING DATA
1CD1  C1        05994         POP     BC
1CD2  D1        05995         POP     DE
1CD3  E1        05996         POP     HL
                05997 ;
                05998 CATF4
1CD4  DDE5      05999         PUSH    IX                              ; ENTER THE NAME IN THE DIRECTORY
1CD6  060A      06000         LD      B,10
                06001 CATF6
1CD8  DD7E47    06002         LD      A,(IX+RECNAM)
1CDB  77        06003         LD      (HL),A
1CDC  DD23      06004         INC     IX
1CDE  23        06005         INC     HL
1CDF  10F7      06006         DJNZ    CATF6
1CE1  DDE1      06007         POP     IX
                06008 ;
1CE3  DD7E0D    06009         LD      A,(IX+CHREC)                    ; IS THE DIRECTORY FULL?
1CE6  3C        06010         INC     A
1CE7  DD770D    06011         LD      (IX+CHREC),A
1CEA  FE32      06012         CP      50
1CEC  2806      06013         JR      Z,CATF15
                06014 CATF5
1CEE  CD1A13    06015         CALL    DECSEC                          ; NEXT SECTOR
1CF1  C26E1C    06016         JP      NZ,CATF1
                06017 ;
                06018 CATF15
1CF4  DDE5      06019         PUSH    IX              
1CF6  AF        06020         XOR     A                               ; LAST SECTOR DESELECT DRIVES
1CF7  CDF717    06021         CALL    DRVSEL
                06022 ;
1CFA  DDE5      06023         PUSH    IX
1CFC  E1        06024         POP     HL
1CFD  112C00    06025         LD      DE,HDNAME                       ; PRINT TAPE NAME
1D00  19        06026         ADD     HL,DE
1D01  CD501D    06027         CALL    NMOUT
1D04  3E0D      06028         LD      A,0DH
1D06  CD661D    06029         CALL    CHOUT
                06030 ;
1D09  DDE5      06031         PUSH    IX
1D0B  E1        06032         POP     HL
1D0C  115200    06033         LD      DE,CHDATA
1D0F  19        06034         ADD     HL,DE
1D10  DD460D    06035         LD      B,(IX+CHREC)
1D13  78        06036         LD      A,B
1D14  B7        06037         OR      A
1D15  2805      06038         JR      Z,CATF8
                06039 CATF7
1D17  CD501D    06040         CALL    NMOUT                           ; PRINT FILENAME AND CR
1D1A  10FB      06041         DJNZ    CATF7
                06042 ;
                06043 CATF8
1D1C  CD381D    06044         CALL    MANY?                           ; HOW MANY FREE SECTORS?
1D1F  7B        06045         LD      A,E                             ; DISPLAY CAPACITY
1D20  CB3F      06046         SRL     A                               ; BLOCKS -> K'S
1D22  D7        06047         RST     CALBAS                          ; STACK  A
1D23  282D      06048         DEFW    2D28H
1D25  3E0D      06049         LD      A,0DH
1D27  CD661D    06050         CALL    CHOUT
1D2A  D7        06051         RST     CALBAS                          ; OUTPUT FP
1D2B  E32D      06052         DEFW    2DE3H
1D2D  3E0D      06053         LD      A,0DH
1D2F  CD661D    06054         CALL    CHOUT
1D32  DDE1      06055         POP     IX
1D34  CDC610    06056         CALL    DELIX                           ; DELETE THE CHANNEL
                06057 ;
1D37  C9        06058         RET                                     ; AND RETURN
                06059 ;
                06060 ; MANY? COUNTS THE NUMBER OF FREE SECTORS IN THE CURRENT CHANNEL
                06061 ; AND RETURNS THE NUMBER IN E
                06062 ;'
                06063 MANY?
1D38  DD6E1A    06064         LD      L,(IX+CHMAP)
1D3B  DD661B    06065         LD      H,(IX+CHMAP+1)
1D3E  1E00      06066         LD      E,0                             ; WORK OUT THE FREE SPACE
1D40  0E20      06067         LD      C,MAPLN
                06068 CATF9
1D42  7E        06069         LD      A,(HL)
1D43  23        06070         INC     HL
1D44  0608      06071         LD      B,8
                06072 CATF10
1D46  1F        06073         RRA                                     ; COUNT THE FREE BITS
1D47  3801      06074         JR      C,CATF11
1D49  1C        06075         INC     E
                06076 CATF11
1D4A  10FA      06077         DJNZ    CATF10
1D4C  0D        06078         DEC     C                               ; NEXT BYTE
1D4D  20F3      06079         JR      NZ,CATF9
1D4F  C9        06080         RET
                06081 
                06082 
                06083 ; NMOUT   DISPLAYS THE 10 BYTES AT HL FOLLOWED BY A CR
                06084 ; HL IS LEFT INCREMENTED
                06085 ;
                06086 NMOUT
1D50  C5        06087         PUSH    BC
1D51  060A      06088         LD      B,10
                06089 NM1
1D53  7E        06090         LD      A,(HL)
1D54  CD661D    06091         CALL    CHOUT
1D57  23        06092         INC     HL
1D58  10F9      06093         DJNZ    NM1
1D5A  3E0D      06094         LD      A,0DH
1D5C  CD661D    06095         CALL    CHOUT
1D5F  E5        06096         PUSH    HL
1D60            06097         OLDCAL  0D4DH                           ; RESET TEMPORARY COLOURS
1D63  E1        06101         POP     HL
1D64  C1        06102         POP     BC
1D65  C9        06103         RET
                06104 ;
                06105 CHOUT
1D66  DDE5      06106         PUSH    IX
1D68            06107         OLDCAL  16
1D6B  DDE1      06111         POP     IX
1D6D  C9        06112         RET
                06113 ;
                06114 ;
                06115 ;******************************************
                06116 ;*     ERASE                              *
                06117 ;******************************************
                06118 ;
                06119 ;
                06120 ; THIS IS CALLED WHEN THE COMMAND ERASE FILENAME IS ENCOUNTERED
                06121 ; ERASE WORKS BY PASSING THROUGH THE TAPE READING ALL DESCRIPTORS
                06122 ; AND CREATING A MAP OF ALL BLOCKS TO BE DELETED
                06123 ;
                06124 ERA
1D6E  CDE80F    06125         CALL    CREATE                          ; MAKE CHANNEL INFO
                06126 ;
1D71  DD7E19    06127         LD      A,(IX+CHDRIV)
1D74  CDF717    06128         CALL    DRVSEL
                06129 ;
1D77  DBEF      06130         IN      A,(PORTC)
1D79  E601      06131         AND     PROTECT                         ; IS THE DRIVE WRITE PROTECTED?
1D7B  2002      06132         JR      NZ,WR12
1D7D  E7        06133         RST     SH_ERR
1D7E  0E        06134         DEFB    0EH                             ; DRIVE WRITE PROTECTED
                06135 WR12
1D7F  DDE5      06136         PUSH    IX                              ; INITIALIZE LIST TO ALL ZEROS
1D81  E1        06137         POP     HL
1D82  115200    06138         LD      DE,CHDATA
1D85  19        06139         ADD     HL,DE
                06140 ;
1D86  E5        06141         PUSH    HL
1D87  D1        06142         POP     DE
1D88  13        06143         INC     DE
1D89  011F00    06144         LD      BC,MAPLN-1
1D8C  AF        06145         XOR     A
1D8D  77        06146         LD      (HL),A
1D8E  EDB0      06147         LDIR
                06148 ;
                06149 ;**********************************************************
                06150 ;* MAKE A MAP OF THE TAPE IN THE USUAL WAY AND MAKE       *
                06151 ;* ANOTHER MAP (LIST) IN THE DATA BUFFER INDICATING       *
                06152 ;* THE POSITIONS OF RECORDS TO BE ERASED                  *
                06153 ;**********************************************************
                06154 ;
                06155 ;
1D90  3EFF      06156         LD      A,0FFH
1D92  DD770D    06157         LD      (IX+CHREC),A
1D95  01FB04    06158         LD      BC,TRYS*HD_MAX
1D98  ED43C95C  06159         LD      (SECTOR),BC
                06160 ;
                06161 ERA1
1D9C  CD1A13    06162         CALL    DECSEC                          ; HAVE WE WAITED LONG ENOUGH FOR EOF
1D9F  2857      06163         JR      Z,ERA3_4                        ; YES...ERASE WHAT WE HAVE FOUND
                06164 
1DA1  CDCC12    06165         CALL    WTHDR                           ; WAIT FOR A HEADER
                06166 ;
1DA4  CD531E    06167         CALL    RDDES                           ; READ DESCRIPTOR
                06168 ;
1DA7  2031      06169         JR      NZ,ERA3                         ; DATA BAD...IGNORE
                06170 ;
1DA9  DD7E43    06171         LD      A,(IX+RECFLG)                   ; IS IT FREE IE NOT FULL OR EOF
1DAC  DDB646    06172         OR      (IX+RECLEN+1)
1DAF  E602      06173         AND     2
1DB1  2005      06174         JR      NZ,ERA2
                06175 ;
1DB3  CD0613    06176         CALL    MARK                            ; YES...MARK MAP
1DB6  1822      06177         JR      ERA3
                06178 ;
                06179 ERA2
1DB8  DDE5      06180         PUSH    IX                              ; NO...IS IT THE RIGHT FILE?
1DBA  E1        06181         POP     HL
1DBB  114700    06182         LD      DE,RECNAM
1DBE  19        06183         ADD     HL,DE
1DBF  010A00    06184         LD      BC,10
                06185 ;
1DC2  CD2613    06186         CALL    CPSTR
1DC5  2013      06187         JR      NZ,ERA3
                06188 ;
1DC7  CD0E13    06189         CALL    LIST?                           ; YES...ADD SECTOR TO LIST?
                06190 ;
1DCA  78        06191         LD      A,B
1DCB  B6        06192         OR      (HL)
1DCC  77        06193         LD      (HL),A
                06194 ;
1DCD  DDCB434E  06195         BIT     1,(IX+RECFLG)                   ; IS IT THE LAST RECORD
1DD1  2807      06196         JR      Z,ERA3
1DD3  DD7E44    06197         LD      A,(IX+RECNUM)                   ; YES...SAVE RECORD COUNT
1DD6  3C        06198         INC     A
1DD7  DD770D    06199         LD      (IX+CHREC),A
                06200 ERA3
1DDA  DDE5      06201         PUSH    IX                              ; HAVE WE FOUND THE LOT?
1DDC  E1        06202         POP     HL
1DDD  115200    06203         LD      DE,CHDATA
1DE0  19        06204         ADD     HL,DE
1DE1  1E00      06205         LD      E,0
1DE3  0E20      06206         LD      C,MAPLN
                06207 ERA3_1
1DE5  7E        06208         LD      A,(HL)
1DE6  23        06209         INC     HL
1DE7  0608      06210         LD      B,8
                06211 ERA3_2
1DE9  1F        06212         RRA
1DEA  3001      06213         JR      NC,ERA3_3
1DEC  1C        06214         INC     E                               ; COUNT THEM
                06215 ERA3_3
1DED  10FA      06216         DJNZ    ERA3_2
1DEF  0D        06217         DEC     C
1DF0  20F3      06218         JR      NZ,ERA3_1
                06219 ;
1DF2  DD7E0D    06220         LD      A,(IX+CHREC)
1DF5  BB        06221         CP      E
1DF6  20A4      06222         JR      NZ,ERA1
                06223 ERA3_4
1DF8  CD3E1E    06224         CALL    BUILD                           ; BUILD AN EMPTY DESCRIPTOR
                06225 ;
                06226 ERA4
1DFB  CDCC12    06227         CALL    WTHDR                           ; WAIT FOR THE HEADER
                06228 ;
1DFE  CD0E13    06229         CALL    LIST?                           ; MARKED FOR ERASURE?
1E01  2823      06230         JR      Z,ERA6
1E03  E5        06231         PUSH    HL
1E04  C5        06232         PUSH    BC
                06233 ;
1E05  3EE6      06234         LD      A,ERASE.AND.CTS.AND.SELD
1E07  D3EF      06235         OUT     (PORTC),A                       ; ERASE EARLY BLOCKS
                06236 ;
1E09  016801    06237         LD      BC,GAPT3                        ; WAIT FOR THE REMAINDER OF GAP 1
1E0C  CDFA18    06238         CALL    DELBC
                06239 ;
1E0F  DDE5      06240         PUSH    IX
1E11  E1        06241         POP     HL
1E12  113700    06242         LD      DE,CHDES
1E15  19        06243         ADD     HL,DE
                06244 ;
1E16  CD7818    06245         CALL    WRBLK                           ; WRITE AN EMPTY BLOCK
                06246 ;
1E19  3EEE      06247         LD      A,CTS.AND.SELD                  ; TURN OFF THE ERASE
1E1B  D3EF      06248         OUT     (PORTC),A
                06249 ;
1E1D  CD0613    06250         CALL    MARK                            ; MARK THE CHANGE ON THE MAP
                06251 ;
1E20  C1        06252         POP     BC                              ; AND ON THE LIST
1E21  E1        06253         POP     HL
1E22  78        06254         LD      A,B
1E23  2F        06255         CPL
1E24  A6        06256         AND     (HL)
1E25  77        06257         LD      (HL),A
                06258 ;
                06259 ERA6
1E26  DDE5      06260         PUSH    IX                              ; ANY LEFT?
1E28  E1        06261         POP     HL
1E29  115200    06262         LD      DE,CHDATA
1E2C  19        06263         ADD     HL,DE
1E2D  0620      06264         LD      B,MAPLN
                06265 ERA7
1E2F  7E        06266         LD      A,(HL)
1E30  B7        06267         OR      A
1E31  20C8      06268         JR      NZ,ERA4                         ; YES...CONTINUE
1E33  23        06269         INC     HL
1E34  10F9      06270         DJNZ    ERA7
                06271 ;
1E36  AF        06272         XOR     A                               ; NO...DESELECT DRIVE
1E37  CDF717    06273         CALL    DRVSEL
                06274 ;
1E3A  CDC610    06275         CALL    DELIX                           ; DELETE CHANNEL
                06276 ;
1E3D  C9        06277         RET                                     ; AND RETURN
                06278 ;
                06279 ; BUILD MAKES THE DESCRIPTOR IN THE CURRENT BUFFER REFER
                06280 ; TO AN EMPTY RECORD
                06281 ;
                06282 BUILD
1E3E  AF        06283         XOR     A
1E3F  DD7743    06284         LD      (IX+RECFLG),A
1E42  DD7745    06285         LD      (IX+RECLEN),A
1E45  DD7746    06286         LD      (IX+RECLEN+1),A
                06287 ;
1E48  DDE5      06288         PUSH    IX
1E4A  E1        06289         POP     HL
1E4B  114300    06290         LD      DE,CHDES+PLEN
1E4E  19        06291         ADD     HL,DE
1E4F  CD4913    06292         CALL    ECH
1E52  C9        06293         RET
                06294 ;
                06295 ;
                06296 ; RDDES READS A DESCRIPTOR BLOCK INTO THE BUFFER DEFINED BY IX
                06297 ; Z FLAG SET IF DESCRIPTOR OK
                06298 ;
                06299 RDDES
1E53  DDE5      06300         PUSH    IX
1E55  E1        06301         POP     HL
1E56  114300    06302         LD      DE,CHDES+PLEN
1E59  19        06303         ADD     HL,DE
                06304 ;
1E5A  CDA318    06305         CALL    RDHBLK
1E5D  CD4913    06306         CALL    ECH
1E60  C0        06307         RET     NZ
1E61  DDCB4346  06308         BIT     0,(IX+RECFLG)                   ; IS IT REALLY A DESCRIPTOR
1E65  C9        06309         RET
                06310 ;
                06311         END
                06312 *INCLUDE SH_DRIVE.S
                06313 
                06314 
                06315 ;       EXTERNAL                ERA,MOVE,CATN,FORMAT,OPENN,SAVE,END1
                06316 ;
                06317 ;       GLOBAL  ACT_FM
                06318 ;       GLOBAL  ACT_OM
                06319 ;       GLOBAL  ACT_ER
                06320 ;       GLOBAL  ACT_MO
                06321 ;       GLOBAL  ACT_CA
                06322 ;       GLOBAL   ACT_SA
                06323 ;
                06324 ;
1E66  CD6E1D    06325 ACT_ER  CALL    ERA
1E69  1819      06326         JR      EXIT
1E6B  CDF913    06327 ACT_MO  CALL    MOVE
1E6E  1814      06328         JR      EXIT
1E70  CD581C    06329 ACT_CA  CALL    CATN
1E73  180F      06330         JR      EXIT
1E75  CD6E1B    06331 ACT_FM  CALL    FORMAT
1E78  180A      06332         JR      EXIT
1E7A  CDF01A    06333 ACT_OM  CALL    OPENN
1E7D  1805      06334         JR      EXIT
1E7F  CDE214    06335 ACT_SA  CALL    SAVE
1E82  1800      06336         JR      EXIT
                06337 ;
1E84  C3C105    06338 EXIT    JP      END1
                06339 
                06340 
                06341 END
                06342 *INCLUDE BLOCKS.S
                06343 ;
                06344 ;
                06345 ;
                06346 ;********************************************************
                06347 ;*        BLOCKS.S                                      *
                06348 ;*        15/2/83                                       *
                06349 ;********************************************************
                06350 ;
                06351 *LIST   ON
                06352 ;
                06353 ;       GLOBAL  DIS10,HEX,OPHEX,OP,DISMAP          
                06354 ;
                06355 ;       EXTERNAL        MRDCH,MWRCH                     ;HISOFT
                06356 ;       EXTERNAL        DELBC                                           ;DUMMY
                06357 ;
                06358 ;
1E87  F5        06359 OPHEX   PUSH    AF
1E88  1F        06360         RRA
1E89  1F        06361         RRA
1E8A  1F        06362         RRA
1E8B  1F        06363         RRA
1E8C  CD901E    06364         CALL    OPH
1E8F  F1        06365         POP     AF
                06366 OPH
1E90  E60F      06367         AND     0FH
1E92  FE0A      06368         CP      10
1E94  3802      06369         JR      C,OPH1
1E96  C607      06370         ADD     A,'A'-'0'-10
1E98  C630      06371 OPH1    ADD     A,'0'
1E9A  CDA91E    06372         CALL    OP
1E9D  C9        06373         RET
                06374 ;
1E9E  F5        06375 HEX     PUSH    AF
1E9F  CD871E    06376         CALL    OPHEX
1EA2  3E20      06377         LD      A,' '
1EA4  CDA91E    06378         CALL    OP
1EA7  F1        06379         POP     AF
1EA8  C9        06380         RET
                06381 ;
1EA9  E5        06382 OP      PUSH    HL
1EAA  D5        06383         PUSH    DE
1EAB  C5        06384         PUSH    BC
1EAC  F5        06385         PUSH    AF
1EAD  D9        06386         EXX
1EAE  E5        06387         PUSH    HL
1EAF  D5        06388         PUSH    DE
1EB0  C5        06389         PUSH    BC
1EB1  F5        06390         PUSH    AF
1EB2  2A515C    06391         LD      HL,(23633)
1EB5  E5        06392         PUSH    HL
1EB6  F5        06393         PUSH    AF
1EB7  3E02      06394         LD      A,2
1EB9            06395         OLDCAL  SELECT  
1EBC  F1        06399         POP     AF
1EBD  D7        06400         RST     CALBAS
1EBE  1000      06401         DEFW    16
1EC0  E1        06402         POP     HL
1EC1  22515C    06403         LD      (23633),HL
1EC4  F1        06404         POP     AF
1EC5  C1        06405         POP     BC
1EC6  D1        06406         POP     DE
1EC7  E1        06407         POP     HL
1EC8  D9        06408         EXX
1EC9  F1        06409         POP     AF
1ECA  C1        06410         POP     BC
1ECB  D1        06411         POP     DE
1ECC  E1        06412         POP     HL
1ECD  C9        06413         RET
                06414 ;
                06415 ;
                06416 ; DIS10 DISPLAYS IN HEX THE 10 BYTES STARTING AT (HL)
                06417 ;
                06418 DIS10
                06419 DISMAP
1ECE  E5        06420         PUSH    HL
1ECF  C5        06421         PUSH    BC
1ED0  F5        06422         PUSH    AF
1ED1  060A      06423         LD      B,10
                06424 DIS11
1ED3  7E        06425         LD      A,(HL)
1ED4  CD9E1E    06426         CALL    HEX
1ED7  23        06427         INC     HL
1ED8  10F9      06428         DJNZ    DIS11
1EDA  3E0D      06429         LD      A,0DH
1EDC  CDA91E    06430         CALL    OP
1EDF  F1        06431         POP     AF
1EE0  C1        06432         POP     BC
1EE1  E1        06433         POP     HL
1EE2  C9        06434         RET
                06435 ;
                06436         END


ACT_CA          1E70  ACT_ER          1E66  ACT_FM          1E75  
ACT_FT          0AC9  ACT_MO          1E6B  ACT_OM          1E7A  
ACT_ON          0EA3  ACT_OT          0B47  ACT_SA          1E7F  
ADJ1            136D  ADJ2            138C  ADJ3            137F  
ADJ4            1386  ADJM1           13A5  ADJM2           13C9  
ADJMAP          1399  ADJSTR          1367  ATTR_P          5C8D  
ATTR_T          5C8F  AUTO_R          0A95  BASRPT          02B7  
BAUD            000D  BORDCR          5C48  BREAK?          18E9  
BREAKL          05E2  BROADL          0E0F  BUILD           1E3E  
BUSY            0010  B_CHEK          06B0  B_COL           0CA9  
CALBAS          0010  CALB_2          0081  CATF1           1C6E  
CATF10          1D46  CATF11          1D4A  CATF12          1CA4  
CATF13          1CAF  CATF14          1CBB  CATF15          1CF4  
CATF2           1C85  CATF3           1C9A  CATF4           1CD4  
CATF5           1CEE  CATF6           1CD8  CATF7           1D17  
CATF8           1D1C  CATF9           1D42  CATN            1C58  
CHADD_          0015  CHANGE          0CBD  CHANLN          0253  
CHANS           5C4F  CHANS_          5C4F  CHBYTE          000B  
CHDATA          0052  CHDES           0037  CHDRIV          0019  
CHFLAG          0018  CHHDR           001C  CHK1            191C  
CHK2            191D  CHK3            1929  CHK4            1952  
CHK5            1959  CHK6            1961  CHK7            1968  
CHLEN           0009  CHMAP           001A  CHNAME          000E  
CHOUT           1D66  CHREC           000D  CHTYPE          0004  
CH_ADD          5C5D  CLOSE1          12BE  CLOSEN          12AE  
CLOSIX          12B1  CL_BT           1751  CL_M            176D  
CL_N            175E  CL_R            177F  CL_S1           1789  
CL_S2           17A4  CL_STR          1718  COMM            05B1  
CONIN           19D9  CONOUT          19EC  COPIES          0039  
CPBLK           1650  CPBLK1          1660  CPBLK2          166C  
CPS7            133B  CPS8            1346  CPS9            132A  
CPSTR           1326  CR11            108F  CR12            1061  
CR12_5          106F  CR17            1094  CR4             0FF6  
CR5             102A  CR6             1034  CR7             100E  
CREATE          0FE8  CTS             00EF  CURCHL          5C51  
DATADD          5C57  DCHK            0252  DECSEC          131A  
DEFADD          5C0B  DEL1            18FB  DEL2            10F7  
DEL4            110C  DEL5            1116  DELAY           1867  
DELBC           18FA  DELIX           10C6  DELREC          19E8  
DELTMP          17B9  DESCHK          0051  DIRECT          1A01  
DIS10           1ECE  DIS11           1ED3  DISMAP          1ECE  
DONE?           12E2  DR              5CB6  DRV0            182A  
DRV1            1835  DRV2            184B  DRV3            185C  
DRVS1           1802  DRVS2           1813  DRVS3           1820  
DRVS4           1811  DRVS5           1809  DRVSEL          17F7  
DR_CHK          066D  DR_LEN          003A  DT1             17C2  
DT15            17D2  DT2             17DE  DT3             17ED  
DTR             0008  D_LEN           021C  D_STR1          0020  
D_STR2          0028  ECD             134E  ECD1            1351  
ECD2            1354  ECD3            135C  ECD32           1902  
ECH             1349  END             1E87  END1            05C1  
END2            05DD  ENDSYN          05E0  END_ER          04B2  
ENTRY           0008  ERA             1D6E  ERA1            1D9C  
ERA2            1DB8  ERA3            1DDA  ERA3_1          1DE5  
ERA3_2          1DE9  ERA3_3          1DED  ERA3_4          1DF8  
ERA4            1DFB  ERA6            1E26  ERA7            1E2F  
ERASE           00F7  ERRH            0CB4  ERROR           0008  
ERR_1           00A5  ERR_2           00BC  ERR_3           01AA  
ERR_6           01F0  ERR_HO          00E9  ERR_IN          009A  
ERR_NR          5C3A  ERR_PF          00E7  ERR_SA          00FB  
ERR_SP          5C3D  ERR_ST          011B  ERR_V           01EC  
EXCH            14CF  EXCH1           14D7  EXIT            1E84  
EXP             05E7  E_LINE          5C59  FLAGS           5C3B  
FLAGS2          5C6A  FLAGS3          5CB6  FLAGX           5C71  
FORM1           1BD6  FORM10          1BBD  FORM11          1BC1  
FORM4           1C0A  FORM5           1C1B  FORM6           1C3E  
FORM7           1C46  FORM8           1C53  FORMAT          1B6E  
FP1             0182  FP2             01A5  FP2A            01A3  
FREE0           12EA  FREE1           12F0  FREE3           1300  
FREE?           12E7  FT_1            0AD0  FT_2            0AE4  
GAP             0004  GAPT1           01B2  GAPT2           033F  
GAPT3           0168  GET1            0E27  GET15           0E40  
GET2            0E45  GET25           0E62  GET3            0E65  
GET35           0E6C  GET4            0E87  GET5            0E93  
GET6            0EA1  GETMBL          15B1  GETPAK          0E18  
GET_BL          0A5C  GET_HD          1588  GE_1            0A6A  
GE_15           0A72  GE_2            0A79  GE_3            0A7E  
GE_4            0A8A  GE_5            0A8F  GE_ERR          1A46  
GE_PAK          1A31  HDCHK           0036  HDFLAG          0028  
HDNAME          002C  HDNUMB          0029  HD_00           0030  
HD_0B           0031  HD_0C           0032  HD_0D           0033  
HD_0E           0034  HD_0F           0035  HD_10           0036  
HD_11           0037  HD_12           0038  HD_LEN          001B  
HD_MAX          00FF  HEX             1E9E  HOOK1           1987  
HOOK?           0077  HOOKS           1981  H_BASE          19A9  
H_CALL          19A4  H_ERR           0902  H_L             0004  
H_LEN           0030  H_RET           19A8  H_S1            0904  
H_SORT          08F2  IDE_ER          062D  IDLE_1          0F0E  
IDLE_2          0F15  IDN_ER          0681  IN1             0F94  
IN2             0F9D  IN3             0F9E  IN4             0FAE  
INBY05          0B9A  INBY1           0BB1  INBY15          0BC5  
INBY2           0BD1  INBY45          0BF0  INCH            15E6  
INPAK           0F92  INSCT           0F1E  INSER1          01F7  
INSERT          1655  INSER_          0030  INS_1           0224  
INS_2           0235  IN_B0           0D1E  IN_B1           0D38  
IN_B15          0D3F  IN_B2           0D45  IN_B3           0D5F  
IN_BY0          0B8E  IN_BY3          0BD8  IN_BY4          0BDA  
IN_BY5          0BF1  IN_BY6          0BF9  IN_BY7          0C1D  
IN_BY8          0C1F  IN_BY9          0C36  IN_BYP          0B81  
IN_BYQ          0B7B  IN_BYT          0D12  IN_ER           064C  
IN_N            0D0C  IN_T            0B6F  IN_T2           0B75  
IOBORD          0010  ISC0            0F21  ISC1            0F35  
ISC2            0F56  ISC3            0F58  ISN_ER          069F  
KB_PT           00FE  LAST_K          5C08  LD_C1           09B5  
LD_C2           09BE  LD_C3           09C7  LD_C35          0941  
LD_CON          09A3  LD_D4           0952  LD_D5           09F3  
LD_D6           0A0F  LETT            05F5  LETT_N          060C  
LIST?           130E  LOAD2           1599  LOAD25          15A1  
LOAD5           15E7  LOAD6           1601  LOT1            0C6F  
LOT2            0C74  LOT3            0C88  LOT4            0C8E  
LOT5            0CA4  LOT_A           0C46  LOT_B           0C4C  
LOT_C           0C57  LSC1            0133  LSC1A           013B  
LSC2            0144  LSC3            014E  LSC4            0152  
LSC5            015D  LSC6            0165  LSC7            0169  
LSC8            016F  LSPR            0130  L_ERR           0139  
L_P1            0A4E  L_PROG          0A15  L_STR1          0023  
L_STR2          002B  L_T1            08CD  L_T2            08D3  
L_T3            08D8  L_T35           08E0  L_T4            08E7  
L_T5            08EC  L_TEST          08AF  MANY?           1D38  
MAPLN           0020  MARK            1306  MASK            0038  
MBR_ER          06B7  MCHDAT          13D4  MDN_ER          0683  
ME1             0973  MEM             5C68  ME_CON          0967  
MNCHEK          0685  MN_ER           068D  MOC             14AC  
MOC1            14C0  MOP             145D  MOP1            146E  
MOP2            1487  MOP3            1493  MOP4            149D  
MOV0            141C  MOV1            1422  MOV5            142B  
MOV9            1436  MOVE            13F9  MRD1            1136  
MRD2            115A  MRD3            1164  MRD55           0CEA  
MRDC10          0CE5  MRDCH           1124  MRDCH4          0CDB  
MRDCH5          0CE1  MRDCH6          0CED  MRDCH7          0CF7  
MRDCH8          0CFB  MRDCH9          0D01  MRDIX           112E  
MSN_ER          06A1  MWR1            11E8  MWR2            1227  
MWR3            125C  MWR4            1223  MWRCH           11DA  
MWRIX           11E0  M_CHEK          0665  NAME            0AC6  
NCB             0015  NCCODE          0004  NCCUR           0013  
NCDCS           0011  NCEND           0114  NCHCS           0012  
NCIBL           0014  NCILEN          0009  NCINCH          0007  
NCIRIS          000B  NCNUMB          000D  NCOBL           0010  
NCSELF          000C  NCTYPE          000F  NCWRCH          0005  
NERROR          12C6  NETIDL          0F03  NETINI          0EEA  
NET_BK          0F4D  NEWPPC          5C42  NLETNN          06A3  
NM1             1D53  NMOUT           1D50  NOPEN           0EB5  
NSPPC           5C44  NTCLSE          0EF5  NTDCS           001E  
NTDEST          0018  NTEMP           0EA9  NTHCS           001F  
NTLEN           001D  NTNUMB          001A  NTRESP          0017  
NTSRCE          0019  NTSTAT          000F  NTTYPE          001C  
NUMB_           061E  N_CHEK          068F  N_CLOS          1A24  
N_LEN           0114  N_LETT          05F2  N_NAME          062F  
N_STR           064E  N_STR1          0024  N_STR2          002C  
ONET0           0DB2  ONET1           0DC5  ONET2           0DD4  
ONET3           0DDA  ONET4           0DFD  ONET5           0E05  
ONET6           0E12  OP              1EA9  OPEN1           1B23  
OPEN2           1B0D  OPENF           1B29  OPENN           1AF0  
OPENT           0B13  OPF1            1B3A  OPF2            1B5F  
OPF3            1B5C  OPF4            1B57  OPF5            1B6C  
OPH             1E90  OPH1            1E98  OPHEX           1E87  
OSC1            0F72  OUT1            0FCC  OUT2            0FD2  
OUTCH           0010  OUTNET          0DAB  OUTPAK          0FC5  
OUTSCT          0F61  OUT_N           0D6C  OUT_N0          0D7A  
OUT_N1          0D88  OUT_T           0C3C  OUT_T2          0C5A  
PLEN            000C  POPMAP          1635  POPMP1          1645  
PORTC           00EF  PORTD           00E7  PPC             5C45  
PROG            5C53  PROTECT         0001  PUSHM1          1628  
PUSHMP          161B  P_AMBL          13ED  P_FLAG          5C91  
RD1             18AD  RD2             18B1  RD2_5           18B3  
RD3             18BE  RD3_5           18C0  RD4             18D2  
RD5             18D8  RD6             18DE  RDBLK           18A9  
RDDES           1E53  RDHBLK          18A3  RDN1            1186  
RDN2            11A0  RDNX1           11D8  RDNXT           11A7  
RDSC1           1A51  RDSC2           1A63  RDSC3           1A81  
READN           1179  READNC          117F  READNX          1A86  
READRN          1A17  READSC          1A4B  READSQ          1A09  
READ_           166E  READ_1          1674  RECFLG          0043  
RECLEN          0045  RECNAM          0047  RECNUM          0044  
REL             16B4  RELNAM          1699  RETBAS          0700  
RMERR           0040  ROMADD          0037  ROMERR          0028  
RS232           00F7  RSPOND          0FBE  R_BASE          0000  
SAO_ER          052F  SAV1_5          1538  SAVE            14E2  
SAVE0           14F0  SAVE1           1504  SAVE2           1540  
SAVE3           155A  SAVE4           1566  SAVE5           1581  
SA_O1           088E  SA_O2           0891  SA_OUT          0880  
SBRT            0003  SCANN           0701  SCANN_1         0722  
SCAN_0          0716  SCR             1976  SCRAM           196C  
SCRCT           5C8C  SC_00           0028  SC_0B           0029  
SC_0D           002B  SC_0F           002D  SC_ERR          0584  
SECTOR          5CC9  SELC            00FD  SELD            00FE  
SELECT          1601  SENDTV          07F4  SERIAL          00F7  
SER_FL          0011  SHERR1          003A  SH_ERR          0020  
SH_R1           026E  SH_R2           029F  SH_R3           02AC  
SH_RPT          0258  SH_VARS         023A  SLV1            09A0  
SLV2            0994  SLVMEX          0988  SNDPAK          0D93  
SP1             1274  SPACE?          126C  STATUS          00EF  
STKBOT          5C63  STKEND          5C65  STRMS           5C10  
STR_ER          0663  STR_OF          0B4A  STVF1           06CC  
ST_E1           05BF  ST_END          05B7  ST_V_F          06B9  
SUBPPC          5C47  SVA             05A7  SV_1_2          059F  
SV_CL           024D  SV_CL1          0252  SYN             0068  
SYNC            0002  SYNT            0018  S_B1            0854  
S_B2            0872  S_B2A           086E  S_B3            087D  
S_BYTS          084F  S_CAT           0486  S_CAT1          0494  
S_CAT2          04A6  S_CLR           057F  S_CLR1          058E  
S_CLS           0559  S_ERAS          0531  S_FOR1          04BF  
S_FOR2          04CD  S_FOR3          04D3  S_FOR4          04E7  
S_FORM          04B4  S_LOAD          0894  S_MERG          08A8  
S_MOVE          053D  S_OP1           0500  S_OP2           051C  
S_OP3           051F  S_OP4           0529  S_OPEN          04ED  
S_SAVE          082F  S_SA_M          0849  S_STR1          0022  
S_STR2          002A  S_VERI          089E  TRYS            0005  
TV_FLAG         5C3C  T_BAUD          0AEF  T_C1            079A  
T_C2            079F  T_C3            07A7  T_C4            07B2  
T_C5            07B8  T_CODE          0789  T_D1            07DA  
T_D2            07F2  T_D3            07F6  T_D4            0803  
T_D5            080E  T_D6            0819  T_D7            081C  
T_DATA          07D2  T_DERR          07F4  T_LINE          073E  
T_PROG          0750  T_PR_1          0753  T_SCRE          0771  
T_TAB           0B64  T_TABL          000B  UDG             5C7B  
VARS            5C4B  VA_LEN          0013  VECTOR          0001  
VE_C1           0919  VE_C15          0930  VE_C2           0932  
VE_C3           0959  VE_C4           0962  VE_CON          0911  
VOID            1AE0  WAIT            00EF  WR1             187C  
WR11            1297  WR12            1D7F  WR2             1895  
WRBLK           1878  WRC             1215  WRFLG           0000  
WRFR0           1285  WRFREE          127D  WRHBLK          1872  
WRITE           00FB  WRREC           1201  WRSC            1A91  
WRSC1           1AAD  WRSC2           1ABF  WRSC3           1AC7  
WTHDR           12CC  XR              0007  X_PTR           5C5F  
Y               5C3A  ZILCH           0007  ZXOUT           19FC  
_IN1            19DE  _LD_C35         09DE  _LD_D4          09E8  
_OUT1           19EF  _RD1            1A14  _RD3            1A1A  
_RDN1           167B  _RDN2           1692  _RDNX1          1A8C  
_SC_ERR         073C  _WR11           1884  __WR11          1B86  

