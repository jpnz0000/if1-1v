;
;***********************************************************************
;
;			SAVE, LOAD, VERIFY & MERGE MODULE    - SH_SAVE.S
;
;***********************************************************************



;	GLOBAL S_SAVE, S_LOAD, S_VERI, S_MERG
;	GLOBAL SLVMEX
;	GLOBAL  H_SORT,T_PR_1
;	EXTERNAL GET_BL, LD_CON
;	EXTERNAL IN_BYT,IN_BYP
;	EXTERNAL NTEMP
;	EXTERNAL OUT_N, OUT_T2
;	EXTERNAL NTCLSE
;	EXTERNAL ACT_SA, GET_HD, GETMBL, CLOSIX
;	EXTERNAL END_ER, COMM, MNCHEK
;	EXTERNAL LETT,N_NAME,N_CHEK,ST_END,END1
;	EXTERNAL	DELTMP

;_________________________________________________________________________


SCANN		; SCANNING SUBROUTINE FOR SAVE, LOAD, VERIFY & MERGE
	RST	CALBAS
	DEFW	0020H				; STEP ON
	CP	2AH				; THE SEPARATOR - * -
	JR	NZ,_SC_ERR			; *
	RST	CALBAS
	DEFW	0020H				; STEP PAST THE SEPARATOR
	CALL	LETT				; FETCH THE LETTER & A NUMBER (IF PRESENT)
	CALL	COMM				; IS THERE A SEPARATOR?
	JR	NZ,SCAN_0
	CALL	N_NAME				; PICK UP THE NAME
SCAN_0
	PUSH	AF				; SAVE CURRENT CHARACTER
	LD	A,(DR+L_STR1)			; GET THE LETTER
	CP	4EH				; IS IT 'N' ?
	JR	NZ,SCANN_1
	SET	3,(IY+FLAGS3-Y)			; SET THE 'NETWORK' FLAG
						; IS THERE ANYTHING ELSE?
SCANN_1	POP	AF				; RETRIEVE CODE
	CP	0DH				; END OF LINE
	JR	Z,T_PROG
	CP	3AH				; END OF STATEMENT
	JR	Z,T_PROG
	CP	0AAH				; SCREEN$?
	JR	Z,T_SCRE
	CP	0AFH				; CODE?
	JR	Z,T_CODE
	CP	0CAH				; LINE?
	JR	Z,T_LINE
	CP	0E4H				; DATA?
	JP	Z,T_DATA

_SC_ERR	RST	SH_ERR				; *
	DEFB	00H				; 'NONSENSE IN BASIC'


;______________________________________________________________________


T_LINE	RST	CALBAS
	DEFW	0020H				; STEP ON
	RST	CALBAS
	DEFW	1C82H				; FETCH THE LINE NUMBER
	CALL	ST_END				; STATEMENT TO FINISH HERE

		; RUN-TIME
	RST	CALBAS
	DEFW	1E99H				; UNSTACK THE LINE NUMBER
	LD	(DR+HD_11),BC			; STORE THE LINE NUMBER
	JR	T_PR_1

;______________________________________________________________________

T_PROG	CALL	ST_END				; STATEMENT MUST FINISH HERE

		; T_PROG RUN-TIME

T_PR_1  XOR	A
	LD	(DR+HD_00),A			; PROGRAMS ARE OF TYPE '0'
	LD	HL,(E_LINE)
	LD	DE,(PROG)
	LD	(DR+HD_0D),DE			; START IS 'PROG'
	SCF
	SBC	HL,DE
	LD	(DR+HD_0B),HL			; SAVE THE 'PROGRAM & VARIABLES' LENGTH
	LD	HL,(VARS)
	SBC	HL,DE
	LD	(DR+HD_0F),HL			; SAVE THE 'PROGRAM' LENGTH
	RET

;______________________________________________________________________

T_SCRE	RST	CALBAS
	DEFW	0020H				; STEP ON
	CALL	ST_END				; STATEMENT TO FINISH HERE

		; SCREEN$ RUN-TIME
	LD	HL,1B00H			; SIZE OF SCREEN
	LD	(DR+HD_0B),HL
	LD	HL,4000H			; START ADDRESS
	LD	(DR+HD_0D),HL
	LD	A,03H				; SCREEN$ IS TYPE '3'
	LD	(DR+HD_00),A
	RET


;______________________________________________________________________
T_CODE  RST	CALBAS
	DEFW	0020H				; STEP ON
	CP	0DH
	JR	Z,T_C1
	CP	3AH
	JR	NZ,T_C2
	BIT	5,(IY+FLAGS3-Y)			; USING 'SAVE'?
	JR	NZ,_SC_ERR			; * ERROR IF YES
T_C1	RST	CALBAS
	DEFW	1CE6H				; STACK A ZERO
	JR	T_C3
T_C2	RST	CALBAS
	DEFW	1C82H				; GET FIRST NUMBER
	CALL	COMM				; LOOK FOR A SEPARATOR
	JR	Z,T_C4
T_C3	BIT	5,(IY+FLAGS3-Y)			; USING 'SAVE' ?
	JR	NZ,_SC_ERR			; * ERROR IF YES
	RST	CALBAS
	DEFW	1CE6H				; STACK THE 'SECOND' ZERO
	JR	T_C5
T_C4	RST	CALBAS
	DEFW	0020H				; STEP ON
	RST	CALBAS
	DEFW	1C82H				; GET SECOND NUMBER
T_C5	RST	CALBAS
	DEFW	0018H
	CALL	ST_END				; STATEMENT FINISHES HERE

		; CODE RUN-TIME
	RST	CALBAS
	DEFW	1E99H				; UNSTACK SECOND NUMBER
	LD	(DR+HD_0B),BC			; STORE LENGTH
	RST	CALBAS
	DEFW	1E99H				; UNSTACK FIRST NUMBER
	LD	(DR+HD_0D),BC			; STORE START
	LD	A,03H
	LD	(DR+HD_00),A			; CODE IS TYPE '3'
	RET


;______________________________________________________________________

T_DATA	BIT	6,(IY+FLAGS3-Y)			; USING 'MERGE' ?
	JR	Z,T_D1

	RST	SH_ERR
	DEFB	014H				; 'MERGE' ERROR
;
T_D1	RST	CALBAS
	DEFW	0020H				; STEP ON PAST 'DATA'

	RST	CALBAS
	DEFW	28B2H				; SCAN THE NEXT EXPRESSION
	SET	7,C				; BIT 7,C IS A SYNTAX/RUN BIT
						; AND NEEDS RESETTING FOR 'ARRAYS'

	JR	NC,T_D2				; JUMP IS AN EXISTING VARIABLES

	LD	HL,0000H			; CLEAR THE BASE ADDRESS
	BIT	4,(IY+FLAGS3-Y)
	JR	NZ,T_D5				; JUMP IS USING 'LOAD'

	LD	(IY+ERR_NR-Y),01H
	RST	ROMERR				; 'VARIABLE NOT FOUND'

T_D2	JR	Z,T_D3

T_DERR	RST	SH_ERR
	DEFB	00H				; 'NONSENSE IN BASIC'

T_D3	RST	SYNT
	JR	Z,T_D7				; FORWARD IN SYNTAX TIME

	BIT	5,(IY+FLAGS3-Y)
	JR	Z,T_D4				; FORWARD UNLESS 'SAVE'

	BIT	7,(HL)				; TEST THE 'DESCRIPTOR'
	JR	Z,T_DERR			; ERROR IF NOT A DIMENSIONED ARRAY

T_D4	INC	HL				; ADVANCE ALONG THE VARIABLE
	LD	A,(HL)				; FETCH THE LOW LENGTH
	LD	(DR+HD_0B),A			; SAVE IT
	INC	HL
	LD	A,(HL)				; FETCH THE HIGH LENGTH
	LD	(DR+HD_0C),A			; SAVE IT
	INC	HL				; STEP ON

T_D5	LD	A,C
	LD	(DR+HD_0F),A			; SAVE THE VARIABLE'S DESCRIPTOR
	LD	A,01H				; ASSUME A NUMERIC ARRAY
	BIT	6,C
	JR	Z,T_D6				; JUMP IF NUMERIC
	INC	A				; MAKE IT A STRING ARRAY

T_D6	LD	(DR+HD_00),A			; SAVE THE TYPE

T_D7	EX	DE,HL				; POINTER TO DE
	RST	CALBAS
	DEFW	0020H				; STEP ON
	CP	29H				; LOOK FOR THE ')'
	JR	NZ,T_DERR			; ERROR IF ABSENT

	RST	CALBAS
	DEFW	0020H				; STEP PAST IT

	CALL	ST_END				; STATEMENT FINISHES IN SYNTAX TIME

		; DATA RUN-TIME
	LD	(DR+HD_0D),DE			; POINTER GOES TO 'START'
	RET


;______________________________________________________________________



S_SAVE		; SCAN THE STATEMENT FIRST
	SET	5,(IY+FLAGS3-Y)			; SET THE 'SAVE' FLAG
	CALL	SCANN
	LD	A,(DR+L_STR1)			; FETCH THE LETTER
	CP	42H				; IS IT 'B' ?
	JR	Z,S_BYTS
	CP	4EH				; IS IT 'N' ?
	JR	NZ,S_SA_M
	CALL	N_CHEK				; CHECK FOR A 'IRIS' STATION NUMBER
	CALL	NTEMP				; CREATE A 'TEMPORARY' NET CHANNEL
	JR	S_BYTS
S_SA_M	CALL	MNCHEK				; CHECK FOR "M",DRIVE NUMBER, NAME
	JP	ACT_SA				; JUMP FORWARD TO ' SAVE TO M'

S_BYTS	LD	B,09H				; THERE ARE NINE HEADER BYTES
	LD	HL,DR+HD_00			; BASE ADDRESS
S_B1	CALL	SA_OUT
	INC	HL
	DJNZ	S_B1				; FOR THE NINE BYTES

	LD	HL,(DR+HD_0D)			; THE 'START' ADDRESS
	BIT	3,(IY+FLAGS3-Y)			; USING THE NET?
	JR	Z,S_B2A				; CONTINUE ONLY WITH THE NET
	LD	A,(DR+HD_00)			; FETCH THE TYPE CODE
	CP	03H				; IS IT 00 - 02 ?
	JR	NC,S_B2A

		; CREATING A CHANNEL WILL CHANGE THE POINTERS
	LD	DE,N_LEN			; LENGTH OF NET AREA
	ADD	HL,DE

S_B2A	LD	BC,(DR+HD_0B)			; THE LENGTH
S_B2	LD	A,C
	OR	B
	JR	Z,S_B3				; UNTIL 'BC' BYTES ARE SENT
	CALL	SA_OUT
	DEC	BC				; COUNTER DOWN
	INC	HL				; ADDRESS UP
	JR S_B2

S_B3	JP	SLVMEX				; EXIT (RECLAIMING NET CHANNEL IF USED)

SA_OUT	PUSH	HL				; SEND OUT A CHARACTER
	PUSH	BC
	BIT	3,(IY+FLAGS3-Y)			; USING THE NET?
	LD	A,(HL)				; FOR EACH BYTE
	JR	NZ,SA_O1			; JUMP IF YES
	CALL	OUT_T2				; TO THE RS232 PORT
	JR	SA_O2
SA_O1	CALL	OUT_N				; TO THE NET
SA_O2	POP	BC
	POP	HL
	RET

;______________________________________________________________________

S_LOAD		; SCAN THE STATEMENT FIRST
	SET	4,(IY+FLAGS3-Y)			; SET A 'LOAD' FLAG
	CALL	SCANN				; USE THE 'SAVE' PARAMETER SUBROUTINE

		; LOAD RUN-TIME
	JP	L_TEST

;______________________________________________________________________

S_VERI		; SCAN THE STATEMENT FIRST
	SET	7,(IY+FLAGS3-Y)			; SET THE VERIFY FLAG
	CALL	SCANN

		; VERIFY  RUN-TIME
	JP	L_TEST

;______________________________________________________________________

S_MERG		; SCAN THE STATEMENT FIRST
	SET	6,(IY+FLAGS3-Y)			; SET THE MERGE FLAG
	CALL	SCANN

		; MERGE  RUN-TIME

;______________________________________________________________________

L_TEST		; CONSIDER "N" & "B", RETURNING IF "M"

		; FIRST SAVE THE 'SCANN' PARAMETERS
	LD	HL,DR+HD_00			; BASE OF 'SCANN' PARAMETERS
	LD	DE,DR+SC_00			; BASE OF PRESERVING AREA
	LD	BC,0007H
	LDIR					; PRESERVE THEM

		; NOW FETCH THE 'INCOMING' HEADER
	LD	A,(DR+L_STR1)			; FETCH THE LETTER
	CP	4EH				; IS IT 'N'?
	JR	Z,L_T1
	CP	42H				; IS IT 'B'?
	JR	Z,L_T2
	CALL	MNCHEK				; ENSURE IT IS 'M'
	CALL	GET_HD				; GET MICRODRIVE HEADER
	JR	H_SORT				; THEN SORT OUT

L_T1	CALL	N_CHEK				; CHECK THE STATION NUMBER
	CALL	NTEMP				; CREATE A 'TEMPORARY' NET CHANNEL

L_T2	LD	HL,DR+HD_00			; PREPARE TO FETCH THE NEW HEADER
	LD	B,09H				; WHICH WILL HAVE NINE BYTES

L_T3	PUSH	HL				; SAVE POINTER
	PUSH	BC				; SAVE COUNTER
	BIT	3,(IY+FLAGS3-Y)			; USING THE NET?
	JR	Z,L_T4
L_T35
	CALL	IN_BYT				; FETCH A BYTE FROM THE NET
	JR      NC,L_T35
	JR	L_T5
L_T4	CALL	IN_BYP				; FETCH A BYTE FROM THE RS232
	JR      NC,L_T4
L_T5	POP	BC				; RETREIVE THE COUNTER
	POP	HL				; RETREIVE THE POINTER
	LD	(HL),A				; ENTER THE BYTE
	INC	HL				; STEP ON
	DJNZ	L_T3

;______________________________________________________________________

H_SORT		; ANALYSE THE HEADER
	LD	A,(DR+SC_00)			; FETCH THE 'SCANN' TYPE CODE
	LD 	B,A				; SAVE IT AN 'B'
	LD	A,(DR+HD_00)			; FETCH THE 'INCOMING' TYPE CODE
	CP	B				; ARE THEY THE SAME?
	JR	NZ,H_ERR

	CP	03H				; IS IT A CODE BLOCK?
	JR	Z,VE_CON			; JUMP IF IT IS
	JR	C,H_S1

H_ERR	RST	SH_ERR
	DEFB	16H				; WRONG FILE TYPE

H_S1	BIT	6,(IY+FLAGS3-Y)
	JR	NZ,ME_CON			; FORWARD IF MERGING
	BIT	7,(IY+FLAGS3-Y)
	JP	Z,LD_CON			; FORWARD IF LOADING
						; CONTINUE WITH VERIFY

;______________________________________________________________________

VE_CON		; HANDLE ALL VERIFICATION; AND THE LOADING OF CODE BLOCKS
	BIT	6,(IY+FLAGS3-Y)
	JR	Z,VE_C1				; MERGING OF BLOCKS IS NOT ALLOWED

	RST	SH_ERR				; BLOCKS CANNOT BE MERGED
	DEFB	14H				; 'MERGE' ERROR

VE_C1	LD	HL,(DR+SC_0B)			; FETCH THE 'OLD' LENGTH
	LD	DE,(DR+HD_0B)			; AND THE 'NEW' LENGTH
	LD	A,H
	OR	L
	JR	Z,VE_C2				; JUMP IF NO START SPECIFIED
	SBC	HL,DE
	JR	NC,VE_C2			; ERROR IF BLOCK TOO BIG

	BIT	4,(IY+FLAGS3-Y)			; CODE/VERIFY
	JR	Z,VE_C15

	RST	SH_ERR				; CODE ERROR
	DEFB	13H
VE_C15
	RST	SH_ERR
	DEFB	15H				; ERROR IN VERIFICATION

VE_C2	LD	HL,(DR+SC_0D)			; FETCH 'OLD' START
	LD	A,(IX+CHTYPE)			; IS IT A MICRODRIVE
	CP	'M'+80H
	JR	NZ,LD_C35
	LD	HL,(DR+N_STR2+2)		; RELOCATED ADDRESS OF ARRAY
	JR	LD_D4
LD_C35
	BIT	3,(IY+FLAGS3-Y)
	JR	Z,LD_D4				; JUMP IF USING THE RS232

	LD	A,(DR+HD_00)			; DONT BOTHER TO RELOCATE CODE
	CP	3
	JR	Z,LD_D4

	LD	BC,N_LEN			; ELSE ALLOW FOR THE NET CHANNEL
	ADD	HL,BC

LD_D4
	LD	A,H
	OR	L
	JR	NZ,VE_C3			; USE IT IF SPECIFIED
	LD	HL,(DR+HD_0D)			; ELSE USE THE 'NEW' START

VE_C3	LD	A,(DR+HD_00)			; FETCH THE TYPE CODE
	AND	A
	JR	NZ,VE_C4
	LD	HL,(PROG)			; USE 'PROG' IF VERIFYING A PROGRAM

VE_C4	CALL	GET_BL				; NOW LOAD/VERIFY THE CODE BLOCK
	JR	SLVMEX				; EXIT (RECLAIMING NET CHANNEL IF USED)

;______________________________________________________________________

ME_CON		; CONTROL ROUTINE FOR MERGING PROGRAMS AND VARIABLES
	LD	A,(DR+HD_12)			; IS THERE A LINE NUMBER?
	AND	0C0H

	JR	NZ,ME1				; NO CONTINUE

	CALL	DELTMP
	RST	SH_ERR
	DEFB	14H				; 'MERGE' ERROR

ME1
	LD	BC,(DR+HD_0B)			; 'LENGTH'
	PUSH	BC				; SAVE A COPY

	INC	BC				; MAKE ROOM +1 IN THE WORKSPACE
	RST	CALBAS
	DEFW	0030H

	LD	(HL),80H			; ENTER A '80H' INTO THE EXTRA LOCATION

	EX	DE,HL				; BASE TO HL
	POP	DE				; LENGTH TO DE
	PUSH	HL				; FOR THE 'LINES' & THE 'VARIABLES'

	CALL	GET_BL				; NOW GET THE BLOCK

	POP	HL				; RETREIVE THE POINTER TO THE LOADED 'LINES & VARIABLES'
	RST	CALBAS				; CALL THE 'MERGING' SUBROUTINE
	DEFW	08CEH

;______________________________________________________________________

SLVMEX
	LD	A,(IX+CHTYPE)
	CP	'M'+80H
	JR	NZ,SLV2
	CALL	CLOSIX
	JR	SLV1
SLV2
	BIT	3,(IY+FLAGS3-Y)			; USING THE NET?
	JR	Z,SLV1

						; OTHERWISE RECLAIM THE 'AD HOC' NET CHANNEL
	CALL	NTCLSE				; SEND THE FINAL BUFFER
	CALL    DELTMP

SLV1	JP	END1				; EXIT AS USUAL

;______________________________________________________________________
